{
  "web": [
    {
      "label": "Component",
      "name": "component",
      "children": [
        {
          "label": "Alert Notification",
          "name": "alert-notification",
          "type": "file",
          "generalNotes": "How to test an alert notification",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a alert notification\n\nGIVEN THAT I am on a page with a alert notification\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use use features that trigger the alert I SEE the alert (BUT focus DOES NOT transfer automatically when the alert appears)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use use features that trigger the alert\n     * I HEAR the alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n     * I HEAR it identifies itself as an alert\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I use features that trigger the alert\n     * I HEAR the alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n     * I HEAR it identifies itself as an alert\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/alert-notification>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a alert notification\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus does not automatically move to the alert, but can move to interactive elements within the alert (example: Dismiss button)\n   * Arrow: Browses to the alert like any other content\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus does not move to the alert when it appears, but it can be browsed by the screenreader\n\n3. Listen to screenreader output on all devices\n\n   * Name: The alert is read when it appears (BUT focus DOES NOT transfer automatically when the alert appears)\n   * Role: It identifies itself as an alert\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/alert-notification>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Notes\n\nAn alert is dynamic content that is injected into the page when it changes and a person using a screenreader needs to know that some state of the page or application has changed.\n\n* Use alerts sparingly.\n* If an alert is present on page load, it won't be read automatically.\n  * If an element is present on page load, it is not technically an alert.\n* The alert will be read by the screen reader when it becomes visible and or appears new in the DOM.\n\n### Browser + screenreader quirks\n\n* Screenreaders do not implement alerts uniformly and must be tested.\n  * Just because an alert pattern works in one screenreader doesn't mean it will work in all three screenreaders (JAWS, NVDA, and MacOS VoiceOver).\n* The element referenced by the `aria-describedby` attribute cannot use the `role=\"alert\"` attribute (see example below for workaround).\n  * [VoiceOver fails to read a referenced `role=\"alert\"` element when the input is in focus (AccessibilitySupport)](https://a11ysupport.io/tests/tech__aria__aria-describedby-with-role-alert).\n* NVDA will read the alert twice if it appears while the input is in focus: once from the `role=\"alert\"` being injected and a second time from the `aria-describedby` association.\n* NVDA needs a fraction of a second to catch up with changes in the DOM; we suggest using a `setTimeout` to delay displaying the alert.\n\n### Name\n\n* Inner text describes alert when it appears on screen.\n\n### Role\n\n* Use `role=\"alert\"` for elements injected into the page.\n\n### Focus\n\n* Focus does not move to the element when the alert appears.\n\n## Code examples\n\n### Basic notification\n\n<!-- TODO: Needs JS to update error message stylings -->\n\n```html\n<div role=\"alert\" \n     id=\"alert-notification\" \n     class=\"alert notification inert\">\n    <!--- Use JS to inject the alert here -->\n</div>\n\n<button id=\"show-alert-notification\">\n  Save my settings\n</button>\n```\n\n<example>\n<div id=\"alertSuccessExample\"\n     role=\"alert\" \n     id=\"alert-notification\" \n     class=\"alert notification inert\">\n    <!--- Use JS to inject the alert here -->\n</div>\n\n<button data-fn=\"alertSuccess\" id=\"show-alert-notification\">\n  Save my settings\n</button>\n</example>\n\n### Error alert from an input field\n\n<!-- TODO: Needs to update warning stylings -->\n\n```html\n<label for=\"favorite-sesame-street-character\">\n  What is your favorite Sesame Street character?\n  <span>Required</span>\n</label>\n\n<input type=\"text\"\n       id=\"favorite-sesame-street-character\"\n       aria-describedby=\"favorite-character-error-example favorite-character-hint\"\n       required>\n\n<div role=\"alert\" \n     id=\"favorite-character-alert\" \n     class=\"alert inert\">\n  <!--- Do not reference this alert element\n        directly with aria-describedby -->\n  <div id=\"favorite-character-error-example\">\n    <!--- Use JS to inject the alert here -->\n  </div>     \n</div>\n\n<div class=\"hint\" id=\"favorite-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster\n</div>\n\n<button id=\"show-error\">\n  Toggle error\n</button>\n```\n\n<example>\n<label for=\"favorite-sesame-street-character\">\n  What is your favorite Sesame Street character?\n  <span>Required</span>\n</label>\n\n<input type=\"text\"\n    id=\"favorite-sesame-street-character\"\n    aria-describedby=\"favorite-character-error favorite-character-hint\"\n    required>\n\n<div role=\"alert\" \n     id=\"favorite-character-alert\" \n     class=\"alert inert\">\n  <!--- Do not reference this alert element\n        directly with aria-describedby -->\n  <div id=\"favorite-character-error\">\n    <!--- Use JS to inject the alert here -->\n  </div>     \n</div>\n\n<div class=\"hint\" id=\"favorite-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster\n</div>\n\n<button data-fn=\"alertWarning\" id=\"show-error\">\n  Toggle error\n</button>\n</example>\n\n## Further reading\n\n[WCAG 4.1.3 Status Messages (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html)"
        },
        {
          "label": "Animation",
          "name": "animation",
          "type": "file",
          "generalNotes": "How to test an animation",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an animation\n\nGIVEN THAT I am on a page with an animation\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use tab key to move focus to the pause/play/hide controls I SEE the control is strongly visibly focused\n   * THEN when I use the spacebar or enter key to activate the control I SEE the intended action occurs\n   * THEN when I use the device's reduced motion settings I SEE the animation is disabled or reduced\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use tab key to move focus to the pause/play/hide controls\n     * I HEAR the control's purpose (pause/play/hide) is clear\n     * I HEAR it identifies its role of button\n     * I HEAR the control expresses its state if applicable (pressed, expanded)\n   * THEN when I use the spacebar or enter key to activate the control I HEAR the intended action occurs\n   * THEN when I use the device's reduced motion settings I HEAR the animation is disabled or reduced\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to move focus to the pause/play/hide controls\n     * I HEAR the control's purpose (pause/play/hide) is clear\n     * I HEAR it identifies its role of button\n     * I HEAR the control expresses its state if applicable (pressed, expanded)\n   * THEN when I doubletap to activate control I HEAR the intended action occurs\n   * THEN when an animation is focused I HEAR an alternative method of consumption or interaction is available\n\n4. Device OS Settings\n\n   * WHEN I use reduced motion THEN I see large motion, animations or effects are reduced or eliminated\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/animation>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an animation\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Where applicable, focus moves directly to pause/play/hide controls\n   * Spacebar: Activates the control\n   * Enter: Activates the control\n   * Reduced motion settings: Animation is disabled or reduced\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the control\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: The control's purpose (pause/play/hide) is clear\n   * Role: It identifies its role of button\n   * State: The control expresses its state if applicable (pressed, expanded)\n\n4. Device OS Settings\n   * Reduced motion: Large motion, animations or effects are reduced or eliminated\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/animation>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Animations (like animated gifs or animated SVG) can be accessible if:\n\n* it automatically stops after 5 seconds or\n* if users are presented with an intuitive way to pause it\n* it has `alt` text or an alternative method of consumption is available\n\n## Code examples\n\n### Allow animations to be disabled with CSS\n\nPeople with vestibular disorders can be made ill by sweeping animations on screen.\n\nIt is important to change or disable animations when device reduce motion settings are activated.\n\nThis can be accomplished via CSS media query.\n\n<!-- TODO: the colors displaying CSS code snippet needs updated styles to pass color contrast\n\n```CSS\n@keyframes bounce {\n  0% { transform: scale(1); }\n  25% { transform: scale(.9); }\n  50% { transform: scale(1); }\n  75% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n@keyframes dissolve {\n  0% { background-color: green; }\n  50% { background-color: darkgreen; }\n  100% { background-color: green; }\n}\n\n.animation {\n  background-color: green;\n  animation: bounce 2s linear infinite both;\n}\n\n@media (prefers-reduced-motion) {\n  .animation {\n    animation-name: dissolve;\n  }\n}\n``` \n\n```html\n<div class=\"animation\">Animated element</div>\n```\n\nTODO: the below bouncy box should do what our example demo suggests\n\n### Bouncy box\nIf your device is set to reduce motion, the animation will softly fade from one color to the next instead of bounce; otherwise it will bounce.\n\n<example>\n<div class=\"animation\">Animated element</div>\n</example> -->\n\n<!-- TODO: Javascript for code snippet needs supporting\n\n ### Detecting with JavaScript\n```____\nconst pref = \n  window.matchMedia(\n    '(prefers-reduced-motion: reduce)'\n  );``` -->\n\n## Further Reading\n\n* [WCAG 2.2.1 Timing Adjustable (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/timing-adjustable)\n* [WCAG 2.2.2 Pause, Stop, Hide (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html)\n* [WCAG 2.3.1 Three Flashes or Below Threshold (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/three-flashes-or-below-threshold)\n* [WCAG 2.3.3 Animation from Interactions (Level AAA)](https://www.w3.org/WAI/WCAG22/Understanding/animation-from-interactions.html)"
        },
        {
          "label": "Autocomplete",
          "name": "autocomplete",
          "type": "file",
          "generalNotes": "How to test an autocomplete input with listbox",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an autocomplete input with listbox\n\nGIVEN THAT I am on a page with an autocomplete input with listbox\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the text input I SEE focus is strongly visually indicated\n   * THEN when I use the arrow keys to select an option I SEE the selected option is the new text input value\n   * THEN when I use the enter key I SEE the selected option is changed and focus returns to the text input\n   * THEN when I use the escape key when the select is open I SEE it collapses and focus moves to the text input\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to the text input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a select, popup, menu/submenu, listbox or combobox\n     * I HEAR its label is read and selected options are read\n     * I HEAR it indicates the value of the text input\n   * THEN when I use the arrow keys to select an option I HEAR the selected option is the new text input value\n   * THEN when I use the enter key I HEAR the selected option is changed and focus returns to the text input\n   * THEN when I use the escape key when the select is open I HEAR it collapses and focus moves to the text input\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a select\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a select, popup, menu/submenu, listbox or combobox\n     * I HEAR its label is read and selected options are read\n     * I HEAR it indicates the value of the text input\n   * THEN when I doubletap with the select in focus I HEAR the selected option is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/autocomplete>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the text input\n   * Arrow-keys: Focus moves to and selects the next option. If the textbox is empty and the listbox is not displayed, opens the listbox and moves visual focus to the next option. In both cases DOM focus remains on the textbox.\n   * Enter: The textbox value is set to the content of the selected option. The listbox closes.\n   * Escape: Clears the textbox. If the listbox is displayed, closes it.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input, traverses list\n   * Doubletap: Opens select, chooses option\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a select, popup, menu/submenu, listbox or combobox\n   * Group: Its label is read and selected options are read\n   * State: It indicates the value of the text input\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/autocomplete>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Custom listbox with autocomplete\n\nCustom listboxes are notoriously difficult to build in an accessible fashion for screenreaders.\n\n* [WCAG Examples](https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/)\n\n### Semantic input with datalist autocomplete\n\n* This simple native HTML example illustrates all the functionality of a listbox with inline autocomplete.\n  * Support and functionality on mobile devices varies.\n\n```html\n<label for=\"favorite-nato-text\">\n  What's your favorite NATO letter?:\n</label>\n<input id=\"favorite-nato-text\" \n       list=\"nato-letters\" \n       type=\"text\">\n       \n<datalist id=\"nato-letters\"> \n  <option value=\"Alpha\"> \n  <option value=\"Bravo\"> \n  <option value=\"Charlie\"> \n  <option value=\"Delta\">\n  <option value=\"Echo\">\n  <option value=\"Foxtrot\">\n  <option value=\"Golf\">\n  <option value=\"Hotel\">\n  <option value=\"India\">\n  <option value=\"Juliet\">\n  <option value=\"Kilo\">\n  <option value=\"Lima\">\n  <option value=\"Mike\">\n  <option value=\"November\">\n  <option value=\"Oscar\">\n  <option value=\"Papa\">\n  <option value=\"Quebec\">\n  <option value=\"Romeo\">\n  <option value=\"Sierra\">\n  <option value=\"Tango\">\n  <option value=\"Uniform\">\n  <option value=\"Victor\">\n  <option value=\"Whiskey\">\n  <option value=\"X-ray\">\n  <option value=\"Yankee\">\n  <option value=\"Zulu\">\n</datalist>\n```\n\n<example>\n   <label for=\"favorite-nato-text\">\n  What's your favorite NATO letter?:\n</label>\n<input id=\"favorite-nato-text\" \n       list=\"nato-letters\" \n       type=\"text\">\n<datalist id=\"nato-letters\"> \n  <option value=\"Alpha\"> \n  <option value=\"Bravo\"> \n  <option value=\"Charlie\"> \n  <option value=\"Delta\">\n  <option value=\"Echo\">\n  <option value=\"Foxtrot\">\n  <option value=\"Golf\">\n  <option value=\"Hotel\">\n  <option value=\"India\">\n  <option value=\"Juliet\">\n  <option value=\"Kilo\">\n  <option value=\"Lima\">\n  <option value=\"Mike\">\n  <option value=\"November\">\n  <option value=\"Oscar\">\n  <option value=\"Papa\">\n  <option value=\"Quebec\">\n  <option value=\"Romeo\">\n  <option value=\"Sierra\">\n  <option value=\"Tango\">\n  <option value=\"Uniform\">\n  <option value=\"Victor\">\n  <option value=\"Whiskey\">\n  <option value=\"X-ray\">\n  <option value=\"Yankee\">\n  <option value=\"Zulu\">\n</datalist>\n</example>"
        },
        {
          "label": "Breadcrumbs",
          "name": "breadcrumbs",
          "type": "file",
          "generalNotes": "How to test breadcrumbs",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test breadcrumbs\n\nGIVEN THAT I am on a page with breadcrumbs\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a link\n   * I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link\n   * I SEE my browser goes somewhere\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a link\n     * I HEAR The link names correspond to their destination page titles\n     * I HEAR Links identify as a links in a breadcrumb navigation landmark\n     * I HEAR The current page link is indicated when focused\n     * I HEAR Is discoverable with screenreader shortcuts as a navigation landmark\n   * THEN when I use the enter key to activate the link\n   * I HEAR my browser goes somewhere\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a link\n     * I HEAR The link names correspond to their destination page titles\n     * I HEAR Links identify as a links in a breadcrumb navigation landmark\n     * I HEAR The current page link is indicated when focused\n     * I HEAR Is discoverable with screenreader shortcuts as a navigation landmark\n   * THEN when I doubletap with the link in focus\n   * I HEAR my browser goes somewhere\n\nFull information: <https://www.magentaa11y.com/checklist-web/breadcrumbs/>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Keyboard & screen reader actions\n   * Tab: Focus visibly moves to the link\n   * Enter: Activates the link\n\n2. Mobile screenreader gestures\n   * Swipe: Focus moves to the link\n   * Doubletap: Activates the link\n\n3. Screenreader output for all devices\n   * Name: The link names correspond to their destination page titles\n   * Role: Links identify as a links in a breadcrumb navigation landmark\n   * State: The current page link is indicated when focused\n   * Group: Is discoverable with screenreader shortcuts as a navigation landmark\n\nFull information: <https://www.magentaa11y.com/checklist-web/breadcrumbs/>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n<nav class=\"breadcrumbs\" aria-label=\"Breadcrumb\">\n  <ol>\n    <li>\n      <a href=\"/\">\n        Home\n      </a>\n    </li>\n    <li>\n      <a href=\"/web/\">\n        Web\n      </a>\n    </li>\n    <li>\n      <a href=\"/checklist-web/breadcrumbs/\" \n         aria-current=\"page\">\n        Breadcrumbs\n      </a>\n    </li>\n  </ol>\n</nav>\n\n```html\n<nav class=\"breadcrumbs\" aria-label=\"Breadcrumb\">\n  <ol>\n    <li>\n      <a href=\"/\">Home</a>\n    </li>\n    <li>\n      <a href=\"/web/\">Web</a>\n    </li>\n    <li>\n      <a href=\"/checklist-web/breadcrumbs/\" aria-current=\"page\">Breadcrumbs</a>\n    </li>\n  </ol>\n</nav>\n```\n\n## Developer notes\n\n* Breadcrumb link names must correspond to their destination page titles.\n  * In the example here, the “Web” link uses an `aria-label` that corresponds to the full title of the destination page.\n* Use a `<nav>` with a unique name like `aria-label=\"breadcrumbs\"`.\n* Placing the links inside `<ol>` and `<li>` provides context to users about a given breadcrumb’s position in a list and the total number of breadcrumbs.\n* Add `aria-current=\"page\"` to the last link in the breadcrumb. This represents the current item within a container or set of related elements.\n* <a href=\"https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/examples/breadcrumb/\">ARIA Authoring Practices Guide (APG) Breadcrumb Example</a>"
        },
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nGIVEN THAT I am on a page with a button\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a button I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the button I SEE the intended action occurs\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I use the spacebar and/or enter key to activate the button I HEAR the intended action occurs\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a button\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies its role of button\n     * I HEAR It indicates if it has popup for listbox or menus\n     * I HEAR It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n   * THEN when I doubletap with the button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the button.\n   * Spacebar: Activates the button.\n   * Enter: Activates the button.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n   * Name: Its purpose is clear\n   * Role: It identifies its role of button\n   * Group: It indicates if it has popup for listbox or menus\n   * State: It expresses its state if applicable (pressed, expanded, disabled/dimmed/unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/button>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/button/buttonTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/button/buttonVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/button/buttonNVDA.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/button/buttonJaws.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Buttons vs links\n\n### If it goes somewhere, it’s `<a>` link.\n\n* When the user clicks a link, they are taken to a different location in the site.\n  * Either another page or even another area of the same page\n* A link can look like a big shiny button but it must be coded as `<a>` link\n\n### If it does something, it’s a `<button>`\n\n* Buttons cause an action to occur on the same page\n  * Submit a form (even when submission takes you to a new page)\n  * Open a menu\n  * Launch a modal\n  * Expand details\n* A button can look like a link, but it must be coded as a `<button>`\n\n## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* It uses <u>CSS pseudo attributes</u> to create the arrow indicator, no Javascript.\n\n```html\n<button>\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\">\n   Continue\n   </button>\n</example>\n\n## Focusable disabled button\n\nThe preferred method is to use `aria-disabled=\"true\"` so screen reader users can find the button, click submit and be notified of errors in the form.\n\n```html\n<button aria-disabled=\"true\">\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">\n   Continue\n   </button>\n</example>\n\n## Fully disabled button\n\nA button that uses the disabled attribute will not be focusable, but it is still discoverable by the screen reader while browsing.\n\n```html\n<button disabled>\n  Continue\n</button>\n```\n\n<example>\n   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" disabled>\n   Continue\n   </button>\n</example>\n\n## When you can’t use semantic HTML\n\nThis custom button requires extra attributes and JS event listeners. Adding `tabindex=\"0\"` makes it focusable.\n\n```html\n<div role=\"button\" tabindex=\"0\" >\n  Continue\n</div>\n```\n\n## When there’s no inner text that text makes sense\n\n* As a last resort, `aria-label` can be used.\n* `aria-label` will (typically) replace the inner text of the button for the screen reader output.\n* DO NOT repeat the inner text in the `aria-label` as some screenreaders will read both.\n\n```html\n<div role=\"button\" tabindex=\"0\" aria-label=\"Continue\">\n  <!-- icon but no text -->\n</div>\n\n<div role=\"button\" tabindex=\"0\" aria-label=\"Buy now, iPhone 17\">\n  Buy now <!-- Ambiguous text doesn't describe the intent -->\n</div>\n```\n\n## When there are repeating buttons\n\nSometimes the design will call for multiple buttons with the same text label. In a case like this, `aria-label` can be used to name each control’s purpose.\n\n```html\n<button aria-label=\"Edit payment date\">\n  Edit\n</div>\n<button aria-label=\"Edit payment amount\">\n  Edit\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Inner text should describe the purpose of the button.\n* `aria-label=\"Button purpose\"` can also be used (as a last resort)\n\n### Role\n\n* Native button identifies as button by default\n* Use `role=\"button\"` for custom elements\n\n### Group\n\n* Use `aria-haspopup=\"true\"` for menu, listbox or modal\n* `aria-controls=\"popupId\"` is not well supported\n\n### State\n\n* Toggle buttons `aria-pressed=\"true/false\"`\n* Menus or expanders use `aria-expanded=\"true/false\"`\n* Use the `disabled` state for completely inactive buttons that shouldn’t be focusable\n* Use `aria-disabled=\"true/false\"` state for inactive custom elements\n\n### Focus\n\n* Focus must be visible\n* Custom elements (like `<div>`) need `tabindex=\"0\"` to be focusable"
        },
        {
          "label": "Carousel Slideshow",
          "name": "carousel-slideshow",
          "type": "file",
          "generalNotes": "How to test a carousel/slideshow",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a carousel/slideshow\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to carousel controls (forward, backward, pause/play, stop) I SEE focus is strongly visually indicated\n     * THEN when I use the spacebar or enter key I SEE the intended action occurs\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to carousel controls (forward, backward, pause/play, stop)\n     * I HEAR Control name and purpose is clear\n     * I HEAR Control identifies itself as a button\n     * I HEAR The number of slides and current position in the carousel is indicated\n     * THEN when I use the spacebar or enter key I HEAR the intended action occurs\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to move focus to carousel controls (forward, backward, pause/play, stop)\n     * I HEAR Control name and purpose is clear\n     * I HEAR Control identifies itself as a button\n     * I HEAR The number of slides and current position in the carousel is indicated\n     * THEN when I doubletap I HEAR the intended action occurs\n\n4. Device OS settings\n\n   * WHEN I use reduced motion THEN I see Carousel does not auto-advance, motion transitions are disabled\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/carousel-slideshow>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a carousel/slideshow\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to carousel controls (forward, backward, pause/play, stop)\n   * Spacebar: Activates the button\n   * Enter: Activates the button\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the carousel\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * Name: Control name and purpose is clear\n   * Role: Control identifies itself as a button\n   * Group: The number of slides and current position in the carousel is indicated\n\n4. Device OS settings\n   * Reduced motion: Carousel does not auto-advance, motion transitions are disabled\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/carousel-slideshow>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Our General Advice\n\nThink carefully before you use a carousel, slideshow, or multi-slide component. Consider another way to present the information.\n\n### Carousels go against many usability and accessibility best practices\n\nWherever possible, do not use carousels. Consider whether you can present content in another way, such as a list.\n\nCarousels are complex components that are hard to make accessible, and by their nature, go against many usability and accessibility best practices, such as:\n\n* Auto-advancing carousels are never allowed as it will violate [WCAG 2.2.2 Pause, Stop, Hide](https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html). Additionally, auto-advancing can be incredibly distracting for many users, and can be disruptive for screen reader users.\n* Carousels are a visual-first design that is complex to relay to screen readers the proper structure and information architecture.\n* Studies have shown that most people do not interact with carousels, or advance any slides. (Source: [Norman Nielsen article](https://www.nngroup.com/articles/designing-effective-carousels/))\n\n### Alternatives to Carousels\n\nSome alternative components to a Carousel to consider are:\n\n* A multi-step form\n  * This can work because it helps people stay on task.\n* A list of easily recognizable structure, like \"US Presidents\"\n  * This can work because the scope and contents are predictable.\n* Highlighted customer reviews\n  * This can work to build trust because the contents are predictable and a motivated user seeking social proof may be willing to navigate the carousel.\n\n## Code examples\n\n### Use semantic HTML\n\nThis is one example of an accessible carousel that uses HTML semantics and ARIA:\n\n* The carousel is grouped and has a name\n* The ordered list structure provides context for how many slides and which number slide someone is on.\n* No focus management is happening. We have chosen to NOT move a user from the next/previous buttons and allow them to browse at their own pace.\n* This example does not make use of a live announcing region, but in some cases, that may be helpful.\n\n```html\n<h2 id=\"headingCarousel\">Phones available</h2>\n<section id=\"carousel\" aria-label=\"Carousel\" aria-labelledby=\"headingCarousel carousel\" class=\"carousel\">\n\n  <div class=\"flex\">\n      <div>\n         <button class=\"Magentaa11y-button Magentaa11y-button--primary button-control button-control--left\"><span aria-hidden=\"true\">&lt;&lt;</span>\n            <span class=\"hidden-visually\">Previous 3 slides</span>\n         </button>\n         <button class=\"Magentaa11y-button Magentaa11y-button--primary button-control button-control--right\"><span aria-hidden=\"true\">&gt;&gt;</span>\n            <span class=\"hidden-visually\">Next 3 slides</span>\n         </button>\n      </div>\n    <ol class=\"list\" role=\"list\"> \n<!--  Need role=\"list\" because of weird Voiceover bug: https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html      -->\n      <li><img src=\"https://images.unsplash.com/photo-1591337676887-a217a6970a8a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fGlwaG9uZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60\" alt=\"iPhone 14\" /></li>\n      <li><img src=\"https://images.unsplash.com/photo-1583574333311-3a86605c76b2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2068&q=80\" alt=\"Samsung Galaxy phone\" /></li>\n      <li><img src=\"https://images.unsplash.com/photo-1612442443556-09b5b309e637?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80\" alt=\"Google Pixel phone\" /></li>\n    </ol>\n  </div>\n</section>\n```\n\n<example>\n   <h2 id=\"headingCarousel\">Phones available</h2>\n   <section id=\"carousel\" aria-label=\"Carousel\" aria-labelledby=\"headingCarousel carousel\" class=\"carousel\">\n      <div class=\"flex\">\n         <div class=\"button-container\">\n            <button class=\"Magentaa11y-button Magentaa11y-button--primary button-control button-control--left\"><span aria-hidden=\"true\">&lt;&lt;</span>\n               <span class=\"hidden-visually\">Previous 3 slides</span>\n            </button>\n            <button class=\"Magentaa11y-button Magentaa11y-button--primary button-control button-control--right\"><span aria-hidden=\"true\">&gt;&gt;</span>\n               <span class=\"hidden-visually\">Next 3 slides</span>\n            </button>\n         </div>\n         <ol class=\"list\" role=\"list\"> \n      <!--  Need role=\"list\" because of weird Voiceover bug: https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html      -->\n            <li><img src=\"https://images.unsplash.com/photo-1591337676887-a217a6970a8a?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fGlwaG9uZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60\" alt=\"iPhone 14\" /></li>\n            <li><img src=\"https://images.unsplash.com/photo-1583574333311-3a86605c76b2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2068&q=80\" alt=\"Samsung Galaxy phone\" /></li>\n            <li><img src=\"https://images.unsplash.com/photo-1612442443556-09b5b309e637?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80\" alt=\"Google Pixel phone\" /></li>\n         </ol>\n      </div>\n   </section>\n</example>\n\n## Related WCAG\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG21/Understanding/keyboard.html)\n* [WCAG 2.2.2 Pause, Stop, Hide (Level A)](https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)"
        },
        {
          "label": "Checkbox",
          "name": "checkbox",
          "type": "file",
          "generalNotes": "How to test a checkbox",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a checkbox\n\nGIVEN THAT I am on a page with a checkbox\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a checkbox I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar to activate the checkbox I SEE the state is changed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a checkbox\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies its role of checkbox\n     * I HEAR hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n     * I HEAR it expresses its state (checked/unchecked, disabled)\n   * THEN when I use the spacebar to activate the checkbox I HEAR the state is changed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a checkbox input\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies its role of checkbox\n     * I HEAR hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n     * I HEAR it expresses its state (checked/unchecked, disabled)\n   * THEN when I doubletap with the checkbox in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/checkbox>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a checkbox\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the checkbox\n   * Spacebar: Toggles the checkbox between states\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: Checkbox toggles between checked and unchecked states\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n   * Role: It identifies its role of checkbox\n   * Group: Hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n   * State: It expresses its state (checked/unchecked, disabled)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/checkbox>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/checkbox/checkbox_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/checkbox/checkbox_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/checkbox/checkbox_WindowsJawsChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/checkbox/checkbox_WindowsNvdaChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/checkbox/checkbox_MacOsVoiceOverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_input-checkbox.scss) to create the checkbox indicator, without Javascript.\n\n```html\n<fieldset>\n  <legend>Choose your favorite Sesame Street characters:</legend>\n\n  <input type=\"checkbox\" id=\"elmoCheckbox\">\n  <label for=\"elmoCheckbox\">Elmo</label>\n\n  <input type=\"checkbox\" id=\"bigBirdCheckbox\">\n  <label for=\"bigBirdCheckbox\">Big Bird</label>\n\n  <input type=\"checkbox\" id=\"cookieCheckbox\" checked>\n  <label for=\"cookieCheckbox\">Cookie Monster</label>\n</fieldset>\n```\n\n<example>\n<fieldset>\n  <legend>Choose your favorite Sesame Street characters:</legend>\n\n  <input type=\"checkbox\" id=\"elmoCheckbox\">\n  <label for=\"elmoCheckbox\">Elmo</label>\n\n  <input type=\"checkbox\" id=\"bigBirdCheckbox\">\n  <label for=\"bigBirdCheckbox\">Big Bird</label>\n\n  <input type=\"checkbox\" id=\"cookieCheckbox\" checked>\n  <label for=\"cookieCheckbox\">Cookie Monster</label>\n</fieldset>\n</example>\n\n### Don't put interactive elements inside the label\n\nEven though this is valid HTML, it creates unpredictable results with screenreaders. A (currently) reliable method is to keep interactive elements outside the label and reference it with `aria-describedby=\"hint-id\"`\n\n```html\n<fieldset>\n  <legend>Legal disclaimers</legend>\n  <div id=\"hint-tc\" class=\"hint-checkbox\">\n    <a href=\"/code-of-conduct/\">Read terms and conditions</a>\n  </div>\n  <input type=\"checkbox\"\n         id=\"tc-agree\"\n         aria-describedby=\"hint-tc\">\n  <label for=\"tc-agree\">\n    I agree to the terms and conditions\n  </label>\n</fieldset>\n```\n\n<example>\n<fieldset>\n  <legend>Legal disclaimers</legend>\n  <div id=\"hint-tc\" class=\"hint-checkbox\">\n    <a href=\"/code-of-conduct/\">Read terms and conditions</a>\n  </div>\n  <input type=\"checkbox\"\n         id=\"tc-agree\"\n         aria-describedby=\"hint-tc\">\n  <label for=\"tc-agree\">\n    I agree to the terms and conditions\n  </label>\n</fieldset>\n</example>\n\n### Disabled and focusable checkbox (preferred)\n\n* An input using `aria-disabled=\"true` will be focusable with the tab key\n* Use JS to `preventDefault()`\n\n```html\n<fieldset>\n  <legend>Choose your favorite fruit</legend>\n\n  <input type=\"checkbox\" id=\"lemonsCheckbox\" aria-disabled=\"true\" checked>\n  <label for=\"lemonsCheckbox\">Lemons</label>\n\n  <input type=\"checkbox\" id=\"limesCheckbox\" aria-disabled=\"true\">\n  <label for=\"limesCheckbox\">Limes</label>\n\n</fieldset>\n```\n\n<example>\n<fieldset>\n  <legend>Choose your favorite fruit</legend>\n\n  <input type=\"checkbox\" id=\"lemonsCheckbox\" aria-disabled=\"true\" checked>\n  <label for=\"lemonsCheckbox\">Lemons</label>\n\n  <input type=\"checkbox\" id=\"limesCheckbox\" aria-disabled=\"true\">\n  <label for=\"limesCheckbox\">Limes</label>\n\n</fieldset>\n</example>\n\n### Fully disabled checkbox\n\n* An input using the `disabled` attribute will not be focusable with the tab key\n* Arrow keys will still be able to browse disabled inputs\n\n```html\n<fieldset>\n  <legend>Choose your favorite video game</legend>\n\n  <input type=\"checkbox\" id=\"marioCheckbox\" disabled checked>\n  <label for=\"marioCheckbox\">MarioKart</label>\n\n  <input type=\"checkbox\" id=\"zeldaCheckbox\" disabled>\n  <label for=\"zeldaCheckbox\">Legend of Zelda</label>\n\n</fieldset>\n```\n\n<example>\n<fieldset>\n  <legend>Choose your favorite video game</legend>\n\n  <input type=\"checkbox\" id=\"marioCheckbox\" disabled checked>\n  <label for=\"marioCheckbox\">MarioKart</label>\n\n  <input type=\"checkbox\" id=\"zeldaCheckbox\" disabled>\n  <label for=\"zeldaCheckbox\">Legend of Zelda</label>\n\n</fieldset>\n</example>\n\n### When you can't use semantic HTML\n\nThis custom checkbox requires extra attributes and event listeners:\n\n```html\n<div role=\"checkbox\" tabindex=\"0\" aria-checked=\"true\">\n  Elmo\n</div>\n```\n\n### Speciality checkboxes\n\nSometimes a design may call for a card-type checkbox.\n\n* Its core should still be a semantic checkbox input\n* Use `aria-describedby` to read extra content *after* the the name, role, and state\n\n```html\n<ul class=\"cards\">\n  <li class=\"card interactive\">\n    <input type=\"checkbox\"\n           id=\"oscarCheckboxCard\"\n           aria-describedby=\"descriptionOscar\" >\n    <label for=\"oscarCheckboxCard\">\n      Oscar the Grouch\n    </label>\n    <div class=\"extended-description\"\n         id=\"descriptionOscar\">\n      Oscar has a green body, no visible \n      nose, and lives in a trash can.\n    </div>\n  </li>\n  <li class=\"card interactive\">\n    <input type=\"checkbox\"\n           id=\"groverCheckboxCard\"\n           aria-describedby=\"descriptionGrover\" >\n    <label for=\"groverCheckboxCard\">\n      Grover\n      </label>\n    <div class=\"extended-description\"\n         id=\"descriptionGrover\">\n      Grover is a self-described as lovable, cute, \n      and furry, he is a blue monster who rarely \n      uses contractions when he speaks or sings.\n    </div>\n  </li>\n</ul>\n```\n\n<example>\n<ul class=\"cards\">\n  <li class=\"card interactive\">\n    <input type=\"checkbox\"\n           id=\"oscarCheckboxCard\"\n           aria-describedby=\"descriptionOscar\" >\n    <label for=\"oscarCheckboxCard\">\n      Oscar the Grouch\n    </label>\n    <div class=\"extended-description\"\n         id=\"descriptionOscar\">\n      Oscar has a green body, no visible \n      nose, and lives in a trash can.\n    </div>\n  </li>\n  <li class=\"card interactive\">\n    <input type=\"checkbox\"\n           id=\"groverCheckboxCard\"\n           aria-describedby=\"descriptionGrover\" >\n    <label for=\"groverCheckboxCard\">\n      Grover\n      </label>\n    <div class=\"extended-description\"\n         id=\"descriptionGrover\">\n      Grover is a self-described as lovable, cute, \n      and furry, he is a blue monster who rarely \n      uses contractions when he speaks or sings.\n    </div>\n  </li>\n</ul>\n</example>\n\n## Developer notes\n\n### Name\n\n* The `label` text must describe the checkbox input\n* Use `aria-describedby=\"hint-id\"` for hints or additional descriptions\n* `aria-label=\"Checkbox input purpose\"` can also be used (as a last resort)\n\n### Role\n\n* **By default**, semantic HTML checkbox inputs identify as a checkbox\n* Use `role=\"checkbox\"` for custom elements\n\n### Group\n\n* Semantic HTML\n  * `<fieldset>` wraps a checkbox group\n  * `<legend>` describes the group's purpose\n  * Each `<label>` must include `for=\"input-id\"` to be associated with its input\n* Custom elements\n  * Use `role=\"group\"` in the place of fieldset\n  * Use `aria-labelledby=\"label-id\"` to associate an element as a label\n  * `aria-label=\"Group purpose\"` can also be used if there's no label with an `id`\n\n### State\n\n* Semantic HTML\n  * Use `checked` for native HTML\n  * Use the `disabled` state for inactive checkboxes\n* Custom element\n  * Use `aria-checked=\"true/false\"` to express state\n  * Use `aria-disabled=\"true\"` to declare inactive elements\n\n### Focus\n\n* Focus must be visible\n* Custom elements will require keyboard event listeners"
        },
        {
          "label": "Complex Graphics",
          "name": "complex-graphics",
          "type": "file",
          "generalNotes": "How to test a figure, map, chart, and other complex graphics",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/complex-graphics>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/complex-graphics>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Date Picker",
          "name": "date-picker",
          "type": "file",
          "generalNotes": "How to test a date picker dialog",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a date picker dialog\n\nGIVEN THAT I am on a page with a date picker dialog\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the date dialog button I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key I SEE the date picker dialog appears\n   * THEN when I use the arrow keys I SEE the selection moves through next/previous dates\n   * THEN when I use the home/end key I SEE the selection moves to the first/last day of the current week\n   * THEN when I use the page up/down key I SEE the grid of dates moves to the next/previous month\n   * THEN when I use shift key + page up/down I SEE the grid of dates moves to the next/previous year\n   * THEN when I use the spacebar and/or enter key I SEE the button or selection is activated\n   * THEN when I use the escape key I SEE the date picker dialog disappears and focus returns to the date dialog button\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to the date dialog button\n     * I HEAR the purpose of each control is clear\n     * I HEAR buttons identify as buttons, dialog identifies itself dialog or modal, date grid table may identify itself as table or grid\n     * I HEAR the launch button indicates it has a popup, menu or dialog; days are announced with month and year\n     * I HEAR date options express state (pressed, selected, disabled/dimmed)\n   * THEN when I use the spacebar and/or enter key I HEAR the date picker dialog appears\n   * THEN when I use the arrow keys I HEAR the selection moves through next/previous dates\n   * THEN when I use the home/end key I HEAR the selection moves to the first/last day of the current week\n   * THEN when I use the page up/down key I HEAR the grid of dates moves to the next/previous month\n   * THEN when I use shift key + page up/down I HEAR the grid of dates moves to the next/previous year\n   * THEN when I use the spacebar and/or enter key I HEAR the button or selection is activated\n   * THEN when I use the escape key I HEAR the date picker dialog disappears and focus returns to the date dialog button\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on the date dialog button\n     * I HEAR the purpose of each control is clear\n     * I HEAR buttons identify as buttons, dialog identifies itself dialog or modal, date grid table may identify itself as table or grid\n     * I HEAR the launch button indicates it has a popup, menu or dialog; days are announced with month and year\n     * I HEAR date options express state (pressed, selected, disabled/dimmed)\n   * THEN when I doubletap with the button in focus I HEAR the date picker dialog appears\n   * THEN when I swipe through the dialog I HEAR the date options and controls come into focus\n   * THEN when I doubletap with the selection or button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/web/date-picker>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a date picker dialog\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the date grid table and calendar navigation buttons\n   * Escape: The dialog closes and focus returns to the launch button\n   * Arrow keys: Date selection visibly moves through next/previous days\n   * Page up/down: Changes the grid of dates to the previous/next month\n   * Shift + page up/down: Changes the grid of dates to the previous/next year\n   * Home/end: Moves focus to the first/last day of the current week\n   * Spacebar or enter: Activates the date picker buttons and calendar navigation buttons\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves through elements, expresses its state\n   * Doubletap: Activates the element in focus\n\n3. Listen to screenreader output on all devices\n\n   * Name: The purpose of each control is clear\n   * Role: Buttons identify as buttons, dialog identifies itself dialog or modal, date grid table may identify itself as table or grid\n   * Group: The launch button indicates it has a popup, menu or dialog; days are announced with month and year\n   * State: Date options express state (pressed, selected, disabled/dimmed)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/web/date-picker>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/date-picker/date-picker_IosVoiceOver.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/date-picker/date-picker_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/date-picker/date-picker_WindowsJawsChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/date-picker/date-picker_WindowsNvdaChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/date-picker/date-picker_MacOsVoiceOverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n[Full WAI-ARIA requirements](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html)\n\n### An accessible date picker will have the following components:\n\n#### Launch button\n\n* This button opens the date picker\n* Focus returns to this button upon closing the date picker dialog\n\n#### Date picker popup dialog\n\n* The dialog itself should be labelled by the month and year with `aria-labelledby=\"month-year-heading-id\"`\n* Use `aria-live=\"polite\"` for the dialog, `aria-live=\"polite\"` for month/year heading\n\n#### Calendar navigation buttons\n\n* Use `aria-label=\"Previous\"` and `aria-label=\"Next\"` to name the \"<\" and \">\" buttons, respectively\n\n#### Date grid table\n\n* Use `aria-labelledby=\"month-year-heading-id\"` to label the table and `id=\"month-year-heading-id\"` to the element doing the labelling\n\n#### Date picker buttons\n\n* Use `aria-selected=\"true\"` to indicate state of individual date buttons"
        },
        {
          "label": "Decorative Image",
          "name": "decorative-image",
          "type": "file",
          "generalNotes": "How to test a decorative image",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a decorative image\n\nGIVEN THAT I am on a page with a decorative image\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to an image I SEE the image is skipped and ignored\n\n2. Desktop screenreader\n\n   * I use the arrow keys to browse to an image\n     * I HEAR The image is ignored\n\n3. Mobile screenreader\n\n   * I swipe to browse to an image\n     * I HEAR The image is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/decorative-image>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a decorative image\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Arrow-keys: Screenreader ignores the image completely\n\n2. Test mobile screenreader gestures\n   * Swipe: The screenreader ignores the image completely\n\n3. Listen to screenreader output on all devices\n   * Role: The image is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/decorative-image>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Decorative images\n\nThere are times that images shouldn't be read because it would be repetitive or not add any value in addition to the existing page content. These types of images are generally included for purely stylistic purposes and don't impart any meaning to the rest of the content on the page.\n\n## Is this image decorative or informative?\n\nIf the image conveys important meaning, and there's no other text on the page which explains the concept within it, then the image is likely informative. In this case, check out the [informative image checklist](/checklist-web/image) item instead.\n\n## Decorative images still require an alt attribute\n\n* To have valid HTML, the `alt` attribute must still be present, even when set to the empty empty value of `alt`. Note that `alt` and `alt=\"\"` (no space) are equivalent in HTML.\n  * When the `alt` attribute is empty, the screen reader ignores it (and will not read anything).\n  * When the `alt` attribute is missing, the screen reader will read the `src` name or filename of the image which is a very poor user experience.\n\n<example class=\"example example--contains-icon\">\n  <h3 class=\"h-charlie decorated\">\n    <img src=\"media/images/icons/icon-info.svg\" alt=\"\"> \n    Note: Your plan might be changing soon.\n  </h3>\n  <a href=\"tel:8888888888\" className=\"decorated\">\n    <img src=\"media/images/icons/icon-phone.svg\" class=\"icon\" alt=\"\">\n      Call us: 888-888-8888\n  </a>\n</example>\n\n```html\n<h3 class=\"h-charlie decorated\">\n  <img\n    src=\"media/images/icons/icon-info.svg\"\n    class=\"icon\"\n    alt=\"\" />\n  Note: Your plan might be changing soon.\n</h3>\n<a \n  href=\"tel:8888888888\"\n  class=\"decorated\">\n  <img \n    src=\"media/images/icons/icon-phone.svg\"\n    class=\"icon\"\n    alt=\"\" />\n    Call us: 888-888-8888\n</a>\n```\n\n## Using inline SVG\n\n### Inline SVG that is decorative\n\nInline SVGs require some special code to be hidden properly from screen readers:\n\n* `aria-hidden=\"true\"`\n\nIf you are using a `<use />` element, add `aria-hidden=\"true\"`.\n\n```html\n<svg aria-hidden=\"true\" focusable=\"false\">\n  <use href=\"#svg-id\" aria-hidden=\"true\" />\n  <!-- if not using <use> then the child elements \n       of the inline SVG would go here -->\n</svg>\n```\n\n## Further reading\n\n* This page owes a lot to this exhaustive blog post: [Contextually Marking up accessible images and SVGs by Scott O'Hara](https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html)\n* [W3C Image decision tree](https://www.w3.org/WAI/tutorials/images/decision-tree/)"
        },
        {
          "label": "Expander Accordion",
          "name": "expander-accordion",
          "type": "file",
          "generalNotes": "How to test an expander accordion",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an expander accordion\n\nGIVEN THAT I am on a page with an expander accordion\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to an expander I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the expander I SEE the hidden content is revealed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to an expander\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role of a button or details\n     * I HEAR it expresses its state (expanded/collapsed)\n   * THEN when I use the spacebar and/or enter key to activate the expander I HEAR the hidden content is revealed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a button\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role of a button or details\n     * I HEAR it expresses its state (expanded/collapsed)\n   * THEN when I doubletap with the button in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/expander-accordion>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an expander accordion\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the expander\n   * Spacebar: Toggles the expander\n   * Enter: Toggles the expander\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state (expanded/collapsed)\n   * Doubletap: Toggles the expander\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies its role of a button or details\n   * State: It expresses its state (expanded/collapsed)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/expander-accordion>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Custom expander accordion (ARIA Disclosure Widget)\n\nThis custom expander uses a semantic button with `aria-expanded` with additional scripting to toggle content and states.\n\n```html\n<div class=\"expander-group\">\n  <button class=\"expander-toggle\" aria-expanded=\"false\">\n    About Sesame Street\n  </button>\n  <div class=\"expander-content\">\n    Sesame Street is an American educational \n    children's television series that combines \n    live-action, sketch comedy, animation, and puppetry.\n  </div>\n</div>\n```\n\n<!-- TODO: This example needs more styles support\n\n<example>\n<div class=\"expander-group\">\n  <button class=\"expander-toggle\" aria-expanded=\"false\">\n    About Sesame Street\n  </button>\n  <div class=\"expander-content\">\n    Sesame Street is an American educational \n    children's television series that combines \n    live-action, sketch comedy, animation, and puppetry.\n  </div>\n</div>\n</example> -->\n\n## Native HTML expander accordion (details/summary)\n\n* This semantic HTML contains all accessibility features by default with no scripting required.\n* It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_details-summary.scss) to create the expanded/collapsed indicator, no Javascript.\n\n**Note:** Due to known accessibility support issues in recent versions of iOS, `<details>` is not recommended for expander accordions. We recommend the use of an ARIA Disclosure Widget which has very robust support.\n\n```html\n<details>\n  <summary>\n    About Sesame Street\n  </summary>\n    Sesame Street is an American educational \n    children's television series that combines \n    live-action, sketch comedy, animation, and puppetry.\n</details>\n```\n\n<example>\n<details>\n  <summary>\n    About Sesame Street\n  </summary>\n    Sesame Street is an American educational \n    children's television series that combines \n    live-action, sketch comedy, animation, and puppetry.\n</details>\n</example>\n\n## Developer notes\n\n### Name\n\n* Inner text must describe the purpose.\n\n### Role\n\n* Native button identifies as button by default.\n* If using custom elements, use `role=\"button\"` and `tabindex=\"0\"`.\n\n### Group\n\n* You *can* use `aria-controls=\"popupId\"`, but it is not well supported.\n\n### State\n\n* Expander accordions use `aria-expanded` which toggles between \"true\" and \"false\" when the content is expanded or collapsed.\n\n### Focus\n\n* Focus must be visible.\n\n## Design notes\n\n* [Nielsen Norman Group study](https://www.nngroup.com/articles/accordion-icons/): The caret icon most clearly indicated to users that it would open an accordion in place, rather than linking directly to a new page.\n* Not all users will notice there is hidden content or understand how these work. For this reason, you should only use them in specific situations and if user research supports it.\n* [ARIA Disclosure Widget](https://www.w3.org/WAI/ARIA/apg/patterns/disclosure/)\n\n## Further Reading\n\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Figure",
          "name": "figure",
          "type": "file",
          "generalNotes": "How to test a figure: maps, charts, and graphics",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nGIVEN THAT I am on a page with a figure: maps, charts, and graphics\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a figure I SEE the figure comes into view.\n   * THEN when I use the tab key to move focus to figure controls (toggle, show/hide, etc) I SEE the control is in focus\n   * THEN when I use the spacebar or enter key I SEE the intended action occurs\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the arrow key to browse to a figure.\n     * I HEAR Content is described by a heading, alt text or named on focus\n     * I HEAR it identifies as a common HTML element (image, list, table)\n     * I HEAR an alternative method of consumption or interaction is available\n   * THEN when I use the tab key to move focus to figure controls (toggle, show/hide, etc) I HEAR the control is in focus\n   * THEN when I use the spacebar or enter key I HEAR the intended action occurs\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to browse to an image\n     * I HEAR Content is described by a heading, alt text or named on focus\n     * I HEAR it identifies as a common HTML element (image, list, table)\n     * I HEAR an alternative method of consumption or interaction is available\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/figure>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Keyboard & screen reader actions\n   * Arrow-keys: Browse to content\n   * Tab: Interactive figure controls are focusable\n   * Enter: Activates controls\n   * Space: Activates controls\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus visibly moves to each control\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n   * Name: Content is described by a heading, alt text or named on focus\n   * Role: It identifies as a common HTML element (image, list, table)\n   * Group: An alternative method of consumption or interaction is available\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/figure>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Use `alt=\"Descriptive figure content\"` for images\n* Supply a heading for interactive figures or `aria-label=\"Figure name\"` can be used as well\n\n### Role\n\n* Wrap charts and tables in a `<figure>` element where applicable\n* Include `<figcaption>` to describe the figure\n* Use `<cite>` to label sources\n\n### Group\n\n* Provide alternative ways to consume content\n  * Examples:\n    * A map of phone coverage areas includes a search function\n    * A chart embedded as an image includes a table of the data\n    * A graphic showing phone plan benefits is followed by an unordered list of the benefits below a plan name heading.\n\n## Code examples\n\n### Consider making simple charts from semantic markup\n\n```html\n<dl class=\"bar-chart\">\n  <dt>Monthly usage</dt>\n  <dd class=\"percentage-57\">\n    <span class=\"date\">March</span>\n    <span class=\"value\">57%</span>\n  </dd>\n  <dd class=\"percentage-42\">\n    <span class=\"date\">April</span>\n    <span class=\"value\">42%</span>\n  </dd>\n  <dd class=\"percentage-91\">\n    <span class=\"date\">May</span>\n    <span class=\"value\">91%</span>\n  </dd>\n</dl>\n```\n\n<example>\n   <dl class=\"bar-chart\">\n     <dt>Monthly usage</dt>\n     <dd class=\"percentage-57\">\n       <span class=\"date\">March</span>\n       <span class=\"value\">57%</span>\n     </dd>\n     <dd class=\"percentage-42\">\n       <span class=\"date\">April</span>\n       <span class=\"value\">42%</span>\n     </dd>\n     <dd class=\"percentage-91\">\n       <span class=\"date\">May</span>\n       <span class=\"value\">91%</span>\n     </dd>\n   </dl>\n</example>\n\n### Provide alternative ways to consume visual content\n\nIf there is one primary message for an chart that is displayed as an image file, describe it in the `alt` attribute.\n\n```html\n<img src=\"media/images/web/figure/pie-chart.png\" \n     alt=\"Usage shows a large jump in May to 91%\">\n```\n\n### Provide alternative ways to consume data\n\nIf you have a figure that can’t be described by `alt` text, place the content in a different format.\n\n<example>\n<figure>\n  <img src=\"/media/images/web/figure/pie-chart.png\" alt=\"2020 sales by item\">\n\n  <details>\n    <summary>\n      2020 sales\n    </summary>\n    <table id=\"sales-breakdown\">\n        <caption>\n          Breakdown of 2020 sales percentages by item\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"column\">\n              Toilet paper\n            </th>\n            <th scope=\"column\">\n              Bread makers\n            </th>\n            <th scope=\"column\">\n              Moving boxes\n            </th>\n            <th scope=\"column\">\n              Exercise mats\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              38%\n            </td>\n            <td>\n              18%\n            </td>\n            <td>\n              12%\n            </td>\n            <td>\n              32%\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </details>\n</figure>\n</example>\n\n```html\n<figure>\n  <img\n          src=\"/media/images/web/figure/pie-chart.png\"     alt=\"2020 sales by item\">\n\n  <details>\n    <summary>\n      2020 sales\n    </summary>\n\n    <table id=\"sales-breakdown\">\n        <caption>\n          Breakdown of 2020 sales percentages by item\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"column\">\n              Toilet paper\n            </th>\n            <th scope=\"column\">\n              Bread makers\n            </th>\n            <th scope=\"column\">\n              Moving boxes\n            </th>\n            <th scope=\"column\">\n              Exercise mats\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              38%\n            </td>\n            <td>\n              18%\n            </td>\n            <td>\n              12%\n            </td>\n            <td>\n              32%\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  </details>\n</figure>\n```\n\n### Provide alternative interactions with dynamic figures\n\nWhen building maps, add a search or filtering feature for those who can’t use a mouse.\n\n```html\n<map-embed></map-embed>\n\n<form role=\"search\" \n      aria-label=\"Location search\">\n  <label for=\"search\">\n    Search for a location\n  </label>\n  <input type=\"search\" id=\"search\">\n  <button type=\"submit\">\n    Search\n  </button>\n</form>\n```"
        },
        {
          "label": "Footnote",
          "name": "footnote",
          "type": "file",
          "generalNotes": "How to test a footnote",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footnote\n\nGIVEN THAT I am on a page with a footnote\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a footnote link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my focus moves directly to the targeted footnote\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a footnote link\n     * I HEAR it describes its purpose\n     * I HEAR it identifies itself as a link\n   * THEN when I use the enter key to activate the link I HEAR my focus moves directly to the targeted footnote\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a footnote link\n     * I HEAR it describes its purpose\n     * I HEAR it identifies itself as a link\n   * THEN when I doubletap with the link in focus I HEAR my focus moves directly to the targeted footnote\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/footnote>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footnote\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to the footnote link\n   * Enter: Activates the link, focus/tabindex moves directly to the targeted element\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the footnote link\n   * Doubletap: Activates the link, focus/tabindex moves directly to the targeted footnote\n\n3. Listen to screenreader output on all devices\n\n   * Name: It describes its purpose\n   * Role: It identifies itself as a link\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/footnote>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Code examples\n\n```html\n<p>\n   People read footnotes and find them helpful.\n   <a class=\"footnote-link\" id=\"ref-alpha-link\" href=\"#ref-alpha\">\n      <sup>\n         1\n         <span class=\"hidden\">Footnote details</span>\n      </sup>\n   </a>\n </p>\n<div class=\"vertical-spacer\">\n</div>\n<p class=\"footnote\" id=\"ref-alpha\" tabindex=\"-1\">\n   1. This is where your footnotes will go.\n   <a href=\"#ref-alpha-link\">Back to content</a>\n</p>\n```\n\n<!-- TODO: class=\"vertical-spacer\" isn't showcasing the vast difference between the footnote link and the footnote note; also the href intentions aren't set up correctly - will need fixing -->\n\n<example>\n<p>\n   People read footnotes and find them helpful.\n   <a class=\"footnote-link\" id=\"ref-alpha-link\" href=\"#ref-alpha\">\n      <sup>\n         1\n         <span class=\"hidden\">Footnote details</span>\n      </sup>\n   </a>\n </p>\n<div class=\"vertical-spacer\">\n</div>\n<p class=\"footnote\" id=\"ref-alpha\" tabindex=\"-1\">\n   1. This is where your footnotes will go.\n   <a href=\"#ref-alpha-link\">Back to content</a>\n</p>\n</example>\n\n### Alternate approach\n\n* [Foonotes using a dedicated footnotes section (SitePoint)](https://www.sitepoint.com/accessible-footnotes-css/)"
        },
        {
          "label": "Heading",
          "name": "heading",
          "type": "file",
          "generalNotes": "How to test a heading: h1, h2, h3, h4, h5, h6",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a heading\n\nGIVEN THAT I am on a page with a heading\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a heading I SEE the heading comes into view\n   * WHEN I use the tab key I SEE nothing happens to the heading because headings must NOT be focusable\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a heading\n     * I HEAR the heading's purpose and level must be clear\n     * I HEAR it identifies itself as a heading and its level\n     * I HEAR it is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n   * WHEN when I use the tab key I HEAR nothing happens to the heading because headings must NOT be focusable\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse to a heading\n     * I HEAR the heading's purpose and level must be clear\n     * I HEAR it identifies itself as a heading and its level\n     * I HEAR it is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/heading>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a heading\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Nothing, headings must not be focusable\n   * Arrow-keys: Browses headings (when using screen reader)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the heading and its level\n\n3. Listen to screenreader output on all devices\n\n   * Name: The heading's purpose and level must be clear\n   * Role: It identifies itself as a heading and its level\n   * Group: It is logically ordered, starting with a single h1, sections titled by h2, and subsections with h3\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/heading>",
          "criteria": null,
          "videos": "### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/heading/headingNVDA.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/heading/headingJAWS.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/heading/headingMacOS.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/heading/headingAndroid.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/heading/headingiOS.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Headings are not focusable with the tab key\n\n* When people use a screen reader, the arrow keys are used to browse non-focusable content\n* The tab key only focuses interactive elements (ex: buttons, links or inputs)\n\n## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<h1>My favorite taco recipe</h1>\n  <!-- Author's entire life story \n   as it relates to tacos -->\n\n  <h2>Ingredients</h2>\n  <!-- List of ingredients -->\n\n  <h2>Steps</h2>\n\n    <h3>Preparing the protein</h3>\n    <!-- List of instructions -->\n\n    <h3>Preparing the vegetables</h3>\n    <!-- List of instructions -->\n    \n    <h3>Assembly and plating</h3>\n    <!-- List of instructions -->\n  \n  <h2>Nutrition information</h2>\n  <!-- List of nutrition info -->\n  \n  <h2>Related receipes</h2>\n  <!-- List of related recipes -->\n```\n\n### Complex headings\n\n* When multiple styles exist inside a heading use spans and css to achieve the desired result.\n* Do not use multiple headings.\n\n```html\n<h1>\n  <span class=\"brand\">Apple</span> \n  <span class=\"model\">iPhone XVI</span> \n</h1>\n```\n\n### When you can't use semantic HTML\n\nThis custom heading requires extra attributes.\n\n```html\n<div role=\"heading\" aria-level=\"1\">\n  About our company\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Inner text describes the heading\n\n### Role\n\n* Semantic headings `<h1>` `<h2>` `<h3>` identify themselves as headings and express the level\n* Use `role=\"heading\" aria-level=\"1\"` to for custom elements\n\n### Group\n\n* Headings must be logically ordered.\n* Start with a single `<h1>` per page.\n  * Title major sections with `<h2>`\n    * Subsections with `<h3>`\n      * It should be rare that `<h4>` and beyond is required.\n      * Repeating patterns of headings are allowed so long as they follow a logical sequence  (example: `<h2>`,`<h3>`,`<h2>`,`<h3>`)\n      * Avoid increasing heading levels by more than one level at a time (e.g., do not skip from `<h2>` to `<h4>`)\n\n### Focus\n\n* Headings must not receive focus\n* Arrow keys will browse headings (not the tab key)\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 2.4.6 Headings and Labels (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels)"
        },
        {
          "label": "Help Hint Error",
          "name": "help-hint-error",
          "type": "file",
          "generalNotes": "How to test a hint, help, or error",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a hint, help, or error\n\nGIVEN THAT I am on a page with a hint, help, or error\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to an input I SEE hint, help, or error text meets size and contrast requirements\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to an input\n     * I HEAR after the input name, the role and state is read, THEN the hint, help, or error is read\n     * I HEAR when it appears dynamically, an error is read automatically\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on an input\n     * I HEAR after the input name, the role and state is read, THEN the hint, help, or error is read\n     * I HEAR when it appears dynamically, an error is read automatically\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/help-hint-error>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a hint, help, or error\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: The input comes into focus\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The input's name is read. Then the hint, help, or error text is read\n\n3. Listen to screenreader output on all devices\n\n   * Name: After the input name, the role and state is read. Then the hint, help, or error is read\n   * Role: When it appears dynamically, an error is read automatically\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/help-hint-error>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Adding hint/help text\n\n```html\n<label for=\"best-sesame-street-character\">\n  The best Sesame Street character is:\n</label>\n<input type=\"text\" \n       id=\"best-sesame-street-character\" \n       aria-describedby=\"best-sesame-street-character-hint\">\n\n<div class=\"hint\" id=\"best-sesame-street-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster, Grover, Oscar the Grouch\n</div>\n```\n\n<!-- TODO: needs JS added to ensure it functions well -->\n\n<example>\n<label for=\"best-sesame-street-character\">\n  The best Sesame Street character is:\n</label>\n<input type=\"text\" \n       id=\"best-sesame-street-character\" \n       aria-describedby=\"best-sesame-street-character-hint\">\n\n<div class=\"hint\" id=\"best-sesame-street-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster, Grover, Oscar the Grouch\n</div>\n</example>\n\n### Adding an error\n\n**Note:** The alert must be structured as below to function properly in VoiceOver, with the alert text nested inside the `role=\"alert\"` element.\n\n```html\n<label for=\"favorite-sesame-street-character-letter\">\n  What is your Sesame Street character?\n  <span>Required</span>\n</label>\n\n<input type=\"text\"\n       id=\"favorite-sesame-street-character\"\n       aria-describedby=\"favorite-sesame-street-character-error favorite-sesame-street-character-hint\"\n       required>\n\n<div role=\"alert\" \n     id=\"favorite-sesame-street-character-alert\" \n     class=\"alert inert\">\n  <!--- Do not reference this alert element\n        directly with aria-describedby -->\n  <div id=\"favorite-sesame-street-character-error\">\n    <!--- Use JS to inject the alert here -->\n  </div>     \n</div>\n\n<div class=\"hint\" id=\"favorite-sesame-street-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster, Grover, Oscar the Grouch\n</div>\n\n<button id=\"show-error\">\n  Toggle error\n</button>\n```\n\n<!-- TODO: needs JS added to ensure it functions well -->\n\n<example>\n<label for=\"favorite-sesame-street-character-letter\">\n  What is your favorite Sesame Street character?\n  <span>Required</span>\n</label>\n\n<input type=\"text\"\n    id=\"favorite-sesame-street-character\"\n    aria-describedby=\"favorite-sesame-street-character-error favorite-sesame-street-character-hint\"\n    required>\n\n<div role=\"alert\" \n     id=\"favorite-sesame-street-character-alert\" \n     class=\"alert inert\">\n  <!--- Do not reference this alert element\n        directly with aria-describedby -->\n  <div id=\"favorite-sesame-street-character-error\">\n    <!--- Use JS to inject the alert here -->\n  </div>     \n</div>\n\n<div class=\"hint\" id=\"favorite-sesame-street-character-hint\">\n  Example: Elmo, Big Bird, Cookie Monster, Grover, Oscar the Grouch\n</div>\n\n<button id=\"show-error\">\n  Toggle error\n</button>\n</example>\n\n### When there is no hint or alert\n\nUsing `aria-describedby` with a `\"uniqueID\"` that doesn't exist on page yet will generate errors in automated syntax checking tools.\n\nIf it's not possible to remove the attribute, there are ways to avoid the error flag.\n\n#### Option 1: Leave `aria-describedby=\"\"` empty until the hint exists (preferred)\n\nThis is preferred because the DOM is cleaner.\n\n```html\n<label for=\"favorite-pickle\">\n  What is your favorite pickle?\n</label>\n<input type=\"text\"\n       id=\"favorite-pickle\"\n       aria-describedby=\"\">\n       <!-- Leave aria-describedby attribute empty -->\n```\n\n#### Option 2: Leave the empty hint element in the DOM\n\nThis technique shouldn't have any significant side effects; however it does leave additional elements in the DOM which is unnecessary.\n\n```html\n<label for=\"favorite-snack\">\n  What is your favorite snack?\n</label>\n<input type=\"text\"\n       id=\"favorite-snack\"\n       aria-describedby=\"hint-favorite-snack\">\n<div class=\"hint\" id=\"hint-favorite-snack\">\n  <!-- Leave the hint element empty -->\n</div>\n```\n\n## Developer notes\n\n### Browser + screenreader quirks\n\n* Screenreaders do not implement alerts uniformly and must be tested.\n  * Just because an alert pattern works in one screenreader doesn't mean it will work in all three screenreaders.\n* The element referenced by the `aria-describedby` attribute cannot use the `role=\"alert\"` attribute (see example above for workaround).\n  * [VoiceOver fails to read a referenced `role=\"alert\"` element when the input is in focus](https://a11ysupport.io/tests/tech__aria__aria-describedby-with-role-alert).\n* NVDA will read the alert twice if it appears while the input is in focus: once from the `role=\"alert\"` being injected and again from the `aria-describedby` association.\n* NVDA needs a fraction of a second to catch up with changes in the DOM, use a `setTimeout` to delay displaying the alert."
        },
        {
          "label": "Iframe",
          "name": "iframe",
          "type": "file",
          "generalNotes": "How to test an iframe",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an iframe\n\nGIVEN THAT I am on a page with an iframe\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys or tab key I SEE the content of the iframe is browsed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the arrow keys or tab key\n     * I HEAR the title of the iframe is read if the iframe contains content\n     * I HEAR if the iframe does not contain content, the iframe is ignored\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to content in the iframe\n     * I HEAR the title of the iframe is read if the iframe contains content\n     * I HEAR if the iframe does not contain content, the iframe is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/iframe>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an iframe\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow keys: Content within the iframe is browsed\n   * Tab: Interactive content in the iframe comes into view\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content within the iframe is browsed\n\n3. Listen to screenreader output on all devices\n\n   * Name: The title of the iframe is read if the iframe contains content\n   * Group: If the iframe does not contain content, the iframe is ignored\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/iframe>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### When an iframe contains content\n\n```html\n<iframe title=\"Coffee maker demonstration\" \n        src=\"coffee-maker-demo.html\">\n</iframe>\n```\n\n### When an iframe does not contain content\n\n```html\n<iframe title=\"Hidden intentionally\"\n        aria-hidden=\"true\" \n        src=\"script-injection.net\">\n</iframe>\n```"
        },
        {
          "label": "Informative Image",
          "name": "informative-image",
          "type": "file",
          "generalNotes": "How to test an informative image",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an informative image\n\nGIVEN THAT I am on a page with an informative image\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to an image I SEE the image comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the arrow keys to browse to an image\n   * * I HEAR the content of the image alt text is clear\n     * I HEAR it identifies its role as an image or graphic\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to browse to an image\n   * * I HEAR the content of the image alt text is clear\n     * I HEAR it identifies its role as an image or graphic\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/informative-image>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test an informative image\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: Screen reader reads the alt text\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the alt text\n\n3. Listen to screenreader output on all devices\n\n   * Name: The content of the image alt text is clear\n   * Role: It identifies its role as an image or graphic\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/informative-image>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Android-Talkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/informative-image/iOS-VoiceOver.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Windows-JAWS-Chrome.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Windows-NVDA-Chrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/informative-image/Android-Talkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Is this image decorative or informative?\n\nIf the image conveys important meaning, and there's no other text on the page which explains the concept within it, then the image is likely informative. If the image is included for purely stylistic purposes and doesn't impart any meaning to the rest of the content on the page, then the image is likely decorative. In this case, check out the [decorative image checklist](/web-criteria/component/decorative-image) item instead.\n\nIf your image contains text inside it, it should not! This is a violation of [WCAG AA 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG21/Understanding/images-of-text.html). Exceptions exist for logos.\n\n## Describe the content of the image\n\nIf you were describing the image to someone via phone conversation and they couldn't see what you were looking at, what would you say?\n\n```html\n<img src=\"/farm.jpg\" \n     alt=\"Rustic barn surrounded by rolling hills\" />\n```\n\n## Using inline SVG\n\n### Inline SVG that conveys meaning\n\nInline SVGs require some special code to be read consistently in all screenreaders:\n\n* Name: either `aria-label` or `<title />`\n* Role: `role=\"img\"`\n\nIf you are using a `<use />` element, add `aria-hidden=\"true\"` to it.\n\n#### Using title\n\n```html\n<svg role=\"img\" focusable=\"false\">\n  <title>Accessible Name</title>\n  <use xlink:href=\"#svg-id\" aria-hidden=\"true\" />\n  \n  <!-- if not using <use> then the child elements of the inline SVG would go here -->\n\n</svg>\n```\n\n#### Using aria-label\n\n```html\n<svg role=\"img\" aria-label=\"Accessible name\" focusable=\"false\">\n  <use href=\"#svg-id\" aria-hidden=\"true\" />\n\n  <!-- if not using <use> then the child elements of the inline SVG would go here -->\n\n</svg>\n```\n\n## Animated gifs\n\n### Animations (like gifs) can be accessible if:\n\n* they are set to stop after 5 seconds or\n* if users are presented with a way to pause it\n\n## Further reading\n\n* This page owes a lot to this exhaustive blog post: [Contextually Marking up accessible images and SVGs by Scott O'Hara](https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html)\n* [W3C Image decision tree](https://www.w3.org/WAI/tutorials/images/decision-tree/)\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content)\n* [WCAG SC 1.4.5 Images of Text (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text)\n* [WCAG SC 2.2.2 Pause, Stop, Hide (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/pause-stop-hide.html)"
        },
        {
          "label": "Link",
          "name": "link",
          "type": "file",
          "generalNotes": "How to test a link",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a link\n\nGIVEN THAT I am on a page with a link\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my browser goes somewhere\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a link\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a link\n   * THEN when I use the enter key to activate the link I HEAR my browser goes somewhere\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a link\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a link\n   * THEN when I doubletap with the link in focus I HEAR my browser goes somewhere\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/link>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the link\n   * Enter: Activates the link\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the link\n   * Doubletap: Activates the link\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a link\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/link>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Links vs buttons\n\n### If it goes somewhere, it's `<a>` link\n\n* When the user clicks a link, they are taken to a different location in the site\n  * Either another page or even another area of the same page\n* A link can look like a big shiny button but it must be coded as `<a>` link\n\n### If it does something, it's a `<button>`\n\n* Buttons cause an action to occur on the same page\n  * Submit a form (even when submission takes you to a new page)\n  * Open a menu\n  * Launch a modal\n  * Expand details\n* A button can look like a link, but it must be coded as a `<button>`\n\n## Code examples\n\n### Use semantic HTML with common sense names\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"/about/\">\n  About\n</a>\n```\n\n<example>\n<a href=\"/about/\">\n  About\n</a>\n</example>\n\n### Name links logically\n\n* **Do not** use a heading with a generic link below.\n* Instead, make the heading a link or programmatically associate the link with the heading using <code>aria-describedby</code>.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<h3>About our coffee subscriptions</h3>\n<p>Get the best coffee delivered to your door</p>\n<a href=\"/about/\">\n   Learn more\n```\n\n#### Good examples\n\n```html\n<h3><a href=\"/about/\">About our coffee subscriptions</a></h3>\n<p>Get the best coffee delivered to your door</p>\n```\n\n```html\n<h3 id=\"unique-id\">About our coffee subscriptions</h3>\n<p>Get the best coffee delivered to your door</p>\n<a href=\"/about/\" aria-describedby=\"unique-id\">\n   Learn more\n</div>\n```\n\n### Making a link with no `href` focusable\n\n* **Do not** put anything but a URL in the `href`\n* A link with no `href` will not be focusable with the keyboard without `tabindex=\"0\"`.\n* Add `role=\"link\"` to ensure screen reader reads the role\n\n```html\n<a tabindex=\"0\" role=\"link\">\n  About\n</a>\n```\n\n<example>\n<a tabindex=\"0\" role=\"link\">\n  About\n</a>\n</example>\n\n### Avoid custom elements\n\nThis custom button requires extra attributes and keyboard event listeners.\n\n```html\n<custom-element role=\"link\" tabindex=\"0\">\n  About\n</custom-element>\n```\n\n### Repeating text links\n\nSometimes the design will call for multiple links with the same text label. In a case like this, `aria-label` can be used to name each link's purpose.\n\n```html\n<button>Get free coffee</button>\n<a href=\"/free-coffee-tc/\" aria-label=\"Free coffee terms and conditions\">\n  Terms & Conditions\n</a>\n<button>Get free donuts</button>\n<a href=\"/free-donuts-tc/\" aria-label=\"Free donuts terms and conditions\">\n  Terms & Conditions\n</a>\n```\n\n### Don't duplicate the visible text name in the `aria-label`\n\n**Do not** repeat the inner text content of a link in the `aria-label`.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"/do-NOT-repeat-yourself/\" \n   aria-label=\"Do NOT repeat yourself\">\n   Do not repeat yourself\n</div>\n```\n\n### Don't use javascript in `href`\n\n* **Do not** use `\"href=\"javascript:void(0)\"`.\n* When screen readers read the `href`, it becomes confusing and nonsensical\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"javascript:void(0)\">\n   Do not use javascript in href\n</div>\n```\n\n### Don't use \"#\" in `href`\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<a href=\"#\">\n   Do not use # to populate the `href`\n</div>\n```\n\n## Disabled links\n\n* If it's unavoidable to have a disabled link present you'll need these attributes for the screen reader:\n  * `tabindex=\"0\"`\n  * `role=\"link\"`\n  * `aria-disabled=\"true\"`\n\n```html\n<a tabindex=\"0\" role=\"link\" aria-disabled=\"true\">\n  Continue\n</a>\n```\n\n### Complex examples\n\n<example>\n   <h2 class=\"h-bravo\">Product Card with multiple controls</h2>\n   <p>This example demonstrates an approach taken for when the card may have multiple controls within it.</p>\n   <div class=\"product-list multiple-controls\">\n   <div class=\"product-list-item\">\n      <div class=\"offer-container\">\n         <button type=\"button\" class=\"offer-btn\" aria-label=\"Save $400 with offer for mPhone Universe Max Extra Phabulous\">\n         Save $400 with offer\n         </button>\n      </div>\n      <div class=\"link-container\">\n         <!-- The link DOES NOT wrap the entire description -->\n         <h3 class=\"product-heading\">\n         <a class=\"product-link\" href=\"/demos/\">\n            <span class=\"brand\">\n               mPhone\n            </span>\n            <span class=\"product-title\">\n               Universe Max Extra Phabulous\n            </span>\n         </a>\n         </h3>\n         <div class=\"product-image-container\">\n         <img class=\"product-image\" src=\"media/images/mobile-phone.png\" alt=\"mPhone Universe Max Extra Phabulous\"/>\n         </div>\n         <ul id=\"meta\" class=\"product-meta\">\n         <li class=\"rating\">4.8 Stars</li>\n         <li class=\"network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\n         </ul>\n         <div class=\"end-cap\">\n         <ul id=\"colors\" class=\"product-colors\">\n            <li class=\"red\"><span class=\"hidden-visually\">Sunset Red</span></li>\n            <li class=\"gold\"><span class=\"hidden-visually\">Golden Canyon</span></li>\n            <li class=\"blue\"><span class=\"hidden-visually\">Blue</span></li>\n            <li class=\"gray\"><span class=\"hidden-visually\">Graphite</span></li>\n         </ul>\n         <ul id=\"pricing\" class=\"product-pricing\">\n            <li class=\"monthly\">\n               <div><strong>Monthly</strong></div>\n               <strong>\n               $22.00<span class=\"hidden-visually\">,</span>\n               </strong>\n               <span class=\"hidden-visually\">\n               Original price:\n               </span>        \n               <s>$50.00</s>\n               <div>For 36 months</div>\n            </li>\n            <li class=\"today\">\n               <div><strong>Today</strong></div>\n               $0\n               <div>down + tax</div>\n            </li>\n            <li class=\"full-price\">\n               <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\n               <span class=\"hidden-visually\">\n               Original price:\n               </span>        \n               <s>$1,998</s>\n            </li>\n         </ul>\n         </div>\n      </div>\n   </div>\n   </div>\n   <h2 class=\"h-bravo\">Product Card as a single link</h2>\n   <p>This card is a single link and does not consist of any other nested controls. Use of <code>aria-labelledby</code> and <code>aria-describedby</code> to control how the card is announced by screen readers.</p>\n   <div class=\"product-list big-links\">\n   <div class=\"product-list-item\">\n      <a href=\"/demos/\" \n         aria-labelledby=\"prod-0-eyebrow prod-0-name\" \n         aria-describedby=\"prod-0-meta-rating prod-0-meta-network prod-0-colors product-0-price-monthly product-0-price-today product-0-price-full\">\n         <div class=\"offer-container\">\n         <svg style=\"display: inline-block;\" role=\"img\" aria-label=\"Promo\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><path d=\"M0 80V229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7H48C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg> 15% off your next order\n         </div>\n         <div class=\"link-container\">\n         <h3 class=\"product-heading\">\n               <span class=\"brand\" id=\"prod-0-eyebrow\">\n               mPhone\n               </span>\n               <span class=\"product-title\" id=\"prod-0-name\">\n               Universe Max Extra Phabulous\n               </span>\n         </h3>\n         <div class=\"product-image-container\">\n            <img class=\"product-image\" src=\"media/images/mobile-phone.png\" alt=\"\"/>\n         </div>\n         <ul id=\"meta\" class=\"product-meta\">\n            <li class=\"rating\" id=\"prod-0-meta-rating\">4.8 Stars</li>\n            <li class=\"network\" id=\"prod-0-meta-network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\n         </ul>\n         <div class=\"end-cap\">\n            <span id=\"prod-0-colors\" class=\"hidden-visually\">Four colors available</span>\n            <!-- hide colors - use visually hidden text x colors avialable -->\n            <!-- reduces verbosity and all colors are available on PDP -->\n            <ul id=\"colors\" class=\"product-colors\" aria-hidden=\"true\">\n               <li class=\"red\"></li>\n               <li class=\"gold\"></li>\n               <li class=\"blue\"></li>\n               <li class=\"gray\"></li>\n            </ul>\n            <ul id=\"pricing\" class=\"product-pricing\">\n               <li class=\"monthly\" id=\"product-0-price-monthly\">\n               <div><strong>Monthly</strong></div>\n               <strong>\n                  $22.00<span class=\"hidden-visually\">,</span>\n               </strong>\n               <span class=\"hidden-visually\">\n                  Original price:\n               </span>        \n               <s>$50.00</s>\n               <div>For 36 months</div>\n               </li>\n               <li class=\"today\" id=\"product-0-price-today\">\n               <div><strong>Today</strong></div>\n               $0\n               <div>down + tax</div>\n               </li>\n               <li class=\"full-price\" id=\"product-0-price-full\">\n               <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\n               <span class=\"hidden-visually\">\n                  Original price:\n               </span>        \n               <s>$1,998</s>\n               </li>\n            </ul>\n         </div>\n         </div>\n      </a>\n   </div>\n   </div>\n</example>\n\n```html\n<h2 class=\"h-bravo\">Product Card with multiple controls</h2>\n<p>This example demonstrates an approach taken for when the card may have multiple controls within it.</p>\n<div class=\"product-list multiple-controls\">\n  <div class=\"product-list-item\">\n    <div class=\"offer-container\">\n      <button type=\"button\" class=\"tertiary\" aria-label=\"Save $400 with offer for mPhone Universe Max Extra Phabulous\">\n        Save $400 with offer\n      </button>\n    </div>\n    <div class=\"link-container\">\n      <!-- The link DOES NOT wrap the entire description -->\n      <h3 class=\"product-heading\">\n        <a class=\"product-link\" href=\"/demos/\">\n          <span class=\"brand\">\n            mPhone\n          </span>\n          <span class=\"product-title\">\n            Universe Max Extra Phabulous\n          </span>\n        </a>\n      </h3>\n      <div class=\"product-image-container\">\n        <img class=\"product-image\" src=\"../assets/images/products/mobile-phone.png\" alt=\"mPhone Universe Max Extra Phabulous\"/>\n      </div>\n      <ul id=\"meta\" class=\"product-meta\">\n        <li class=\"rating\">4.8 Stars</li>\n        <li class=\"network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\n      </ul>\n      <div class=\"end-cap\">\n        <ul id=\"colors\" class=\"product-colors\">\n          <li class=\"red\"><span class=\"hidden-visually\">Sunset Red</span></li>\n          <li class=\"gold\"><span class=\"hidden-visually\">Golden Canyon</span></li>\n          <li class=\"blue\"><span class=\"hidden-visually\">Blue</span></li>\n          <li class=\"gray\"><span class=\"hidden-visually\">Graphite</span></li>\n        </ul>\n        <ul id=\"pricing\" class=\"product-pricing\">\n          <li class=\"monthly\">\n            <div><strong>Monthly</strong></div>\n            <strong>\n              $22.00<span class=\"hidden-visually\">,</span>\n            </strong>\n            <span class=\"hidden-visually\">\n              Original price:\n            </span>        \n            <s>$50.00</s>\n            <div>For 36 months</div>\n          </li>\n          <li class=\"today\">\n            <div><strong>Today</strong></div>\n            $0\n            <div>down + tax</div>\n          </li>\n          <li class=\"full-price\">\n            <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\n            <span class=\"hidden-visually\">\n              Original price:\n            </span>        \n            <s>$1,998</s>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n<h2 class=\"h-bravo\">Product Card as a single link</h2>\n<p>This card is a single link and does not consist of any other nested controls. Use of <code>aria-labelledby</code> and <code>aria-describedby</code> to control how the card is announced by screen readers.</p>\n<div class=\"product-list big-links\">\n  <div class=\"product-list-item\">\n    <a href=\"/demos/\" \n      aria-labelledby=\"prod-0-eyebrow prod-0-name\" \n      aria-describedby=\"prod-0-meta-rating prod-0-meta-network prod-0-colors product-0-price-monthly product-0-price-today product-0-price-full\">\n      <div class=\"offer-container\">\n        <svg style=\"display: inline-block;\" role=\"img\" aria-label=\"Promo\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\"><path d=\"M0 80V229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7H48C21.5 32 0 53.5 0 80zm112 32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg> 15% off your next order\n      </div>\n      <div class=\"link-container\">\n        <h3 class=\"product-heading\">\n            <span class=\"brand\" id=\"prod-0-eyebrow\">\n              mPhone\n            </span>\n            <span class=\"product-title\" id=\"prod-0-name\">\n              Universe Max Extra Phabulous\n            </span>\n        </h3>\n        <div class=\"product-image-container\">\n          <img class=\"product-image\" src=\"/assets/images/products/mobile-phone.png\" alt=\"\"/>\n        </div>\n        <ul id=\"meta\" class=\"product-meta\">\n          <li class=\"rating\" id=\"prod-0-meta-rating\">4.8 Stars</li>\n          <li class=\"network\" id=\"prod-0-meta-network\">7G <span class=\"hidden-visually\">network compatibility</span></li>\n        </ul>\n        <div class=\"end-cap\">\n          <span id=\"prod-0-colors\" class=\"hidden-visually\">Four colors available</span>\n          <!-- hide colors - use visually hidden text x colors avialable -->\n          <!-- reduces verbosity and all colors are available on PDP -->\n          <ul id=\"colors\" class=\"product-colors\" aria-hidden=\"true\">\n            <li class=\"red\"></li>\n            <li class=\"gold\"></li>\n            <li class=\"blue\"></li>\n            <li class=\"gray\"></li>\n          </ul>\n          <ul id=\"pricing\" class=\"product-pricing\">\n            <li class=\"monthly\" id=\"product-0-price-monthly\">\n              <div><strong>Monthly</strong></div>\n              <strong>\n                $22.00<span class=\"hidden-visually\">,</span>\n              </strong>\n              <span class=\"hidden-visually\">\n                Original price:\n              </span>        \n              <s>$50.00</s>\n              <div>For 36 months</div>\n            </li>\n            <li class=\"today\" id=\"product-0-price-today\">\n              <div><strong>Today</strong></div>\n              $0\n              <div>down + tax</div>\n            </li>\n            <li class=\"full-price\" id=\"product-0-price-full\">\n              <strong>Full price</strong> $1,789<span class=\"hidden-visually\">,</span>\n              <span class=\"hidden-visually\">\n                Original price:\n              </span>        \n              <s>$1,998</s>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </a>\n  </div>\n</div>\n```\n\n## Further Reading\n\n* [WCAG 1.4.1 Use of Color (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/use-of-color)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.4 Link Purpose (In Context) (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html)\n* [WCAG 2.5.3 Label in Name (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "List",
          "name": "list",
          "type": "file",
          "generalNotes": "How to test a list",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a list\n\nGIVEN THAT I am on a page with a list\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a list I SEE the list comes into view\n   * WHEN I use the tab key I SEE nothing happens to the list itself because lists must NOT be focusable\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a list\n     * I HEAR it identifies itself as a list\n     * I HEAR it declares the number of items in the list\n   * WHEN I use the tab key I HEAR nothing happens to the list itself because lists must NOT be focusable\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse a list\n     * I HEAR it identifies itself as a list\n     * I HEAR it declares the number of items in the list\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/list>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a list\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Nothing, list items must not be focusable\n   * Arrow-keys: Browses list items (when using screen reader)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader reads the list content\n\n3. Listen to screenreader output on all devices\n\n   * Role: It identifies itself as a list\n   * Group: It declares the number of items in the list\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/list>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Lists are not focusable with the tab key\n\n* When using a screen reader, the **arrow keys** are used to browse non-focusable content\n* The tab key only focuses interactive elements (ex: buttons, links or inputs) inside the list item.\n\n### Code examples\n\n#### Unordered list\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<ul>\n  <li>Sugar</li>\n  <li>Flour</li>\n  <li>Butter</li>\n  <li>Oil</li>\n  <li>Eggs</li>\n</ul>\n```\n\n<example>\n<h4>Common household pantry items</h4>\n<ul>\n  <li>Sugar</li>\n  <li>Flour</li>\n  <li>Butter</li>\n  <li>Oil</li>\n  <li>Eggs</li>\n</ul>\n</example>\n\n#### Ordered list\n\n```html\n<ol>\n  <li>Elmo</li>\n  <li>Big Bird</li>\n  <li>Cookie Monster</li>\n</ol>\n```\n\n<example>\n<h4>Top three Sesame Street characters</h4>\n<ol>\n  <li>Elmo</li>\n  <li>Big Bird</li>\n  <li>Cookie Monster</li>\n</ol>\n</example>\n\n#### When you can't use semantic HTML\n\nAs a **last resort**, this custom list uses extra attributes if it's not possible to edit the markup structure.\n\n```html\n<!-- Top three Sesame Street characters, according to some -->\n<div role=\"list\">\n  <div role=\"listitem\">Elmo</div>\n  <div role=\"listitem\">Big Bird</div>\n  <div role=\"listitem\">Cookie Monster</div>\n</div>\n```\n\n### Do not interrupt the list\n\nThe `<ul>` or `<ol>` list must only contain `<li>` list items.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\n<!-- Were they or weren't they? -->\n<ul>\n  <li>Ross</li>\n  <div>\n    <a href=\"#\">Stream it all over again and decide</a>\n  </div>\n  <li>Rachel</li>\n</ul>\n```\n\n### Do not create fake lists\n\nAdding returns or generic markup does not produce a list navigable by screen reader.\n\n<h4 class=\"bad-example\"> Bad example</h4>\n\n```html\nSugar <br/>\nFlour <br/>\nButter <br/>\n\n<div>Sugar</div>\n<div>Flour</div>\n<div>Butter</div>\n```"
        },
        {
          "label": "Modal Dialog",
          "name": "modal-dialog",
          "type": "file",
          "generalNotes": "How to test a modal dialog",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a modal dialog\n\nGIVEN THAT I am on a page with a modal dialog\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the launch button and use spacebar and/or enter key to activate the button I SEE the dialog opens and is in focus\n   * THEN when I use the arrow keys I SEE content in the dialog is browsed in logical order and does not leave the dialog\n   * THEN when I use the tab key I SEE focus moves to interactive controls in the modal dialog\n   * THEN when I use the escape key I SEE focus returns to the launch button\n   * OR when I use the tab key to move focus to the dismiss/close button AND THEN use the spacebar or enter key to activate the dismiss/close button I SEE focus returns to the launch button\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to the launch button and use spacebar and/or enter key to activate the button\n     * I HEAR the dialog describes its purpose or title on launch\n     * I HEAR it identifies itself as a modal or dialog\n     * I HEAR when closed, focus returns to the launch button\n     * I HEAR when open, content behind the modal remains inert\n   * THEN when I use the arrow keys I HEAR content in the dialog is browsed in logical order and does not leave the dialog\n   * THEN when I use the tab key I HEAR focus moves to interactive controls in the modal dialog\n   * THEN when I use the escape key I HEAR focus returns to the launch button\n   * OR when I use the tab key to move focus to the dismiss/close button AND THEN use the spacebar or enter key to activate the dismiss/close button I HEAR focus returns to the launch button\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus to the launch button\n     * I HEAR the dialog describes its purpose or title on launch\n     * I HEAR it identifies itself as a modal or dialog\n     * I HEAR when closed, focus returns to the launch button\n     * I HEAR when open, content behind the modal remains inert\n   * THEN when I doubletap with the button in focus I HEAR the dialog opens\n   * THEN when I swipe within the modal dialog I HEAR focus stays trapped in the modal dialog\n   * THEN when I swipe to move focus to the dismiss/close button AND THEN double tap on the close button I HEAR focus returns to the launch button\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/modal-dialog>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a modal dialog\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Launch button: Focus visibly moves to the open dialog itself.\n   * Arrow keys: Content within the dialog is browsed in logical order.\n   * Tab: Focus visibly moves to interactive controls in the dialog, starting with the first interactive control (typically close button).\n   * Escape: The dialog closes and returns focus to the button that launched it.\n   * Space: Any buttons are activated.\n   * Enter: Any buttons or links are activated.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the dialog and doesn't enter the rest of the page.\n   * Doubletap: This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n\n   * Name: The dialog describes its purpose or title on launch.\n   * Role: It identifies itself as a modal or dialog.\n   * Group: When closed, focus returns to the launch button.\n   * State: When open, content behind the modal remains inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/modal-dialog>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/modal-dialog/modalDialog_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/modal-dialog/modalDialog_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/modal-dialog/modalDialog_WindowsJawsChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/modal-dialog/modalDialog_WindowsNvdaChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/modal-dialog/modalDialog_MacOsVoiceOverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Required attributes\n\n### Launch button\n\n* Should be a `<button>`, not a `<a>` link.\n* Upon closing, focus must return to the button that launched the dialog.\n* **Do not** use `aria-haspopup`. This attribute has very low and support and unpredictable output across screen readers.\n\n## Name\n\n* The modal window has a logical descriptive name from either:\n  * `aria-label=\"Modal title\"` or\n  * `aria-labelledby=\"heading-id\"` pointing to an `<h2>` as a title\n\n### Role\n\n* Use `role=\"dialog\"` so the screen reader can identify this as a dialog or modal.\n\n### Group\n\n* Upon closing, focus must return to the button that launched the dialog.\n\n### State\n\n* Use `aria-modal=\"true\"` to indicate content beneath the modal is inert and that the screen reader must not browse outside the dialog.\n\n### Focus\n\n* Use `tabindex=\"-1\"` to make the modal itself targetable for focus.\n* Upon closing, focus must return to the button that launched the dialog.\n\n### Documentation\n\n* [Browser Support](https://caniuse.com/?search=dialog)\n\n## Screenreader differences\n\n### NVDA\n\n* By default, NVDA may read the entire modal upon launch. This is expected behavior.\n\n## Code examples\n\n### Use semantic HTML where possible\n\nSince browser support for `<dialog>` is incomplete, if you plan to use the `<dialog>` element we recommend that you include the `role=\"dialog\"` attribute because the element alone is not fully compatible.\n\nSome browsers require additional scripting. This simple example works in Chrome, but [may not work correctly in all browsers](https://caniuse.com/?search=dialog) such as Safari and Firefox.\n\n```html\n   <button id=\"showModal\">\n   Things you should know\n   </button>\n\n   <dialog role=\"dialog\"\n         id=\"modal\"\n         tabindex=\"-1\"\n         aria-modal=\"true\"\n         aria-labelledby=\"dialog-title\">\n   <button type=\"button\"\n            id=\"closeModal\"\n            class=\"close\">\n      <span class=\"hidden\">Close</span>\n   </button>\n   <div class=\"dialog-content\">\n      <h2 id=\"dialog-title\" class=\"h-bravo\">\n         Things you should know\n      </h2>\n      <h3>Keyboard</h3>\n      <ul>\n         <li>Focus must not enter the rest of the page.</li>\n         <li>The escape key must close the modal.</li>\n      </ul>\n      <h3>Screenreader</h3>\n      <ul>\n         <li>The modal's title is announced on launch.</li>\n         <li>The screen reader cannot read content behind the dialog.</li>\n      </ul>\n      <button type=\"submit\">\n         Continue\n      </button>\n   </section>\n   </dialog>\n```\n\n<!-- TODO: The code sample example is not currently functional - fix needed.\n\n<example>\n   <button id=\"showModal\">\n   Things you should know\n   </button>\n\n   <dialog role=\"dialog\"\n         id=\"modal\"\n         tabindex=\"-1\"\n         aria-modal=\"true\"\n         aria-labelledby=\"dialog-title\">\n   <button type=\"button\"\n            id=\"closeModal\"\n            class=\"close\">\n      <span class=\"hidden\">Close</span>\n   </button>\n   <div class=\"dialog-content\">\n      <h2 id=\"dialog-title\" class=\"h-bravo\">\n         Things you should know\n      </h2>\n      <h3>Keyboard</h3>\n      <ul>\n         <li>Focus must not enter the rest of the page.</li>\n         <li>The escape key must close the modal.</li>\n      </ul>\n      <h3>Screenreader</h3>\n      <ul>\n         <li>The modal's title is announced on launch.</li>\n         <li>The screen reader cannot read content behind the dialog.</li>\n      </ul>\n      <button type=\"submit\">\n         Continue\n      </button>\n   </section>\n   </dialog>\n</example> -->\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.3 Focus Order (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/focus-order.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Number Input",
          "name": "number-input",
          "type": "file",
          "generalNotes": "How to test a number input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a number input\n\nGIVEN THAT I am on a page with a number input field\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a number input I SEE focus is strongly visually indicated\n   * THEN when I use the number keys I SEE numbers are entered\n   * THEN when I use non-number keys I SEE nothing is entered\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver)\n     * AND I use the tab key to move focus to a number input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as an editable input\n     * I HEAR hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n     * I HEAR if applicable, it expresses its state (required, disabled / dimmed / unavailable)\n   * THEN when I use the number keys I HEAR numbers are entered\n   * THEN when I use non-number keys I HEAR nothing is entered\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver)\n     * AND I swipe to focus on a number input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as an editable input\n     * I HEAR hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n     * I HEAR if applicable, it expresses its state (required, disabled / dimmed / unavailable)\n   * THEN when I enter a number I HEAR the numeric keypad is revealed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/number-input>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a number input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the input\n   * Number keys: Numbers are entered\n   * Non-number keys: Nothing is entered\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input, numeric keypad is revealed\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as an editable input\n   * Group: Hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n   * State: If applicable, it expresses its state (required, disabled / dimmed / unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/number-input>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Don't use `type=\"number\"`\n\nThe `type=\"number\"` input is intended for **integers** and includes features we *don't* want (like stepper/scroll functionality) that is a nuisance to everyone\n\n* Phone, credit card, pin etc. are not integers\n* NVDA doesn't fully support `type=\"number\"` inputs at this time\n\n### Use `type=\"text\"` for number inputs\n\nUse `type=text` with `inputmode=\"numeric\"` with an input pattern and JavaScript to filter out non-numeric characters.\n\n```html\n<label for=\"pin\">\n  Pin number\n</label>\n<input type=\"text\"\n       id=\"pin\"\n       aria-describedby=\"hint\"\n       inputmode=\"numeric\"\n       pattern=\"[0-9]*\">\n<div id=\"hint\" class=\"hint\">\n  The pin number will expire after 1 hour\n</div>\n```\n\n<!-- TODO for all examples, this is allowing letters AND numbers despite pattern -->\n\n<example>\n   <label for=\"pin\">\n   Pin number\n   </label>\n   <input type=\"text\"\n         id=\"pin\"\n         aria-describedby=\"hint\"\n         inputmode=\"numeric\"\n         pattern=\"[0-9]*\">\n   <div id=\"hint\" class=\"hint\">\n   The pin number will expire after 1 hour\n   </div>\n</example>\n\n### Disabled and focusable number input (preferred)\n\n* Using the `aria-disabled` attribute will allow the input to be focusable and more discoverable\n\n```html\n<label for=\"security-id\">\n  Security ID number\n</label>\n<input type=\"text\"\n       id=\"security-id\"\n       aria-describedby=\"security-id-hint\"\n       inputmode=\"numeric\"\n       pattern=\"[0-9]*\"\n       aria-disabled=\"true\">\n<div id=\"security-id-hint\" class=\"hint\">\n  The Security ID number will expire after 1 hour\n</div>\n```\n\n<!-- TODO need to preventDefault / make it appear disabled, also this is allowing letters AND numbers despite pattern -->\n\n<!-- <example>\n   <label for=\"security-id\">\n   Security ID number\n   </label>\n   <input type=\"text\"\n         id=\"security-id\"\n         aria-describedby=\"security-id-hint\"\n         inputmode=\"numeric\"\n         pattern=\"[0-9]*\"\n         aria-disabled=\"true\">\n   <div id=\"security-id-hint\" class=\"hint\">\n   The Security ID number will expire after 1 hour\n   </div>\n</example> -->\n\n### Fully disabled number input (avoid)\n\n* Fully `disabled` inputs are not focusable so may not be as discoverable in a form\n\n```html\n<label for=\"pin-disabled\">\n  Pin number\n</label>\n<input type=\"text\"\n       id=\"pin-disabled\"\n       inputmode=\"numeric\"\n       pattern=\"[0-9]*\"\n       disabled>\n```\n\n<example>\n   <label for=\"pin-disabled\">\n   Pin number\n   </label>\n   <input type=\"text\"\n         id=\"pin-disabled\"\n         inputmode=\"numeric\"\n         pattern=\"[0-9]*\"\n         disabled>\n</example>\n\n### Telephone number input\n\n* Setting type=\"tel\" changes the keyboard for mobile app users\n\n```html\n<label for=\"phone\">\n  Phone number\n</label>\n<input type=\"tel\"\n       id=\"phone\"\n       inputmode=\"numeric\"\n       autocomplete=\"tel\"\n       aria-describedby=\"hint-phone\">\n<div class=\"hint\" id=\"hint-phone\">\n  We’ll never sell or share your information\n</div>\n```\n\n<!-- TODO this is allowing letters -->\n\n<example>\n   <label for=\"phone\">\n   Phone number\n   </label>\n   <input type=\"tel\"\n         id=\"phone\"\n         inputmode=\"numeric\"\n         autocomplete=\"tel\"\n         aria-describedby=\"hint-phone\">\n   <div class=\"hint\" id=\"hint-phone\">\n   We’ll never sell or share your information\n   </div>\n</example>\n\n## Developer notes\n\n* [Why the GOV.UK Design System team changed the input type for numbers](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/)\n* [Stepper/counter input example](/web-criteria/component/stepper-input)\n\n### Name\n\n* Include `for=\"input-id` in each `<label>` label to associate it with the input\n* Use `aria-label=\"Input name\"` as a last resort if a `<label>` can't be used\n* Don't hide the label on focus\n\n### Role\n\n* Identifies as a text input\n\n### Group\n\n* Include `for=\"input-id` in each `<label>` label to associate it with the input\n* Use `<fieldset>` and `<legend>` to name a group of inputs.\n\n### Focus\n\n* Focus must be visible"
        },
        {
          "label": "Pagination Nav",
          "name": "pagination-nav",
          "type": "file",
          "generalNotes": "How to test a pagination nav",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a pagination nav\n\nGIVEN THAT I am on a page with a pagination nav\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse to a pagination navigation I SEE the nav comes into view\n   * THEN when I use the tab key to move focus to a link in the nav and use the enter key I SEE my browser goes to the intended location\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse to a pagination navigation\n     * I HEAR The pagination nav has a logical name (\"pagination\")\n     * I HEAR The nav landmark is discoverable with screenreader shortcuts\n   * THEN when I use the tab key to move focus to a link in the nav and use the enter key I HEAR my browser goes to the intended location\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to elements in the nav\n     * I HEAR The pagination nav has a logical name (\"pagination\")\n     * I HEAR The nav landmark is discoverable with screenreader shortcuts\n   * THEN when I doubletap with the link in focus I HEAR my browser goes to the intended location\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/pagination-nav>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a pagination nav\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to links and buttons within the nav\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the nav\n   * Doubletap: Activates links\n\n3. Listen to screenreader output on all devices\n\n   * Name: The pagination nav has a logical name (\"pagination\")\n   * Role: The nav landmark is discoverable with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/pagination-nav>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n   <nav class=\"pagination\" aria-label=\"Pagination\">\n      <ul>\n         <li>\n            <a href=\"/1/\"\n            aria-label=\"Page 1\"\n            aria-current=\"page\">\n            1\n            </a>\n         </li>\n         <li><a href=\"/2/\" aria-label=\"Page 2\">2</a></li>\n         <li><a href=\"/3/\" aria-label=\"Page 3\">3</a></li>\n         <li><a href=\"/4/\" aria-label=\"Page 4\">4</a></li>\n         <li><a href=\"/5/\" aria-label=\"Page 5\">5</a></li>\n         <li><a href=\"/2/\">Next</a></li>\n      </ul>\n   </nav>\n```\n\n<!-- TODO: code example needs updated stylings to remove bullets from list items and display horizontally instead of vertically. -->\n\n<example>\n   <nav class=\"pagination\" aria-label=\"Pagination\">\n      <ul>\n         <li>\n            <a href=\"/1/\"\n               aria-label=\"Page 1\"\n               aria-current=\"page\">\n               1\n            </a>\n         </li>\n         <li><a href=\"/2/\" aria-label=\"Page 2\">2</a></li>\n         <li><a href=\"/3/\" aria-label=\"Page 3\">3</a></li>\n         <li><a href=\"/4/\" aria-label=\"Page 4\">4</a></li>\n         <li><a href=\"/5/\" aria-label=\"Page 5\">5</a></li>\n         <li><a href=\"/2/\">Next</a></li>\n      </ul>\n   </nav>\n</example>\n\n## Developer Notes\n\n### Name\n\n* Use `aria-label=\"Pagination\"` when there is not a visible nav title.\n  * `aria-labelledby=\"title-id\"` can be used when the nav title is a visible heading.\n* Use `aria-label=\"Page X\"` for each entry link.\n\n### Role\n\n* Identifies itself as navigation.\n* Use `role=\"navigation\"` when it's not possible to use `<nav>`.\n* **DO NOT** add menu or option roles with arrow key event listeners unless you're building an actual application like Gmail.\n\n### State\n\n* Use `aria-current=\"page\"` on the current page item.\n\n## Further Reading\n\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.4 Link Purpose (In Context) (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/link-purpose-in-context.html)\n* [WCAG 2.5.3 Label in Name (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/label-in-name.html)\n* [WCAG 2.5.8 Target Size (Minimum) (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/target-size-minimum.html)\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Password Input",
          "name": "password-input",
          "type": "file",
          "generalNotes": "How to test a password input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a password input\n\nGIVEN THAT I am on a page with a password input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the password input I SEE focus is strongly visually indicated\n   * THEN when I use the tab key to move focus to the show/hide password feature I SEE its name, role and state\n   * THEN when I use the show/hide password feature I SEE the state of the password visibility (with or without characters entered)\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to the password input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a text input\n     * I HEAR hints or errors are read after the label (Ex: Password formatting)\n     * I HEAR it expresses if the password is being shown and if applicable: required, disabled / dimmed / unavailable\n   * THEN when I use the tab key to move focus to the show/hide password feature I HEAR its name, role and state\n   * THEN when I use the show/hide password feature I HEAR the state of the password visibility (with or without characters entered)\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focus on a password input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a text input\n     * I HEAR hints or errors are read after the label (Ex: Password formatting)\n     * I HEAR it expresses if the password is being shown and if applicable: required, disabled / dimmed / unavailable\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/password-input>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Tab: Focus moves visibly to the input or show password checkbox\n   * Spacebar: Toggles the show password checkbox\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to the input\n   * Keyboard: Keyboard appears\n\n3. Listen to screenreader output on all devices\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a text input\n   * Group: Hints or errors are read after the label (Ex: Password formatting)\n   * State: It expresses if the password is being shown and if applicable: required, disabled / dimmed / unavailable\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/password-input>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Checkbox variant\n\n* This semantic HTML contains all accessibility features by default.\n* Placing the show password checkbox ahead of the password input increases discoverability for screen reader users.\n  * CSS pseudo elements are used in the checkbox label to express its state on focus of the password input.\n\n```html\n<form class=\"password-container\">\n  <label for=\"password\">\n    Password\n    <span class=\"helper\" aria-hidden=\"true\">\n      Required\n    </span>\n  </label>\n  <div id=\"password-toggle\" class=\"password-toggle\">\n    <input type=\"checkbox\" id=\"show-password\">\n    <label for=\"show-password\">\n      Show Password\n    </label>\n  </div>\n  <input type=\"password\"\n         id=\"password\"\n         aria-describedby=\"password-toggle password-hint\"\n         aria-required=\"true\"\n         required>\n  <div id=\"password-hint\" class=\"hint\">\n    Use any length of characters including emojis.\n  </div>\n</form>\n```\n\n[\\\\]: # \"TODO The show/hide button does not hide the password.\"\n\n<example>\n\n<form class=\"password-container\">\n  <label for=\"password\">\n    Password\n    <span class=\"helper\" aria-hidden=\"true\">\n      Required\n    </span>\n  </label>\n  <div id=\"password-toggle\" class=\"password-toggle\">\n    <input type=\"checkbox\" id=\"show-password\">\n    <label for=\"show-password\">\n      Show Password\n    </label>\n  </div>\n  <input type=\"password\"\n         id=\"password\"\n         aria-describedby=\"password-toggle password-hint\"\n         aria-required=\"true\"\n         required>\n  <div id=\"password-hint\" class=\"hint\">\n    Use any length of characters including emojis.\n  </div>\n</form>\n</example>\n\n### Button variant\n\n* The show/hide button recieves focus before the input so screen reader and keyboard-only users can change the state before interacting with the field.\n* The `password` field type toggles between type of `password` and `text`.\n* A live region `role=\"status\"` is used to automatically announce to screen reader users the current visibility of the password value. For example, “Password is currently visible”.\n  * Avoid adding `aria-hidden=\"true\"` or CSS `display: none;` to the live region container that receives the dynamic update as this may impact screen reader support.\n  * Ensure the dynamic text, that is added to the live region, is removed from the DOM after a short amount of time so screen reader users do not encounter this text while navigating beyond the form field.\n\n```html\n<form class=\"password-container button-variant\" data-show-password=\"false\" onsubmit=\"return false;\">\n    <label for=\"password-b\">\n      Password\n      <span class=\"helper\" aria-hidden=\"true\">\n        Required\n      </span>\n    </label>\n    <div class=\"password-wrapper\">\n        <div id=\"password-toggle\" class=\"password-toggle\">\n            <button class=\"tertiary\" type=\"button\">\n                <span class=\"show-pass\">\n                    show <span class=\"hidden\">password</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1.3rem\" role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 576 512\"><path d=\"M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z\"/></svg>\n                </span>\n                <span class=\"hide-pass\">\n                    hide <span class=\"hidden\">password</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1.3rem\" role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 640 512\"><path d=\"M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z\"/></svg>\n                </span>\n            </button>\n          </div>\n          <input type=\"password\"\n                 id=\"password-b\"\n                 aria-describedby=\"password-hint\"\n                 aria-required=\"true\"\n                 value=\"passwordhere\"\n                 required>\n    </div>\n    <div id=\"password-hint\" class=\"hint\">\n      Use any length of characters including emojis.\n    </div>\n    <!-- this is dynamically announced by the screen reader when updated but content is removed after a pause so it can't be discovered -->\n    <div class=\"password-live-region hidden\" role=\"status\">\n        <div id=\"password-state-status\"></div>\n    </div>\n  </form>\n```\n\n<!-- <example>\n<form class=\"password-container button-variant\" data-show-password=\"false\" onsubmit=\"return false;\">\n    <label for=\"password-b\">\n      Password\n      <span class=\"helper\" aria-hidden=\"true\">\n        Required\n      </span>\n    </label>\n    <div class=\"password-wrapper\">\n        <div id=\"password-toggle\" class=\"password-toggle\">\n            <button class=\"tertiary\" type=\"button\">\n                <span class=\"show-pass\">\n                    show <span class=\"hidden\">password</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1.3rem\" role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 576 512\"><path d=\"M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM144 256a144 144 0 1 1 288 0 144 144 0 1 1 -288 0zm144-64c0 35.3-28.7 64-64 64c-7.1 0-13.9-1.2-20.3-3.3c-5.5-1.8-11.9 1.6-11.7 7.4c.3 6.9 1.3 13.8 3.2 20.7c13.7 51.2 66.4 81.6 117.6 67.9s81.6-66.4 67.9-117.6c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3z\"/></svg>\n                </span>\n                <span class=\"hide-pass\">\n                    hide <span class=\"hidden\">password</span>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1.3rem\" role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 640 512\"><path d=\"M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c8.4-19.3 10.6-41.4 4.8-63.3c-11.1-41.5-47.8-69.4-88.6-71.1c-5.8-.2-9.2 6.1-7.4 11.7c2.1 6.4 3.3 13.2 3.3 20.3c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zM373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5L373 389.9z\"/></svg>\n                </span>\n            </button>\n          </div>\n          <input type=\"password\"\n                 id=\"password-b\"\n                 aria-describedby=\"password-hint\"\n                 aria-required=\"true\"\n                 value=\"passwordhere\"\n                 required>\n    </div>\n    <div id=\"password-hint\" class=\"hint\">\n      Use any length of characters including emojis.\n    </div>\n    \nTODO: Below is a comment. Remember to include this when unhiding the component.\nthis is dynamically announced by the screen reader when updated but content is removed after a pause so it can't be discovered \n\n    <div class=\"password-live-region hidden\" role=\"status\">\n        <div id=\"password-state-status\"></div>\n    </div>\n  </form>\n</example> --->\n\n## Developer Notes\n\n### Name\n\n* Include `for=\"input-id\"` in each `<label>` label to associate it with the input\n* Use `aria-label=\"Input name\"` as a last resort if a `<label>` can’t be used\n\n### Role\n\n* Identifies as some kind of secure input \\[or text when toggled to text]\n\n### State\n\n* The show password checkbox must indicate its state on focus\n\n### Group\n\n* Include `for=\"input-id\"` in each `<label>` label to associate it with the input\n* Use `<fieldset>` and `<legend>` to name a group of inputs\n\n### Focus\n\n* Focus must be visible"
        },
        {
          "label": "Progress Indicator",
          "name": "progress-indicator",
          "type": "file",
          "generalNotes": "How to test a progress indicator",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\nGIVEN THAT I am on a page with a progress indicator\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse to a progress bar I SEE the progress bar comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse to a progress bar\n     * I HEAR the progress indicator purpose is clear\n     * I HEAR it identifies itself as some kind of progress indicator\n     * I HEAR it expresses its current value if it dynamically changes\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse to a progress bar\n     * I HEAR the progress indicator purpose is clear\n     * I HEAR it identifies itself as some kind of progress indicator\n     * I HEAR it expresses its current value if it dynamically changes\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/progress-indicator>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow keys: Content within the progress indicator is browsed in a logical order\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content within the progress indicator is browsed in a logical order\n\n3. Listen to screenreader output on all devices\n\n   * Name: The progress indicator purpose is clear\n   * Role: It identifies itself as some kind of progress indicator\n   * State: It expresses its current value if it dynamically changes\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/progress-indicator>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Use `aria-label=\"Progress bar name\"` when there is not a visible title.\n\n### Role\n\n* Use `role=\"progressbar\"`.\n\n### Group\n\n* If the progress bar is describing another region of the page, use `aria-describedby=\"progressbar-id\"` with its paired `id=\"progressbar-id\"` to connect the two elements.\n\n### State\n\n* The state will be read out to the screen reader user by default.\n\n### Focus\n\n* Progress bar is not usually focusable.\n\n## Code examples\n\n### Progress bar\n\nThere are many variations of progress bars and loading spinners, some of which may not need to be a true progress bar at all.\n\n* [WAI-ARIA Multi-page form examples](https://www.w3.org/WAI/tutorials/forms/multi-page/)\n\nSupport varies by screen reader. It's recommended to add full ARIA attributes, even when using a `<progress>` element.\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* While not a requirement, it is focusable to increase discoverability.\n\n```html\n<progress role=\"progressbar\"\n          id=\"progress\"\n          tabindex=\"0\"\n          class=\"progress\"\n          aria-label=\"File upload\"\n          value=\"50\"\n          aria-valuemin=\"0\"\n          aria-valuenow=\"50\"\n          aria-valuemax=\"100\"\n          max=\"100\">\n```\n\n<example>\n<progress role=\"progressbar\"\n          id=\"progress\"\n          tabindex=\"0\"\n          class=\"progress\"\n          aria-label=\"File upload\"\n          value=\"50\"\n          aria-valuemin=\"0\"\n          aria-valuenow=\"50\"\n          aria-valuemax=\"100\"\n          max=\"100\">\n</example>\n\n### Spinner loading takeover\n\n* There are many variations of loaders and spinners.\n* While a takeover spinner modal is present, other content on the page must be inert.\n\n#### Use semantic HTML\n\n* This semantic HTML contains all accessibility features using a dialog.\n  * The `<progress>` element can be used to describe the state.\n\n#### Ensure content is ready before being available\n\n* If content is being loaded slowly behind the spinner inside an `aria-live` region, use `aria-busy=\"true\"` to keep it from being announced until the update is complete.\n\n```html\n<!-- Use aria-busy if content doesn't all load at once -->\n<div id=\"really-slow-app\" \n     aria-live=\"polite\" \n     aria-busy=\"false\">\n     \n  <button id=\"showModal\">\n    Launch spinner\n  </button>\n\n  <dialog role=\"dialog\"\n          class=\"takeover\"\n          id=\"modal\"\n          tabindex=\"-1\"\n          aria-modal=\"true\"\n          aria-labelledby=\"modal-title\">\n    <section>\n      <div class=\"progress-spinner\">\n        <progress role=\"progressbar\" \n                  id=\"modal-title\" \n                  tabindex=\"0\" \n                  aria-label=\"Loading\">\n      </div>\n    </section>\n  </dialog>\n</div>\n```\n\n<!-- TODO: the button should open this modal - should we add text in the loading modal that says you can use your ESCAPE key to close the modal for those who are unfamiliar?\n\n<example>\n<!-- Use aria-busy if content doesn't all load at once\n<div id=\"really-slow-app\" \n     aria-live=\"polite\" \n     aria-busy=\"false\">\n     \n  <button id=\"showModal\">\n    Launch spinner\n  </button>\n\n  <dialog role=\"dialog\"\n          class=\"takeover\"\n          id=\"modal\"\n          tabindex=\"-1\"\n          aria-modal=\"true\"\n          aria-labelledby=\"modal-title\">\n    <section>\n      <div class=\"progress-spinner\">\n        <progress role=\"progressbar\" \n                  id=\"modal-title\" \n                  tabindex=\"0\" \n                  aria-label=\"Loading\">\n      </div>\n    </section>\n  </dialog>\n</div>\n</example> -->\n\n### Inline dynamic loading waiting example\n\nThis example dynamically injects progress updates that will be read by a screen reader:\n\n* `aria-busy=\"true\"` indicates that the region is busy\n* `aria-describedby` allows the current progress to be read when the button is focused\n* `aria-disabled` reinforces that the save action is incomplete\n* `role=\"status\"` has an implicit `aria-live=\"polite\"` and `aria-atomic=\"true\"`, meaning the entire content of the status will be read on each update\n\n```html\n<div \n  id=\"slow-app\"\n  aria-live=\"polite\">\n  \n  <button \n    id=\"trigger-progressbar\"\n    aria-describedby=\"progress-busy\"\n    aria-disabled=\"false\">\n      Save\n  </button>\n\n  <div class=\"progress-busy inert\" role=\"status\">\n    <span id=\"progress-busy\">\n    </span> \n  </div>\n</div>\n```\n\n<!-- TODO: demo doesn't currently work\n\n<example>\n<div \n  id=\"slow-app\"\n  aria-live=\"polite\">\n  \n  <button \n    id=\"trigger-progressbar\"\n    aria-describedby=\"progress-busy\"\n    aria-disabled=\"false\">\n      Save\n  </button>\n\n  <div class=\"progress-busy inert\" role=\"status\">\n    <span id=\"progress-busy\">\n    </span> \n  </div>\n</div>\n</example> -->\n\n## Further Reading\n\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html)\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 1.4.11 Non-text Contrast (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-contrast.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)\n* [WCAG 4.1.3 Status Messages (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/status-messages.html)"
        },
        {
          "label": "Radio Button",
          "name": "radio-button",
          "type": "file",
          "generalNotes": "How to test a radio button",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a radio button\n\nGIVEN THAT I am on a page with a radio button\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a radio group I SEE focus is strongly visually indicated on the first unselected option or the selected option\n\n   * THEN when I use the spacebar to activate the radio button I SEE the radio button with focus change state to selected.\n\n   * THEN when I use the arrow keys to focus radio button I SEE the state is changed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to a radio group\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a radio option\n     * I HEAR hints or errors are read after the label and related inputs include a group name (ex: Shipping options)\n     * I HEAR it expresses its state (selected, checked, disabled)\n\n   * THEN when I use the spacebar to activate the radio button I HEAR the radio button with focus change state to selected.\n\n   * THEN when I use the arrow keys to focus radio button I HEAR the state is changed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focus on a radio button\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a radio option\n     * I HEAR hints or errors are read after the label and related inputs include a group name (ex: Shipping options)\n     * I HEAR it expresses its state (selected, checked, disabled)\n\n   * THEN when I doubletap with the radio in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/radio-button>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a radio button\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the checked radio button in the group. If a radio button is not checked, focus moves to the first radio button in the group.\n\n   * Spacebar: If the radio button with focus is not checked, changes the state to checked.  Otherwise, does nothing.\n\n   * Arrow-keys: Moves focus to and checks the previous or next radio button in the group\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n\n   * Doubletap: If the radio button with focus is not checked, changes the state to checked. Otherwise, does nothing.\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n\n   * Role: It identifies itself as a radio option\n\n   * Group: Hints or errors are read after the label and related inputs include a group name (ex: Shipping options)\n\n   * State: It expresses its state (selected, checked, disabled)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/form/radio-button>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/web/radio/radioiOSVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/radio/radioAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/radio/radioMacOSVoiceoverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_input-radio.scss) to create the radio indicator, no Javascript.\n\n```html\n<fieldset>\n  <legend>\n    Choose your favorite NATO letter\n  </legend>\n\n  <input type=\"radio\" name=\"nato\" id=\"alphaRadio\">\n  <label for=\"alphaRadio\">Alpha</label>\n\n  <input type=\"radio\" name=\"nato\" id=\"bravoRadio\">\n  <label for=\"bravoRadio\">Bravo</label>\n\n  <input type=\"radio\" name=\"nato\" id=\"charlieRadio\" aria-describedby=\"hint-charlie\" checked>\n  <label for=\"charlieRadio\">Charlie</label>\n  <div class=\"hint\" id=\"hint-charlie\">This is the third NATO letter</div>\n</fieldset>\n```\n\n<!-- TODO: get radio examples styled and working as expected\n<example>\n<fieldset>\n  <legend>\n    Choose your favorite NATO letter\n  </legend>\n\n  <input type=\"radio\" name=\"nato\" id=\"alphaRadio\">\n  <label for=\"alphaRadio\">Alpha</label>\n\n  <input type=\"radio\" name=\"nato\" id=\"bravoRadio\">\n  <label for=\"bravoRadio\">Bravo</label>\n\n  <input type=\"radio\" name=\"nato\" id=\"charlieRadio\" aria-describedby=\"hint-charlie\" checked>\n  <label for=\"charlieRadio\">Charlie</label>\n  <div class=\"hint\" id=\"hint-charlie\">This is the third NATO letter</div>\n</fieldset>\n</example>\n-->\n\n### Disabled and focusable radio inputs (preferred)\n\n* An input using `aria-disabled=\"true\"` will be focusable with the tab key\n* Use JS to preventDefault()\n\n```html\n<fieldset>\n  <legend>\n    Choose your favorite dance\n  </legend>\n\n  <input type=\"radio\" name=\"dance\" id=\"carltonRadio\" aria-disabled=\"true\">\n  <label for=\"carltonRadio\">Carlton</label>\n\n  <input type=\"radio\" name=\"dance\" id=\"foxtrotRadio\">\n  <label for=\"foxtrotRadio\">Foxtrot</label>\n\n  <input type=\"radio\" name=\"dance\" id=\"tangoRadio\" checked>\n  <label for=\"tangoRadio\">Tango</label>\n</fieldset>\n```\n\n<!-- TODO: get radio examples styled and working as expected\n<example>\n<fieldset>\n  <legend>\n    Choose your favorite dance\n  </legend>\n\n  <input type=\"radio\" name=\"dance\" id=\"carltonRadio\" aria-disabled=\"true\">\n  <label for=\"carltonRadio\">Carlton</label>\n\n  <input type=\"radio\" name=\"dance\" id=\"foxtrotRadio\">\n  <label for=\"foxtrotRadio\">Foxtrot</label>\n\n  <input type=\"radio\" name=\"dance\" id=\"tangoRadio\" checked>\n  <label for=\"tangoRadio\">Tango</label>\n</fieldset>\n</example>\n-->\n\n### Required radio inputs\n\nEnsuring all screenreaders indicate radio inputs as being required requires some aria and reinforcement.\n\n* Use `aria-required=\"true\"` to indicate the group is required\n* Use `aria-invalid=\"true/false\"` to indicate an error state\n* Add `role=\"radiogroup\"` to the `<fieldset>` to make the `aria-required` attribute valid\n* Add \"Required\" as text to the `<legend>` to ensure compliance across all platforms\n\n```html\n<fieldset aria-required=\"true\" \n          aria-invalid=\"true\" \n          role=\"radiogroup\">\n  <legend>\n    Choose your second favorite NATO letter <span>Required</span>\n  </legend>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"deltaRadioReq\">\n  <label for=\"deltaRadioReq\">Delta</label>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"echoRadioReq\">\n  <label for=\"echoRadioReq\">Echo</label>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"foxtrotRadioReq\">\n  <label for=\"foxtrotRadioReq\">Foxtrot</label>\n</fieldset>\n```\n\n<!-- TODO: get radio examples styled and working as expected\n<example>\n<fieldset aria-required=\"true\" \n          aria-invalid=\"true\" \n          role=\"radiogroup\">\n  <legend>\n    Choose your second favorite NATO letter <span>Required</span>\n  </legend>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"deltaRadioReq\">\n  <label for=\"deltaRadioReq\">Delta</label>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"echoRadioReq\">\n  <label for=\"echoRadioReq\">Echo</label>\n\n  <input type=\"radio\" name=\"natoReq\" id=\"foxtrotRadioReq\">\n  <label for=\"foxtrotRadioReq\">Foxtrot</label>\n</fieldset>\n</example>\n-->\n\n### Radio button cards\n\n```html\n<ul class=\"cards\">\n  <li class=\"card interactive\">\n    <input type=\"radio\"\n           name=\"radioCards\"\n           id=\"deltaRadioCard\"\n           aria-describedby=\"hint-deltaRadioCard\" >\n    <label for=\"deltaRadioCard\">\n      Delta\n    </label>\n    <div class=\"extended-description\"\n         id=\"hint-deltaRadioCard\">\n      Delta (prounounced: <strong>dell</strong>-tah)\n      is the fourth letter of the NATO alphabet.\n    </div>\n  </li>\n  <li class=\"card interactive\">\n    <input type=\"radio\"\n           name=\"radioCards\"\n           id=\"echoRadioCard\"\n           aria-describedby=\"hint-echoRadioCard\">\n    <label for=\"echoRadioCard\">Echo</label>\n    <div class=\"extended-description\"\n         id=\"hint-echoRadioCard\">\n      Echo (prounounced: <strong>eck</strong>-oh)\n      is the fifth letter of the NATO alphabet.\n    </div>\n  </li>\n</ul>\n```\n\n<!-- TODO: get radio examples styled and working as expected\n<example>\n<ul class=\"cards\">\n  <li class=\"card interactive\">\n    <input type=\"radio\"\n           name=\"radioCards\"\n           id=\"deltaRadioCard\"\n           aria-describedby=\"hint-deltaRadioCard\" >\n    <label for=\"deltaRadioCard\">\n      Delta\n    </label>\n    <div class=\"extended-description\"\n         id=\"hint-deltaRadioCard\">\n      Delta (prounounced: <strong>dell</strong>-tah)\n      is the fourth letter of the NATO alphabet.\n    </div>\n  </li>\n  <li class=\"card interactive\">\n    <input type=\"radio\"\n           name=\"radioCards\"\n           id=\"echoRadioCard\"\n           aria-describedby=\"hint-echoRadioCard\">\n    <label for=\"echoRadioCard\">Echo</label>\n    <div class=\"extended-description\"\n         id=\"hint-echoRadioCard\">\n      Echo (prounounced: <strong>eck</strong>-oh)\n      is the fifth letter of the NATO alphabet.\n    </div>\n  </li>\n</ul>\n</example>\n-->\n\n### When you can't use semantic HTML\n\nThis custom button requires extra scripting work for roving tabindex and event listeners.\n\n```html\n<custom-label id=\"labelId\">\n    Which is your favorite NATO letter:\n</custom-label>\n<div role=\"radiogroup\" aria-labelledby=\"labelId\">\n  <custom-element role=\"radio\" tabindex=\"-1\">\n    Alpha\n  </custom-element>\n  <custom-element role=\"radio\" tabindex=\"-1\">\n    Bravo\n  </custom-element>\n  <custom-element role=\"radio\" tabindex=\"-1\">\n    Charlie\n  </custom-element>  \n</div>\n```\n\n## Specialty use cases\n\n### Radio mixed with interactive elements\n\n**Avoid** this pattern when possible! Radio groups are not supposed to consist of nested interactive elements. Radio button focus order is not what you may expect.\n\n* By default, it is not expected behavior that each radio button can be tabbed to. This is how radio buttons naturally behave\n\n* As soon as a radio button is selected, the selected radio input receives focus first from the group. As a result screen reader users may not discover a nested control for an option if they start switching between radio buttons alone\n\n* To try to mitigate screen reader users not discovering the nested controls, describe the fieldset / radiogroup with non-visual text. This can be done with <code>aria-describedby</code> on the <code>fieldset</code>. For example, \"Edit controls are available which follow each radio button\"\n\n* Ensure the nested controls also have additional context defined by <code>aria-describedby</code>. This will help screen reader users understand their purpose.\n\n* Use of the same <code>name</code> attribute is important to link the radio buttons as a programmatic group\n\n* Keyboard functionality such as arrow up/down/left/right should change the selected radio button.\n\n```html\n<fieldset class=\"checkbox-radio-group\" aria-describedby=\"styled-radio-group-helper-text\">\n  <legend>Choose your payment method:</legend>\n  <!-- Visually hidden helper text describing fieldset -->\n  <!-- This text should only be present in the DOM if the radio group has nested controls. Hiding it with CSS display: none; is not enough to hide it from screen readers. Ensure aria-describedby on the fieldset does not point to an ID that is not in the DOM -->\n  <span class=\"hidden\" id=\"styled-radio-group-helper-text\">\n    Edit controls are available which follow each radio button\n  </span>\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioAlpha2\" checked>\n  <label for=\"checkboxRadioAlpha2\">\n    Alpha\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioAlpha2\">\n    Edit\n  </button>\n\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioBravo2\">\n  <label for=\"checkboxRadioBravo2\">\n    Bravo\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioBravo2\">\n    Edit\n  </button>\n\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioCharlie3\">\n  <label for=\"checkboxRadioCharlie3\">\n    Charlie\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioCharlie3\">\n    Edit\n  </button>\n</fieldset>\n```\n\n<!-- TODO: get radio examples styled and working as expected\n<example>\n<fieldset class=\"checkbox-radio-group\" aria-describedby=\"styled-radio-group-helper-text\">\n  <legend>Choose your payment method:</legend>\n  <!-- Visually hidden helper text describing fieldset -->\n\n  <!-- This text should only be present in the DOM if the radio group has nested controls. Hiding it with CSS display: none; is not enough to hide it from screen readers. Ensure aria-describedby on the fieldset does not point to an ID that is not in the DOM -- ADD CLOSING COMMENT HERE\n  <span class=\"hidden\" id=\"styled-radio-group-helper-text\">\n    Edit controls are available which follow each radio button\n  </span>\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioAlpha2\" checked>\n  <label for=\"checkboxRadioAlpha2\">\n    Alpha\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioAlpha2\">\n    Edit\n  </button>\n\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioBravo2\">\n  <label for=\"checkboxRadioBravo2\">\n    Bravo\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioBravo2\">\n    Edit\n  </button>\n\n  <input class=\"radio\" type=\"radio\" name=\"checkboxRadioGroup2\" id=\"checkboxRadioCharlie3\">\n  <label for=\"checkboxRadioCharlie3\">\n    Charlie\n  </label>\n  <button type=\"button\" class=\"tertiary\" aria-describedby=\"checkboxRadioCharlie3\">\n    Edit\n  </button>\n</fieldset>\n</example>\n-->\n\n## Developer notes\n\n### Name\n\n* `label` text must describe the radio input.\n* Use `aria-describedby=\"hint-id\"` for hints or additional descriptions\n* `aria-label=\"Radio input purpose\"` can also be used (as a last resort)\n\n### Role\n\n* **By default**, semantic HTML radio inputs identify as radio button\n* Use `role=\"radio\"` for custom elements\n\n### Group\n\n* Semantic HTML\n  * `<fieldset>` must wrap the radio group\n  * `<legend>` must describe the group's purpose\n  * Each `<label>` must include `for=\"input-id\"` to be associated with its input\n* Custom elements\n  * Use `role=\"radiogroup\"` to take the place of fieldset\n  * Use `aria-labelledby=\"label-id\"` to associate an element as a label\n  * `aria-label=\"Group purpose\"` can also be used if there's no label with an ID\n\n### State\n\n* Semantic HTML\n  * `checked` (will be read as \"selected\" by screen reader)\n  * Use the `disabled` state for inactive buttons\n* Custom element\n  * Use `aria-checked=\"true/false\"` to express state\n  * Use `aria-disabled=\"true\"` to declare inactive elements\n\n### Focus\n\n* Focus must be visible\n* Custom elements will require keyboard event listeners and roving tabindex\n* **DO NOT** put interactive elements inbetween radio inputs.\n  * Performs its purpose across platforms, devices and viewports\n\n## Thanks\n\n* [Support for Marking Radio Buttons Required, Invalid - Adrian Roselli](https://adrianroselli.com/2022/02/support-for-marking-radio-buttons-required-invalid.html)\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 3.3.1 Error Identification (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/error-identification)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions)\n* [WCAG 3.3.3 Error Suggestion (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Range Slider",
          "name": "range-slider",
          "type": "file",
          "generalNotes": "How to test a range slider input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a range slider input\n\nGIVEN THAT I am on a page with a range slider input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a range slider I SEE focus is strongly visually indicated\n   * THEN when I use the up/down/left/right arrow keys I SEE the value is changed one step\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a range slider\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a range\n     * I HEAR its label is read with the input\n     * I HEAR its current value\n   * THEN when I use the up/down/left/right arrow keys I HEAR the value is changed one step\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to move focus to a range slider\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a range\n     * I HEAR its label is read with the input\n     * I HEAR its current value\n   * THEN when I swipe up/down in iOS or use the volume buttons in Android I HEAR the value is changed one step\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/range-slider>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a range slider input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the input\n   * Arrow-keys: Increase / decrease value one step\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input\n   * Swipe up/down: Increase/decrease slider value one step on iOS\n   * Volume: Increase/decrease slider value one step on Android\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a range\n   * Group: Its label is read with the input\n   * State: Its current value\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/range-slider>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\nThis is one of the exceedingly rare instances where a custom element makes a lot of sense.\n\n### Use a custom element\n\n* Custom elements are **easier to style reliably** across browsers.\n* [Working slider pattern examples](https://www.w3.org/WAI/ARIA/apg/patterns/slider/)\n\n```html\n<div id=\"range-label\">\n  How much cowbell?\n</div>\n<div class=\"track\">\n  <div id=\"thumb\"\n       role=\"slider\"\n       tabindex=\"0\"\n       aria-valuemin=\"0\"\n       aria-valuenow=\"10\"\n       aria-valuemax=\"11\"\n       aria-labelledby=\"range-label\">\n  </div>\n</div>\n```\n\n### Semantic HTML\n\nWhile there is a native HTML range input, it is **difficult to style reliably** across browsers.\n\n```html\n<div class=\"range-group\">\n  <!-- Input hidden from the screen reader \n    and keyboard to avoid repetition -->\n  <input tabindex=\"-1\" \n          value=\"10\" \n          aria-hidden=\"true\"\n          class=\"range-value\" \n          id=\"cowbell-range-value\">\n  <div>\n    <label for=\"cowbell-range\">\n      How much cowbell?\n    </label>\n    <input type=\"range\"\n      id=\"cowbell-range\"\n      name=\"cowbell\"\n      min=\"0\"\n      max=\"11\"\n      value=\"10\"\n      step=\"1\">\n  </div>\n</div>\n```\n\n<!-- TODO: styling and js? need to be added to help this demo function! \n\n<example>\n<div class=\"range-group\">\n  Input hidden from the screen reader (comment out later)\n    and keyboard to avoid repetition (comment out later)\n  <input tabindex=\"-1\" \n          value=\"10\" \n          aria-hidden=\"true\"\n          class=\"range-value\" \n          id=\"cowbell-range-value\">\n  <div>\n    <label for=\"cowbell-range\">\n      How much cowbell?\n    </label>\n    <input type=\"range\"\n      id=\"cowbell-range\"\n      name=\"cowbell\"\n      min=\"0\"\n      max=\"11\"\n      value=\"10\"\n      step=\"1\">\n  </div>\n</div>\n</example> -->"
        },
        {
          "label": "Scrolling Container",
          "name": "scrolling-container",
          "type": "file",
          "generalNotes": "How to test a scrolling container",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nGIVEN THAT I am on a page with a scrolling container\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to the container I SEE focus is strongly visually indicated\n   * THEN when I use the up/down arrow keys I SEE the content is browsed up/down\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to the container\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role as region\n   * THEN when I use the up/down arrow keys I HEAR the content is browsed up/down\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe move browse to the container\n     * I HEAR its purpose is clear\n     * I HEAR it identifies its role as region\n   * THEN when I swipe move browse to the content I HEAR the content is read\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/scrolling>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Tab: Focus visibly moves to container\n   * Arrow-keys: Browses the container\n\n2. Test mobile screenreader gestures\n   * Swipe: The content is browsed in logical order\n\n3. Listen to screenreader output on all devices\n   * Name: Its purpose is clear\n   * Role: It identifies its role as region\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/scrolling>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n<example class=\"example example--contains-icon\">\n<div role=\"region\" aria-label=\"Screenreader browser pairing table\" class=\"scrolling-container\" tabindex=\"0\">\n     <table class=\"comparison text-center\" style=\"height: 250px;overflow: auto\">\n  <caption class=\"center-text h-charlie\">\n    Screen reader and browser pairings\n  </caption>\n  <thead>\n  <tr><th scope=\"col\">\n    Platform\n  </th>\n  <th scope=\"col\">\n    Screenreader\n  </th>\n  <th scope=\"col\">\n    Browser\n  </th>\n  </tr></thead>\n  <tbody>\n  <tr>\n    <th scope=\"row\">\n      <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      iOS\n    </th>\n    <td>\n      <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      VoiceOver\n    </td>\n    <td>\n      <img src=\"media/images/icons/logo-safari.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      Safari\n    </td>\n  </tr>\n  <tr>\n    <th scope=\"row\">\n      <img src=\"media/images/icons/logo-android.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Android\n    </th>\n    <td>\n      <img src=\"media/images/icons/logo-talkback.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Talkback\n    </td>\n    <td>\n      <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Chrome\n    </td>\n  </tr>\n  <tr>\n    <th scope=\"row\">\n      <img src=\"media/images/icons/logo-windows.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Windows\n    </th>\n    <td>\n      <img src=\"media/images/icons/logo-jaws.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      JAWS\n    </td>\n    <td>\n      <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Chrome\n    </td>\n  </tr>\n  <tr>\n    <th scope=\"row\">\n      <img src=\"media/images/icons/logo-windows.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Windows\n    </th>\n    <td>\n      <img src=\"media/images/icons/logo-nvda.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      NVDA\n    </td>\n    <td>\n      <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n      Chrome\n    </td>\n  </tr>\n  <tr>\n    <th scope=\"row\">\n      <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      MacOS\n    </th>\n    <td>\n      <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      VoiceOver\n    </td>\n    <td>\n      <img src=\"media/images/icons/logo-safari.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n      Safari\n    </td>\n  </tr>\n  </tbody>\n</table>\n</div>     \n</example>\n\n```html\n<div role=\"region\" \n     aria-label=\"Screenreader browser pairing table\"  \n     class=\"scrolling-container\" \n     tabindex=\"0\">\n     \n     <!-- Content goes here -->\n\n</div>     \n```\n\n## Developer Notes\n\n### Name\n\n* Use `aria-label=\"Container purpose\"` to give the container a name and purpose.\n\n### Role\n\n* Use `role=\"region\"` to set apart the div as a landmark.\n\n### Focus\n\n* Use `tabindex=\"0\"` to make the container element focusable\n* Focus must be visible"
        },
        {
          "label": "Search",
          "name": "search",
          "type": "file",
          "generalNotes": "How to test a search input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a search input\n\nGIVEN THAT I am on a page with a search input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a search input I SEE focus is strongly visually indicated\n   * THEN when I use the tab key to move focus to the search submit button I SEE the button is focused\n   * THEN when I use the enter or spacebar key I SEE the search results are presented\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader shortcuts as a search input\n   * THEN when I use the tab key to move focus to the search submit button I HEAR the button is focused\n   * THEN when I use the enter or spacebar key I HEAR the search results are presented\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a search input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a search input\n     * I HEAR the form itself is discoverable with screenreader\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the search text input and search button\n   * Space: Search button is activated\n   * Enter: Search is activated\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to the search text input and search button\n   * Doubletap: Search button is activated\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a search input\n   * Group: The form itself is discoverable with screenreader shortcuts as a search input\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/search>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/search/search-android.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/search/search-ios.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows Jaws Chrome\n\n<video controls>\n  <source src=\"media/video/web/search/search-JAWS.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/search/search-NVDA.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/search/search-desktop-safari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* This semantic HTML contains all accessibility features by default.\n* Include a search button\n\n### Search with autocomplete suggestions\n\n* For search autocomplete see [Autocomplete input with listbox](/checklist-web/listbox-autocomplete/)\n\n<!-- TODO update link above -->\n\n```html\n<form role=\"search\">\n  <label for=\"search\">\n    Search this website:\n  </label>\n  <input list=\"components\" type=\"search\" id=\"search\">\n  <datalist id=\"components\"> \n    <option value=\"Alert\"> \n    <option value=\"Animation\"> \n    <option value=\"Button\"> \n    <option value=\"Checkbox\">\n    <option value=\"Date picker\">\n    <option value=\"Expander accordion\">\n    <option value=\"Footer / contentinfo\">\n    <option value=\"Form\">\n    <option value=\"Header / banner\">\n    <option value=\"Heading: h1, h2, h3\">\n  </datalist>\n\n  <button type=\"submit\" aria-label=\"search\">\n   <svg focusable=\"false\" aria-hidden=\"true\"></svg>\n  </button>\n</form>\n```\n\n<!-- TODO issues with focus when tabbing to search button -->\n\n<!-- TODO Something funky is up with the search button here and I can't figure it out. It is submitting on focus when not using VoiceOver.  -->\n\n<example>\n   <form role=\"search\">\n      <label for=\"search\" class=\"hidden-visually\">\n         Search this website:\n      </label>\n      <input list=\"components\" type=\"search\" id=\"search\">\n      <datalist id=\"components\"> \n         <option value=\"Alert\"> \n         <option value=\"Animation\"> \n         <option value=\"Button\"> \n         <option value=\"Checkbox\">\n         <option value=\"Date picker\">\n         <option value=\"Expander accordion\">\n         <option value=\"Footer / contentinfo\">\n         <option value=\"Form\">\n         <option value=\"Header / banner\">\n         <option value=\"Heading: h1, h2, h3\">\n      </datalist>\n      <button data-icon=\"search\" aria-label=\"Search\"></button>\n   </form>\n</example>\n\n## Developer notes\n\n### Name\n\n* Use a `label` with a `for=\"input-id` to describe the input\n* Use `aria-label=\"Search this website\"` if a `label` can't be used\n\n### Role\n\n* Use `role=\"search\"` for the `<form>`\n* Use `type=\"search\"` for the text `<input>`\n\n### Group\n\n* Form identifies itself as `role=\"search\"`\n* Include a search submit button.\n\n### Focus\n\n* Focus must be visible\n\n## Further Reading\n\n* [WCAG 1.1.1 Non-text Content (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/non-text-content.html)\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)\n* [WCAG 1.3.5 Identify Input Purpose (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard.html)\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation.html)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions.html)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Select Dropdown",
          "name": "select-dropdown",
          "type": "file",
          "generalNotes": "How to test a select dropdown",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a select dropdown\n\nGIVEN THAT I am on a page with a select dropdown\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a select I SEE focus is strongly visually indicated\n\n   * THEN when I use the arrow keys to select an option I SEE the selected option is changed\n\n   * THEN when I use the escape key when the select is open  I SEE it collapses and focus moves to the select\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to a select\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a select, popup, menu/submenu, listbox or combobox\n     * I HEAR hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n     * I HEAR it indicates which option is selected and if disabled/dimmed/unavailable\n\n   * THEN when I use the arrow keys to select an option I HEAR the selected option is changed\n\n   * THEN when I use the escape key when the select is open  I HEAR it collapses and focus moves to the select\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focus on a select\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a select, popup, menu/submenu, listbox or combobox\n     * I HEAR Hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n     * I HEAR it indicates which option is selected and if disabled/dimmed/unavailable\n\n   * THEN when I doubletap with the select in focus I HEAR the options can be selected\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/select-dropdown>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a select dropdown\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the input\n\n   * Arrow-keys: Moves focus to and chooses the next option.\n\n   * Escape: If the select options are displayed, collapses the select and moves focus to the select.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input, traverses list\n\n   * Double-tap: Opens select, chooses option\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n\n   * Role: It identifies itself as a select, popup, menu/submenu, listbox or combobox\n\n   * Group: Hints or errors are read after the label and related inputs include a group name (ex: Account settings)\n\n   * State: It indicates which option is selected and if disabled/dimmed/unavailable\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/select-dropdown>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/select/select-ios.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/select/select-android.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/select/select-jaws.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/select/select-nvda.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/select/select-macOS.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use the Semantic HTML `<select>`\n\nThis native select contains all the accessibility criteria for free.\n\n<!-- TODO: add back in if we utilize pseudo attributes in examples\n- It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_input-select.scss) to create the arrow indicator, no Javascript.\n-->\n\n```html\n<label for=\"nato\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato\">\n  <option value=\"None\" selected disabled>Select a letter</option>\n  <option value=\"A\">Alpha</option>\n  <option value=\"B\">Bravo</option>\n  <option value=\"C\">Charlie</option>\n</select>\n```\n\n<example>\n<label for=\"nato\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato\">\n  <option value=\"None\" selected disabled>Select a letter</option>\n  <option value=\"A\">Alpha</option>\n  <option value=\"B\">Bravo</option>\n  <option value=\"C\">Charlie</option>\n</select>\n</example>\n\n### Focusable disabled select (preferred)\n\nThis select is focusable with all options disabled.\n\n```html\n<label for=\"nato-disabled-focusable\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato-disabled-focusable\" aria-disabled=\"true\">\n  <option value=\"None\" disabled>None</option>\n  <option value=\"A\" disabled selected>Alpha</option>\n  <option value=\"B\" disabled>Bravo</option>\n  <option value=\"C\" disabled>Charlie</option>\n</select>\n```\n\n<example>\n<label for=\"nato-disabled-focusable\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato-disabled-focusable\" aria-disabled=\"true\">\n  <option value=\"None\" disabled>None</option>\n  <option value=\"A\" disabled selected>Alpha</option>\n  <option value=\"B\" disabled>Bravo</option>\n  <option value=\"C\" disabled>Charlie</option>\n</select>\n</example>\n\n### Disabled select\n\nThis select is completely disabled and not focusable, making it harder to discover for the screen reader.\n\n```html\n<label for=\"nato-disabled\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato-disabled\" disabled>\n  <option value=\"None\">None</option>\n  <option value=\"A\">Alpha</option>\n  <option value=\"B\" selected>Bravo</option>\n  <option value=\"C\">Charlie</option>\n</select>\n```\n\n<example>\n<label for=\"nato-disabled\">\n  Select a Nato phonetic Letter\n</label>\n<select id=\"nato-disabled\" disabled>\n  <option value=\"None\">None</option>\n  <option value=\"A\">Alpha</option>\n  <option value=\"B\" selected>Bravo</option>\n  <option value=\"C\">Charlie</option>\n</select>\n</example>\n\n### Avoid custom select dropdown elements:\n\nCustom dropdown selects are [notoriously difficult](https://www.24a11y.com/2019/select-your-poison/) to make screen reader accessible.\n\n> \"…it is now thoroughly clear that recreating the native behavior of a `<select>` element is impossible: its underlying semantics differ across platforms; its keyboard behavior is inconsistent; its mobile presentation and behavior is entirely different from desktop. In making a custom UI control, we take upon ourselves what was the browser’s responsibility to define semantics, presentation, and behavior, and this means we must choose one single implementation to serve to everyone.\"\n\n> — [Sarah Higley](https://www.24a11y.com/2019/select-your-poison/), Web Developer at Microsoft\n\nAngular Material documentation says \"The native `<select>` offers the best accessibility because it is supported directly by screen-readers.\"\n\nAngular material custom listbox requires the Live Announcer overlay to be accessible, and [advises using a native `<select>` for accessibility](https://material.angular.io/components/select/overview).\n\n> \"Angular Material also supports use of the native `<select>` element inside of `<mat-form-field>`. The native control has several performance, accessibility, and usability advantages.\"\n\nBefore you attempt to use one of these, be certain a native `<select>` is not an option and you understand the commitment for coding and testing across all platforms.\n\n## Further reading\n\n* [24 Accessibility : Select your poison](https://www.24a11y.com/2019/select-your-poison/)\n* [WebAxe.org: Accessible Custom Select Dropdowns](https://www.webaxe.org/accessible-custom-select-dropdowns/)\n* [WAI-ARIA listbox examples](https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/examples/combobox/combobox-select-only.html)\n\n### WCAG criteria\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 1.3.5 Identify Input Purpose (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG 2.4.6 Headings and Labels (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels.html)\n* [WCAG 3.3.1 Error Identification (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/error-identification)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions)\n* [WCAG 3.3.3 Error Suggestion (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Separator Horizontal Rule",
          "name": "separator-horizontal-rule",
          "type": "file",
          "generalNotes": "How to test a separator / horizontal rule",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a separator / horizontal rule\n\nGIVEN THAT I am on a page with a separator / horizontal rule\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use arrow keys to browse to the separator I SEE the element is skipped entirely. It is completely inert.\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use arrow keys to browse to the separator\n     * I HEAR the element is skipped entirely. It is completely inert.\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to the separator\n     * I HEAR the element is skipped entirely. It is completely inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/separator-horizontal-rule>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a separator / horizontal rule\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Any key: Nothing happens. It is completely inert.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The element is skipped entirely. It is completely inert.\n\n3. Listen to screenreader output on all devices\n\n   * Name: The element is skipped entirely. It is completely inert.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/separator-horizontal-rule>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\nSeparators must be ignored by the screenreader.\n\nIt is preferred to create these lines with CSS rather than using a DOM element.\n\n## Code examples\n\nIf you are unable to use CSS styles, add `aria-hidden=\"true\"` to ensure it doesn't distract from the experience.\n\n### Semantic HTML\n\n```html\n<hr aria-hidden=\"true\">\n```\n\n### Custom elements\n\nAngular Material uses a DOM element to create separators.\n\n```html\n<div role=\"separator\" aria-hidden=\"true\"></div>\n```"
        },
        {
          "label": "Star Rating",
          "name": "star-rating",
          "type": "file",
          "generalNotes": "How to test a star rating input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a star rating input\n\nGIVEN THAT I am on a star rating input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a radio group I SEE focus is strongly visually indicated on the first unselected option or the selected option\n   * THEN when I use the spacebar to activate the radio button I SEE the radio button with focus change state to selected.\n   * THEN when I use the arrow keys to focus radio button I SEE the state is changed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a radio group\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a radio option\n     * I HEAR each option has an associated label and the radio group name\n     * I HEAR it expresses its state (selected, checked, disabled)\n   * THEN when I use the spacebar to activate the radio button I HEAR the radio button with focus change state to selected.\n   * THEN when I use the arrow keys to focus radio button I HEAR the state is changed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a radio button\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a radio option\n     * I HEAR each option has an associated label and the radio group name\n     * I HEAR it expresses its state (selected, checked, disabled)\n   * Then when I doubletap with the radio in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/star-rating>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a star rating input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the checked radio button in the group. If a radio button is not checked, focus moves to the first radio button in the group.\n   * Spacebar: If the radio button with focus is not checked, changes the state to checked.  Otherwise, does nothing.\n   * Arrow-keys: Moves focus to and checks the previous or next radio button in the group\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: If the radio button with focus is not checked, changes the state to checked. Otherwise, does nothing.\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n   * Role: It identifies itself as a radio option\n   * Group: Each option has an associated label and the radio group name\n   * State: It expresses its state (selected, checked, disabled)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/star-rating>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n### As radio group\n\nThis radio group uses CSS to reverse the visual order of the radio inputs while preserving accessibility.\n\n```html\n<fieldset>\n  <legend>\n    Rate this product\n  </legend>\n  <div class=\"star-rating\">\n    <input type=\"radio\" class=\"star\" name=\"star\" id=\"star-1\">\n    <label for=\"star-1\">\n      <span class=\"hidden\">1 star</span>\n    </label>\n    <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-2\">\n    <label for=\"star-2\">\n      <span class=\"hidden\">2 star</span>\n    </label>\n    <input type=\"radio\" class=\"star\" name=\"star\" id=\"star-3\">\n    <label for=\"star-3\">\n      <span class=\"hidden\">3 star</span>\n    </label>\n    <input type=\"radio\" class=\"star\" name=\"star\" id=\"star-4\">\n    <label for=\"star-4\">\n      <span class=\"hidden\">4 star</span>\n    </label>\n    <input type=\"radio\" class=\"star\" name=\"star\" id=\"star-5\">\n    <label for=\"star-5\">\n      <span class=\"hidden\">5 star</span>\n    </label>\n  </div>\n</fieldset>\n```\n\n<!-- TODO - come back and work on why the order is reversed plus work on styling -->\n\n<example>\n  <fieldset>\n    <legend>\n      Rate this product\n    </legend>\n    <div class=\"star-rating\" role=\"radiogroup\">\n      <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-1\">      \n      <label for=\"star-1\">\n        <span class=\"hidden-visually\">1 star</span>\n      </label>\n      <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-2\" data-icon=\"tablet\">\n      <label for=\"star-2\">\n        <span class=\"hidden-visually\">2 stars</span>\n      </label>\n      <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-3\">\n      <label for=\"star-3\">\n        <span class=\"hidden-visually\">3 stars</span>\n      </label>\n      <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-4\">\n      <label for=\"star-4\">\n        <span class=\"hidden-visually\">4 stars</span>\n      </label>\n      <input type=\"radio\" class=\"hidden-visually star\" name=\"star\" id=\"star-5\">\n      <label for=\"star-5\">\n        <span class=\"hidden-visually\">5 stars</span>\n      </label>\n    </div>\n  </fieldset>\n</example>\n\n### Displaying star ratings\n\nThe element must clearly express the rating and scale.\n\n```html\n  <p class=\"stars\">\n    <span class=\"scale\">\n    </span>\n    <span class=\"rating\">\n    </span>\n    <span class=\"hidden-visually\">\n      Rating: 4 out of 5 stars\n    </span>\n  </p>\n```\n\n<example>\n<p class=\"stars\">\n    <span class=\"scale\">\n    </span>\n    <span class=\"rating\">\n    </span>\n    <span class=\"hidden-visually\">\n      Rating: 4 out of 5 stars\n    </span>\n  </p>\n</example>"
        },
        {
          "label": "Stepper Input",
          "name": "stepper-input",
          "type": "file",
          "generalNotes": "How to test a stepper input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a stepper input\n\nGIVEN THAT I am on a page with a stepper input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to the first interactive item I SEE focus is strongly visually indicated\n   * THEN when I use the arrow keys to select an option I SEE the selected option is changed\n   * THEN when I use the escape key when the select is open I SEE it collapses and focus moves to the select\n   * WHEN when I use the enter key is pressed on buttons I SEE the value is incremented or decremented\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to the first interactive item AND\n     * I HEAR button labels are clear and include contextThe select field's visual label is announced\n     * I HEAR for the select field it identifies itself as a select, popup button, menu/submenu or listboxFor the buttons they are identified as button\n     * I HEAR its label is read with the input\n     * I HEAR it indicates when the select is expanded/collapsed, indicates which option is selected\n   * THEN when I use the arrow keys to select an option, I HEAR the selected option is changed\n   * THEN when I use the escape key when the select is open, I HEAR it collapses and focus moves to the select\n   * WHEN when I use the enter key is pressed on buttons I HEAR the value is incremented or decremented\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on the form fields\n     * I HEAR button labels are clear and include contextThe select field's visual label is announced\n     * I HEAR for the select field it identifies itself as a select, popup button, menu/submenu or listboxFor the buttons they are identified as button\n     * I HEAR its label is read with the input\n     * I HEAR it indicates when the select is expanded/collapsed, indicates which option is selected\n   * THEN when I doubletap with the select in focus I HEAR the picker/spinner opens\n   * THEN when I doubletap with the button in focus I HEAR the value is incremented or decremented\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/stepper-input>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a stepper input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to either the select field or buttons.\n   * Enter or spacebar:\n     * If select is focused, expands the select and places focus on the currently selected option in the list.\n     * If focus is in the options, collapses the select and keeps the currently selected option.\n     * If focus is on one of the buttons, it will either increment or decrement the value.\n   * Arrow-keys: If select is focused, moves focus to and selects the next option.\n   * Escape: If the select is displayed, collapses the select and moves focus to the button.\n   * Home: If the select is displayed, moves focus to and selects the first option.\n   * End: If the select is displayed, moves focus to and selects the last option.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Moves focus to each form control in the pattern.\n   * Double-tap: If select is focused, opens select, selects option. Note: If a button is focused, it will either increment or decrement the value.\n\n3. Listen to screenreader output on all devices\n\n   * Name: Button labels are clear and include context. The select field's visual label is announced.\n   * Role: For the select field it identifies itself as a select, popup button, menu/submenu or listbox. For the buttons they are identified as button.\n   * Group: Its label is read with the input.\n   * State: It indicates when the select is expanded/collapsed, indicates which option is selected.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/stepper-input>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Speciality stepper integer input\n\nBefore using this pattern, consider if using a plain [select dropdown](https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/select/) might be more clear and simple for all users. A `<select>` does everything that the stepper input does, and with less code. Additionally, a `<select>` is a native HTML component and inherently accessible.\n\nThe stepper input component is useful for *small range increments*. If the max character count is more than 20, consider use of a [text Input](https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/text-input/) field as this component will be cumbersome for people using a mouse.\n\n```html\n<div>\n  <label for=\"stepper\">\n    Quantity\n  </label>\n  <div class=\"stepper\">\n      <button class=\"button minus\" aria-label=\"Decrease Quantity\" aria-disabled=\"true\"></button>\n      <select id=\"stepper\"\n               name=\"stepper-input\"\n               min=\"1\"\n               max=\"11\"\n               data-selected=\"1\">\n         <option value=\"1\" selected>1</option>\n         <option value=\"2\">2</option>\n         <option value=\"3\">3</option>\n         <option value=\"4\">4</option>\n         <option value=\"5\">5</option>\n         <option value=\"6\">6</option>\n         <option value=\"7\">7</option>\n         <option value=\"8\">8</option>\n         <option value=\"9\">9</option>\n         <option value=\"10\">10</option>\n         <option value=\"11\">11</option>\n      </select>\n      <button class=\"button plus\" aria-label=\"Increase Quantity\"></button>\n   </div>\n  <!-- live container where \"Quantity updated, [number]\" will be dynamically updated -->\n  <div aria-live=\"polite\" class=\"hidden\" id=\"stepper-status-target\"></div>\n</div>\n```\n\n<!-- TODO disabling buttons -->\n\n<example>\n   <div>\n      <label for=\"stepper\">\n         Quantity\n      </label>\n      <div class=\"stepper\">\n            <button data-fn=\"decreaseSelectStepper\" data-icon=\"minus\" class=\"button minus\" aria-label=\"Decrease Quantity\" aria-disabled=\"true\"></button>\n            <select id=\"stepper\"\n                     name=\"stepper-input\"\n                     min=\"1\"\n                     max=\"11\"\n                     data-selected=\"1\">\n               <option value=\"1\" selected>1</option>\n               <option value=\"2\">2</option>\n               <option value=\"3\">3</option>\n               <option value=\"4\">4</option>\n               <option value=\"5\">5</option>\n               <option value=\"6\">6</option>\n               <option value=\"7\">7</option>\n               <option value=\"8\">8</option>\n               <option value=\"9\">9</option>\n               <option value=\"10\">10</option>\n               <option value=\"11\">11</option>\n            </select>\n            <button data-fn=\"increaseSelectStepper\" data-icon=\"plus\" class=\"button plus\" aria-label=\"Increase Quantity\"></button>\n         </div>\n      <!-- live container where \"Quantity updated, [number]\" will be dynamically updated -->\n      <div aria-live=\"polite\" class=\"hidden\" id=\"stepper-status-target-1\"></div>\n   </div>\n</example>\n\n### No-select stepper\n\n* Uses buttons to increment/decrement\n* Has an updating `aria-live` region to provide updates\n* Buttons should be disabled when the stepper hits its minimum or maximum value.\n\n```html\n<div class=\"stepper\">\n   <button id=\"decrement-button\" data-fn=\"decreaseNumber\" data-icon=\"minus\" class=\"button minus\" aria-label=\"Decrease Quantity\" aria-disabled=\"true\"></button>\n   <span id=\"step-number\">0</span>\n   <button data-icon=\"plus\"  data-fn=\"increaseNumber\" class=\"button plus\" aria-label=\"Increase Quantity\"></button>\n   <!-- live container where \"Quantity updated, [number]\" will be dynamically updated -->\n   <div aria-live=\"polite\" class=\"hidden\" id=\"stepper-status-target\"></div>\n</div>\n```\n\n<!-- TODO disabling buttons -->\n\n<example>\n   <div class=\"stepper\">\n      <button id=\"decrement-button\" data-fn=\"decreaseNumber\" data-icon=\"minus\" class=\"button minus\" aria-label=\"Decrease Quantity\" aria-disabled=\"true\"></button>\n      <span id=\"step-number\">0</span>\n      <button data-icon=\"plus\"  data-fn=\"increaseNumber\" class=\"button plus\" aria-label=\"Increase Quantity\"></button>\n      <!-- live container where \"Quantity updated, [number]\" will be dynamically updated -->\n      <div aria-live=\"polite\" class=\"hidden\" id=\"stepper-status-target\"></div>\n   </div>\n</example>\n\n## Developer notes\n\n* This stepper example provides both `button` and `select` elements for users to change a value.\n\n* A non-visual live container with `aria-live=\"polite\"` is present in the DOM on page load. When the `button` element is activated, this non-visual live container is updated with dynamic content that screen reader users will hear announced as they increment or decrement the value. This dynamic text is then removed from the DOM after a few seconds (but not the actual container with `aria-live=\"polite\"`) so the message is not discovered by screen reader users after interaction. The content of this message dynamically created based on the `label` for the `select` and the current value of the `select`, e.g. \"Quantity updated, 4\".\n\n* The value of the `select` element naturally communicates the updated value to screen reader users so the live container is not updated when interacting with that form element.\n\n* The `button` and `aria-label` values should be plain text and should include context of what they affect when activated (typically the label for the `select`), e.g. \"Increase Quantity\" or \"Add Quantity\".\n\n* The buttons will need `aria-disabled=\"true\"` applied when either end of the range is reached.\n\n* Related alternative patterns: [Select dropdown](https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/select/) or an [WAI-ARIA Spin Button](https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/examples/datepicker-spinbuttons/)."
        },
        {
          "label": "Sticky Element",
          "name": "sticky-element",
          "type": "file",
          "generalNotes": "How to test a sticky element",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a sticky element\n\nGIVEN THAT I am on a page with a sticky element\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to interactive elements inside the sticky element I SEE focus is visually indicated in a logical order in relation to the whole page\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to interactive elements inside the sticky element\n     * I HEAR interactive elements are read in logical order in relation to the whole page\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to the sticky element\n     * I HEAR Interactive elements are read in logical order in relation to the whole page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/sticky-element>\n\n<!-- ## Developer Notes\n\n### Name\n\n- Typically doesn’t have a name or description since there must be only one instance per page. -->",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a sticky element\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Controls are visibly focusable in a logical order in relation to the whole page\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Content and controls within the sticky element appear in a logical order in relation to the whole page\n\n3. Listen to screenreader output on all devices\n\n   * Group: Interactive elements are read in logical order in relation to the whole page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/sticky-element>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/sticky/Android Talkback-sticky-content.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/web/sticky/iOS Voiceover-sticky-content.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS Voiceover Safari\n\n<video controls>\n  <source src=\"media/video/web/sticky/MacOS-Voiceover-Safari-sticky-content.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Pitfalls of sticky content\n\nUnless you have a really good reason, it's best to avoid sticking content to the bottom (or top) of the page. While it seems like an obvious solution, without user testing in production environments you won't know how people are really going to interact with it.\n\n### Ask the following questions first\n\n* Where will this appear in the actual DOM (code) order?\n  * If it's injected at the top or bottom of the content, will it be cumbersome or impossible for someone using a keyboard or screen reader to locate it?\n* Is it preferable to place this content in multiple locations on the page?\n  * A \"Buy now\" button can appear more than once in the page.\n* Will this content be perceived as an ad and thus ignored by the customer?\n  * We've trained people for years to ignore sticky content in their browser offering app downloads and other ads. Why is your popup sticky content any different?\n\n## Code examples\n\n### Place the element in logical DOM order\n\nThis semantic HTML appears in logical order in the page.\n\nIt uses only CSS (no JavaScript) to float content as desired.\n\n```html\n\n<div class=\"sticky-wrapper\">\n  <div class=\"promo-bar sticky tops\">\n    <button>Upgrade today</button>\n    <p>Content that sticks to the top</p>\n  </div>\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a> \n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n</div>\n<div class=\"promo-bar\">\n  <button class=\"secondary\">See more</button>\n  <p>Content that is <em>not</em> sticky</p>\n</div>\n<div class=\"vertical-spacer vertical-spacer--less\">\n</div>\n<div class=\"sticky-wrapper\">\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a>\n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n  <div class=\"promo-bar sticky\">\n    <button>Buy now</button>\n    <p>Content that sticks to the bottom</p>\n  </div>\n</div>\n```\n\n<example>\n<div class=\"sticky-wrapper\">\n  <div class=\"promo-bar sticky top\">\n    <button class=\"Magentaa11y-button Magentaa11y-button--primary\">Upgrade today</button>\n    <p>Content that sticks to the top</p>\n  </div>\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a> \n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n</div>\n<div class=\"promo-bar\">\n  <button class=\"Magentaa11y-button Magentaa11y-button--primary\">See more</button>\n  <p>Content that is <em>not</em> sticky</p>\n</div>\n<div class=\"vertical-spacer vertical-spacer--less\">\n</div>\n<div class=\"sticky-wrapper\">\n  <div class=\"vertical-spacer\">\n    <p><a href=\"/checklist-web/html/\">Web page content</a>\n    and <a href=\"/checklist-web/link/\">links</a>\n    or <a href=\"/checklist-web/button/\">buttons</a>\n    will be <a href=\"/how-to-test/\">read</a>  \n    in <a href=\"/checklist-web/html/\">DOM (code) order</a>.</p>\n  </div>\n  <div class=\"promo-bar sticky\">\n    <button class=\"Magentaa11y-button Magentaa11y-button--primary\">Buy now</button>\n    <p>Content that sticks to the bottom</p>\n  </div>\n</div>\n</example>\n\n## Developer notes\n\n### Group\n\n* Must appear in logical page order within the page.\n* Do not place it at the actual end or beginning of the DOM\n* To ensure that controls which receive keyboard focus are not concealed by a sticky container, utilize CSS [scroll-padding](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding) or [scroll-margin](https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin)."
        },
        {
          "label": "Strikethrough Content",
          "name": "strikethrough-content",
          "type": "file",
          "generalNotes": "How to test a strikethrough element",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a strikethrough element\n\nGIVEN THAT I am on a page with strikethrough content\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow key to browse the content I SEE the content comes into view\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow key to browse the content\n     * I HEAR the content makes sense and is in a logical order\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to browse the content\n     * I HEAR the content makes sense and is in a logical order\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/strikethrough-content>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a strikethrough element\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow: Browses the content\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The content makes sense and is in a logical order\n\n3. Listen to screenreader output on all devices\n\n   * Name: The content makes sense and is in a logical order\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/strikethrough-content>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\n* Do not use `aria-label` to add context. Some screenreaders will not read `aria-label` from non-interactive components.\n\n## Code examples\n\n```html\n<p>Get a $10/mo discount with autopay</p>\n<s class=\"h-bravo\">\n  <!-- Give context to the first number -->\n  <span class=\"hidden-visually\">\n    Original price:\n  </span>\n  $50\n  <!-- Give context to the first number -->\n  <span class=\"hidden-visually\">\n    /mo\n  </span>\n</s>\n<span class=\"h-bravo\">\n  <!-- Give context to the second number -->\n  <span class=\"hidden-visually\">\n    Price with $10 autopay discount\n  </span>\n  $40/mo\n</span>\n```\n\n<example>\n<p>Get a $10/mo discount with autopay</p>\n<s class=\"h-bravo\">\n  <!-- Give context to the first number -->\n  <span class=\"hidden-visually\">\n    Original price:\n  </span>\n  $50\n  <!-- Give context to the first number -->\n  <span class=\"hidden-visually\">\n    /mo\n  </span>\n</s>\n<span class=\"h-bravo\">\n  <!-- Give context to the second number -->\n  <span class=\"hidden-visually\">\n    Price with $10 autopay discount\n  </span>\n  $40/mo\n</span>\n</example>"
        },
        {
          "label": "Table",
          "name": "table",
          "type": "file",
          "generalNotes": "How to test a table",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\nGIVEN THAT I am on a page with a table\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys I SEE the table scrolls into view (but is not focusable)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver)\n   * AND use the arrow keys\n     * I HEAR the table has a caption or a heading to describe its purpose\n     * I HEAR it identifies itself as a table\n     * I HEAR column headers and row headers are identified with screenreader shortcuts\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver)\n   * AND I swipe to focusable elements in the footer\n     * I HEAR the table has a caption or a heading to describe its purpose\n     * I HEAR it identifies itself as a table\n     * I HEAR column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/table>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a table\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: The table scrolls into view (and with a screenreader the cells become individually readable)\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The table is browsed from cell to cell\n\n3. Listen to screenreader output on all devices\n\n   * Name: The table has a caption or a heading to describe its purpose\n   * Role: It identifies itself as a table\n   * Group: Column headers and row headers are identified with screenreader shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/table>",
          "criteria": null,
          "videos": "### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/table/table_android.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/table/table_ios.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/table/table_nvda.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/table/table_macos.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\nOptional: The table is wrapped in a `<figure>` to indicate author and source.\n\n```html\n<table id=\"sesame-table\">\n   <caption>\n      Sesame Street Characters\n   </caption>\n   <thead>\n      <tr>\n         <th scope=\"row\">\n         Letter\n         </th>\n         <th scope=\"col\">\n         E\n         </th>\n         <th scope=\"col\">\n         B\n         </th>\n         <th scope=\"col\">\n         C\n         </th>\n      </tr>\n   </thead>\n   <tbody>\n      <tr>\n         <th scope=\"row\">\n         Name\n         </th>\n         <td>\n         Elmo\n         </td>\n         <td>\n         Big Bird\n         </td>\n         <td>\n         Cookie Monster\n         </td>\n      </tr>\n   </tbody>\n</table>\n```\n\n<example>\n   <div class=\"table-wrapper\">\n      <table id=\"sesame-table\" class=\"text-center\">\n         <caption>\n            Sesame Street Characters\n         </caption>\n         <thead>\n            <tr>\n               <th scope=\"row\">\n               Letter\n               </th>\n               <th scope=\"col\">\n               E\n               </th>\n               <th scope=\"col\">\n               B\n               </th>\n               <th scope=\"col\">\n               C\n               </th>\n            </tr>\n         </thead>\n         <tbody>\n            <tr>\n               <th scope=\"row\">\n               Name\n               </th>\n               <td>\n               Elmo\n               </td>\n               <td>\n               Big Bird\n               </td>\n               <td>\n               Cookie Monster\n               </td>\n            </tr>\n         </tbody>\n      </table>\n   </div>\n</example>\n\n<!-- TODO broken image references -->\n\n<example class=\"example example--contains-icon\">\n   <div class=\"table-wrapper\">\n      <table class=\"comparison text-center\">\n         <caption>\n            Screen reader and browser pairings\n         </caption>\n         <thead>\n         <tr><th scope=\"col\">\n            Platform\n         </th>\n         <th scope=\"col\">\n            Screenreader\n         </th>\n         <th scope=\"col\">\n            Browser\n         </th>\n         </tr></thead>\n         <tbody>\n         <tr>\n            <th scope=\"row\">\n               <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               iOS\n            </th>\n            <td>\n               <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               VoiceOver\n            </td>\n            <td>\n               <img src=\"media/images/icons/logo-safari.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               Safari\n            </td>\n         </tr>\n         <tr>\n            <th scope=\"row\">\n               <img src=\"media/images/icons/logo-android.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Android\n            </th>\n            <td>\n               <img src=\"media/images/icons/logo-talkback.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Talkback\n            </td>\n            <td>\n               <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Chrome\n            </td>\n         </tr>\n         <tr>\n            <th scope=\"row\">\n               <img src=\"media/images/icons/logo-windows.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Windows\n            </th>\n            <td>\n               <img src=\"media/images/icons/logo-jaws.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               JAWS\n            </td>\n            <td>\n               <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Chrome\n            </td>\n         </tr>\n         <tr>\n            <th scope=\"row\">\n               <img src=\"media/images/icons/logo-windows.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Windows\n            </th>\n            <td>\n               <img src=\"media/images/icons/logo-nvda.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               NVDA\n            </td>\n            <td>\n               <img src=\"media/images/icons/logo-chrome.svg\" role=\"img\" alt=\"\" class=\"icon\">\n               Chrome\n            </td>\n         </tr>\n         <tr>\n            <th scope=\"row\">\n               <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               MacOS\n            </th>\n            <td>\n               <img src=\"media/images/icons/logo-apple.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               VoiceOver\n            </td>\n            <td>\n               <img src=\"media/images/icons/logo-safari.svg\" role=\"img\" alt=\"Apple\" class=\"icon\">\n               Safari\n            </td>\n            </tr>\n         </tbody>\n      </table>\n   </div>\n</example>\n\n### When you can’t use semantic HTML\n\nIf it’s required to display tabular data without using a `<table>` element, attributes will have to added.\n\n```html\n<div role=\"table\" aria-describedby=\"table-desc\">\n  <div id=\"table-desc\">\n    Sesame Street Characters\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"columnheader\">Letter</span>\n      <span role=\"columnheader\">Name</span>\n    </div>\n  </div>\n  <div role=\"rowgroup\">\n    <div role=\"row\">\n      <span role=\"cell\">E</span>\n      <span role=\"cell\">Elmo</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">B</span>\n      <span role=\"cell\">Big Bird</span>\n    </div>\n    <div role=\"row\">\n      <span role=\"cell\">C</span>\n      <span role=\"cell\">Cookie Monster</span>\n    </div>\n  </div>\n</div>\n```\n\n## Developer notes\n\nDon't use tables purely for layout. Only use tables to structure tabular data.\n\n### Name\n\n* The table can be named by a heading above or a `<caption>`\n\n### Role\n\n* Semantic `<table>` structures identify headers appropriately and honors screen reader keyboard shortcuts.\n\n### Group\n\n* Wrapping a table in a [`<figure>` element](/OpenA11yEngineer/checklist-web/figure/) can be used to build a relationship to `<figcaption>` and `<cite>`\n\n### State\n\n* Sortable tables can use `aria-sort` to indicate state.\n\n## Documentation\n\n* [MSDN Web Docs - ARIA: table role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Table_Role)\n* [WAI-ARIA table example](https://www.w3.org/TR/wai-aria-practices/examples/table/table.html)"
        },
        {
          "label": "Tabs",
          "name": "tabs",
          "type": "file",
          "generalNotes": "How to test tabs",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test tabs\n\nGIVEN THAT I am on a page with tabs\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a tab I SEE focus is strongly visually indicated on the activated tab\n\n   * IF TAB ACTIVATION IS MANUAL when I use the left/right arrow keys I SEE focus moves to other tabs and I use the spacebar or enter key to activate the tab\n\n   * IF TAB ACTIVATION IS AUTOMATIC when I use the left/right arrow keys I SEE the tab is activated\n\n   * THEN when I use the tab key I SEE focus moves to the activated tab panel\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to move focus to a tab\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a tab\n     * I HEAR it expresses its state (selected/pressed/checked)\n\n   * IF TAB ACTIVATION IS MANUAL when I use the left/right arrow keys I HEAR focus moves to other tabs and I use the spacebar or enter key to activate the tab\n\n   * IF TAB ACTIVATION IS AUTOMATIC when I use the left/right arrow keys I HEAR the tab is activated\n\n   * THEN when I use the tab key I HEAR focus moves to the activated tab panel\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focus on a tab\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies itself as a tab\n     * I HEAR it expresses its state (selected/pressed/checked)\n\n   * THEN when I doubletap with the tab in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tabs>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test tabs\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab key: Focus visibly moves to the active tab and then the open tab panel\n\n   * Left/right-arrow-keys (automatic activation): Moves focus to the next or previous tab and activates the tab\n\n   * Left/right-arrow-keys (manual activation): Moves focus to the next or previous tab\n\n   * Spacebar or enter (manual activation): Activates the focused tab\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the tabs and then the open tab panel\n\n   * Doubletap: Activates the tab\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n\n   * Role: It identifies itself as a tab\n\n   * State: It expresses its state (selected/pressed/checked)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tabs>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Tab groups\n\nTabs can be useful in scenarios where content is repetitive and doesn't require direct comparison. In these instances, they can effectively organize information without compromising functionality. When implemented thoughtfully, tabs can enhance accessibility by simplifying navigation and helping users quickly locate the information they need.\n\nHowever, tab groups can also pose challenges for accessibility and usability when not implemented effectively. Poorly designed tab groups often lead to a cluttered presentation of content, which can detract from the overall user experience rather than enhance it. Ensuring that tab groups are thoughtfully structured is crucial for making content more accessible and user-friendly.\n\n### Potential issues with tab groups:\n\n* **Accessibility**: Many screen reader users struggle with navigating tab groups using arrow keys, potentially missing crucial content.\n* **Interaction Rates**: Engagement is typically low for content beyond the first tab panel.\n* **Visibility of Content**: Content is hidden by default, and not all users are aware of how to access it.\n* **Comparative Information**: Users cannot easily compare information presented across multiple tabs.\n\n### Recommended alternatives:\n\nInstead of using tab groups, consider these alternatives:\n\n* Breaking the page into clear sections with concise copywriting.\n* Use expandable sections (accordions) for better organization.\n* Create separate pages for different topics\n\n### Tab activation types:\n\nTabs can be built to be activated **automatically** or **manually**.\n\n* **Automatic** tabs become activated immediately upon focus via a mouse click or the arrow keys.\n* **Manual** tabs can receive focus via the arrow keys, but require the user to press either `Enter` or `Space`, or click them with their mouse to activate them.\n\nYou can find additional guidance as well as examples of automatic and manually activated tab groups on the [WAI-ARIA Authoring Practices Guide Tabs Pattern](https://www.w3.org/WAI/ARIA/apg/patterns/tabs/) page.\n\n### Code considerations\n\n* **Tablist**: The main container for tabs requires `role=\"tablist\"`.\n* **Tabs**: Each tab within the `tablist` requires `role=\"tab\"`.\n* **Content Panels**: Each content area for a tab is called a `role=\"tabpanel\"`.\n* **Labels**: Each `tabpanel` needs to have an `aria-labelledby` attribute that points to the corresponding `tab` label.\n* **Control Association**: Each `tab` has an `aria-controls` attribute linking it to its corresponding `tabpanel`.\n* **Active Tab**: The currently selected tab has `aria-selected` set to true; all other tabs have it set to false.\n* **Orientation**: If the tablist is vertical, it has `aria-orientation` set to vertical. By default, it is horizontal.\n\n### Code Example\n\n```html\n<div class=\"tabs\">\n  <div role=\"tablist\">\n    <button role=\"tab\"\n            aria-selected=\"true\" \n            aria-controls=\"alpha-tab\" \n            id=\"alpha\">\n            Alpha\n    </button>\n    <button role=\"tab\" \n            aria-selected=\"false\" \n            aria-controls=\"bravo-tab\" \n            id=\"bravo\" \n            tabindex=\"-1\">\n            Bravo\n    </button>\n    <button role=\"tab\" \n            aria-selected=\"false\" \n            aria-controls=\"charlie-tab\" \n            id=\"charlie\" \n            tabindex=\"-1\">\n            Charlie\n    </button>\n  </div>\n  <div role=\"tabpanel\" \n       id=\"alpha-tab\" \n       aria-labelledby=\"alpha\"\n       tabindex=\"0\">\n    <p>Alpha is the first letter of the NATO alphabet</p>\n  </div>\n  <div role=\"tabpanel\" \n       id=\"bravo-tab\" \n       aria-labelledby=\"bravo\"\n       tabindex=\"0\">\n    <p>Bravo is the second letter of the NATO alphabet</p>\n  </div>\n  <div role=\"tabpanel\" \n       id=\"charlie-tab\" \n       aria-labelledby=\"charlie\"\n       tabindex=\"0\">\n    <p>Charlie is the third letter of the NATO alphabet</p>\n  </div>\n</div>\n```"
        },
        {
          "label": "Text Input",
          "name": "text-input",
          "type": "file",
          "generalNotes": "How to test a text input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a text input\n\nGIVEN THAT I am on a page with a text input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a text input I SEE focus is strongly visually indicated\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a text input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a text input\n     * I HEAR hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n     * I HEAR if applicable, it expresses its state (required, disabled / dimmed / unavailable)\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a text input\n     * I HEAR its purpose is clear\n     * I HEAR it identifies itself as a text input\n     * I HEAR hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n     * I HEAR if applicable, it expresses its state (required, disabled / dimmed / unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/text-input>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a text input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the input unless it's disabled\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input\n   * Keyboard: Keyboard appears\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a text input\n   * Group: Hints or errors are read after the label, related inputs include a group name (Ex: Enter your personal information)\n   * State: If applicable, it expresses its state (required, disabled / dimmed / unavailable)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/text-input>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/text-input/text-input_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/web/text-input/text-input_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/text-input/text-input_WindowsJawsChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/text-input/text-input_WindowsNvdaChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/text-input/text-input_MacOSVoiceOverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<label for=\"best-character-letter\">\n  The best Sesame Street character is:\n</label>\n<input type=\"text\" \n       id=\"best-character-letter\" \n       aria-describedby=\"best-character-letter-hint\">\n\n<div class=\"hint\" id=\"best-character-letter-hint\">\n  Example: Elmo, Big Bird, Cookie Monster\n</div>\n```\n\n<example>\n<label for=\"best-character-letter\">\n  The best Sesame Street character is:\n</label>\n<input type=\"text\" \n       id=\"best-character-letter\" \n       aria-describedby=\"best-character-letter-hint\">\n\n<div class=\"hint\" id=\"best-character-letter-hint\">\n  Example: Elmo, Big Bird, Cookie Monster\n</div>\n</example>\n\n### Required input\n\n```html\n<label for=\"second-nato-letter\">\n The second NATO letter is: <span>Required</span>\n</label>\n<input type=\"text\"\n       id=\"second-nato-letter\"\n       aria-required=\"true\"\n       required\n       value=\"Bravo\">\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<label for=\"second-nato-letter\">\n The second NATO letter is: <span>Required</span>\n</label>\n<input type=\"text\"\n       id=\"second-nato-letter\"\n       aria-required=\"true\"\n       required\n       value=\"Bravo\">\n</example>\n\n### Disabled but focusable input\n\n* There may be times that it is advantageous for the input to be disabled but still focusable\n* Fully disabled inputs are not focusable and may not be as discoverable in a form\n* Use `readonly` to prevent editing\n\n```html\n<label for=\"first-nato-letter\">\n  The first NATO letter is:\n</label>\n<input type=\"text\" \n       id=\"first-nato-letter\" \n       aria-disabled=\"true\"\n       value=\"Alpha\"\n       readonly>\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<label for=\"first-nato-letter\">\n  The first NATO letter is:\n</label>\n<input type=\"text\" \n       id=\"first-nato-letter\" \n       aria-disabled=\"true\"\n       value=\"Alpha\"\n       readonly>\n</example>\n\n### Fully disabled input\n\n* Fully `disabled` inputs are not focusable so may not be as discoverable in a form\n\n```html\n<label for=\"last-nato-letter\">\n  The last NATO letter is:\n</label>\n<input type=\"text\" \n       id=\"last-nato-letter\"\n       value=\"Zulu\"\n       disabled>\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<label for=\"last-nato-letter\">\n  The last NATO letter is:\n</label>\n<input type=\"text\" \n       id=\"last-nato-letter\"\n       value=\"Zulu\"\n       disabled>\n</example>\n\n### `readonly` input\n\n* Only use readonly when presenting **already submitted** information.\n* `readonly` inputs are focusable but not editable.\n* VoiceOver does not describe `readonly` attribute, so `aria-disabled` was added to reinforce that it's not editable.\n\n```html\n<label for=\"fourth-nato-letter\">\n  The fourth NATO letter is:\n</label>\n<input type=\"text\"\n       id=\"fourth-nato-letter\"\n       aria-readonly=\"true\"\n       aria-disabled=\"true\"\n       readonly\n       value=\"Delta\">\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<label for=\"fourth-nato-letter\">\n  The fourth NATO letter is:\n</label>\n<input type=\"text\"\n       id=\"fourth-nato-letter\"\n       aria-readonly=\"true\"\n       aria-disabled=\"true\"\n       readonly\n       value=\"Delta\">\n</example>\n\n### Email input\n\n* Setting `type=\"email\"` changes the keyboard for mobile app users\n\n```html\n<label for=\"email\">\n  Email address\n</label>\n<input id=\"email\"\n       type=\"email\"\n       autocomplete=\"email\"\n       spellcheck=\"false\"\n       aria-describedby=\"hint-email\">\n<div class=\"hint\" id=\"hint-email\">\n  We’ll never sell or share your information\n</div>\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<label for=\"email\">\n  Email address\n</label>\n<input id=\"email\"\n       type=\"email\"\n       autocomplete=\"email\"\n       spellcheck=\"false\"\n       aria-describedby=\"hint-email\">\n<div class=\"hint\" id=\"hint-email\">\n  We’ll never sell or share your information\n</div>\n</example>\n\n### Group of inputs\n\nAfter the screenreader focuses on each input, it will read the group name \"Enter your personal information\" after the input.\n\n```html\n<fieldset>\n  <legend>\n    Enter your personal information\n  </legend>\n\n  <label for=\"first-name\">\n    First name\n  </label>\n  <input type=\"text\" id=\"first-name\">\n\n  <label for=\"last-name\">\n    Last name\n  </label>\n  <input type=\"text\" id=\"last-name\">\n\n  <label for=\"username\">\n    Username\n  </label>\n  <input type=\"text\" id=\"username\">\n</fieldset>\n```\n\n<!-- TODO: The code examples will need styling updates to make look pretty  -->\n\n<example>\n<fieldset>\n  <legend>\n    Enter your personal information\n  </legend>\n\n  <label for=\"first-name\">\n    First name\n  </label>\n  <input type=\"text\" id=\"first-name\">\n\n  <label for=\"last-name\">\n    Last name\n  </label>\n  <input type=\"text\" id=\"last-name\">\n\n  <label for=\"username\">\n    Username\n  </label>\n  <input type=\"text\" id=\"username\">\n</fieldset>\n</example>\n\n## Developer notes\n\n### Name\n\n* Include `for=\"input-id\"` in each `<label>` label to associate it with the input\n* Use `aria-label=\"Input name\"` as a last resort if a `<label>` can't be used\n* Don't hide the label on focus\n\n### Role\n\n* Identifies as a text input\n\n### Group\n\n* Include `for=\"input-id\"` in each `<label>` label to associate it with the input\n* Use `<fieldset>` and `<legend>` to name a group of inputs\n\n### Focus\n\n* Focus must be visible\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships)\n* [WCAG 1.3.5 Identify Input Purpose (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/identify-input-purpose)\n* [WCAG 2.1.1 Keyboard (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/keyboard)\n* [WCAG SC 2.4.6 Headings and Labels (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/headings-and-labels.html)\n* [WCAG 3.3.1 Error Identification (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/error-identification)\n* [WCAG 3.3.3 Error Suggestion (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/error-suggestion)\n* [WCAG 3.3.2 Labels or Instructions (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/labels-or-instructions)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Textarea Multiline Input",
          "name": "textarea-multiline-input",
          "type": "file",
          "generalNotes": "How to test a textarea multiline input",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a textarea multiline input\n\nGIVEN THAT I am on a page with a textarea multiline input\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a textarea I SEE focus is strongly visually indicated\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND I use the tab key to move focus to a textarea\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies itself as a textarea\n     * I HEAR Hints or errors (ex: chars remaining) are read after the label, related inputs include a group name (ex: Contact us)\n     * I HEAR If applicable, it expresses its state (required, disabled / dimmed / unavailable)\n     * I HEAR Character counter updates dynamically after keypress and a short delay\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND I swipe to focusable elements on a textarea\n     * I HEAR Its purpose is clear\n     * I HEAR It identifies itself as a textarea\n     * I HEAR Hints or errors (ex: chars remaining) are read after the label, related inputs include a group name (ex: Contact us)\n     * I HEAR If applicable, it expresses its state (required, disabled / dimmed / unavailable)\n     * I HEAR Character counter updates dynamically after keypress and a short delay\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/textarea-multiline-input>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a textarea multiline input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves visibly to the textarea unless it's disabled\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the textarea\n   * Keyboard: Keyboard appears\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its purpose is clear\n   * Role: It identifies itself as a textarea\n   * Group: Hints or errors (ex: chars remaining) are read after the label, related inputs include a group name (ex: Contact us)\n   * State: If applicable, it expresses its state (required, disabled / dimmed / unavailable)\n   * Status: Character counter updates dynamically after keypress and a short delay\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/textarea-multiline-input>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\n* There are two containers in the HTML that have the same counter content. One of them is hidden from screen readers by use of `aria-hidden=\"true\"` and the other visually hidden container's content is dynamically updated after a slight pause. This is to ensure the screen reader does not interrupt the announcement of the key pressed with the announcement of the dynamic counter text update.\n* While the visible counter text container is hidden with `aria-hidden=\"true\"` it is still programmatically associated with the textarea by use of `aria-describedby`. This will ensure the text will be announced when the textarea receives focus.\n* **Delay the update** for dynamic `role=\"status\"` counter\n  * Use `setTimeout`to allow the accessibility tree and screen reader time to update in a logical fashion e.g. 1500ms\n* **Do not** reference the `role=\"status\"` element with aria-describedby\n  * This causes a bug in VoiceOver\n\n<!-- TODO - make sure to adjust .hljs-keyword styling -->\n\n```javascript\nconst textarea = document.getElementById('message');\nif(textarea) {\n    const chars = document.getElementById('currentChars');\n    const srOutputTarget = document.getElementById('sr-counter-target');\n    textarea.addEventListener(\"input\", event => {\n        const target = event.currentTarget;\n        const maxLength = target.getAttribute(\"maxlength\");\n        const currentLength = target.value.length;\n        // update the visible counter text\n        chars.innerHTML = maxLength - currentLength;\n        // update the visually hidden counter text\n        setTimeout(function() {\n            srOutputTarget.innerHTML = maxLength - currentLength;\n        },1000);\n    });\n}\n```\n\n```html\n<label for=\"message\">\n  Your message\n</label>\n\n<textarea \n  id=\"message\"\n  maxlength=\"50\"\n  aria-describedby=\"charcounter\">\n</textarea>\n\n<div role=\"status\">\n  <!-- Do not reference the status element with aria-describedby \n       Doing so will not work in VoiceOver -->\n  <div id=\"charcounter\" class=\"hint\">\n    <span id=\"currentChars\">50</span> \n    of 50\n    <span class=\"hidden\">\n      characters remaining\n    </span>\n  </div>\n</div>\n```\n\n<!-- TODO JS for countdown of characters -->\n\n<example>\n   <label for=\"message\">\n   Your message\n   </label>\n   <textarea \n   id=\"message\"\n   maxlength=\"50\"\n   aria-describedby=\"charcounter\">\n   </textarea>\n   <div role=\"status\">\n   <!-- Do not reference the status element with aria-describedby \n         Doing so will not work in VoiceOver -->\n   <div id=\"charcounter\" class=\"hint\">\n      <span id=\"currentChars\">50</span> \n      of 50\n      <span class=\"hidden\">\n         characters remaining\n      </span>\n   </div>\n   </div>\n</example>"
        },
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": "How to test a tidbit",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a tidbit\n\nGIVEN THAT I am on a page with a tidbit\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys I SEE the Tidbit scrolls into view\n   * WHEN when I use the tab key I SEE the focusable link (if present) receives keyboard focus - there is a highly visible focus ring\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys\n     * I HEAR the screen reader announces the text alternative for the info icon, such as \"Info\", \"Error\", \"Caution\", or \"Success\"\n     * I HEAR the screen reader announces the visual label for any nested controls and any additional context (e.g. \"Learn more Cats are amazing creatures\"). *Note:* Some screen readers require different navigational techniques to get the additional context to announce\n     * I HEAR it identifies the info icon as an image and the Tidbit heading as a heading\n     * I HEAR there is no grouping for the Tidbit\n   * WHEN when I use the tab key I HEAR the focusable link (if present) receives keyboard focus - there is a highly visible focus ring\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to contents of the Tidbit are accessed in this order: Icon, heading, paragraph, link\n     * I HEAR the screen reader announces the text alternative for the info icon, such as \"Info\", \"Error\", \"Caution\", or \"Success\"\n     * I HEAR the screen reader announces the visual label for any nested controls and any additional context (e.g. \"Learn more Cats are amazing creatures\"). *Note:* Some screen readers require different navigational techniques to get the additional context to announce\n     * I HEAR it identifies the info icon as an image and the Tidbit heading as a heading\n     * I HEAR there is no grouping for the Tidbit\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tidbit>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a tidbit\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: The Tidbit scrolls into view.\n   * Tab-key: The focusable link (if present) receives keyboard focus - there is a highly visible focus ring.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The individual contents of the Tidbit are accessed in this order: Icon, heading, paragraph, link.\n\n3. Listen to screenreader output on all devices\n\n   * Name: The screen reader announces the text alternative for the info icon. Such as \"Info\", \"Error\", \"Caution\", or \"Success\".\n   * Description: The screen reader announces the visual label for any nested controls and any additional context (e.g. \"Learn more Cats are amazing creatures\"). *Note:* Some screen readers require different navigational techniques to get the additional context to announce.\n   * Role: It identifies the info icon as an image and the Tidbit heading as a heading.\n   * Group: There is no grouping for the Tidbit.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tidbit>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nTypical Tidbit markup consists of an SVG icon, heading, paragraph text, and a link.\n\n### Standard Tidbit\n\n```html\n<div class=\"tidbit\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <h4 id=\"tidbit-heading\">Cats are amazing creatures</h4>\n        <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n        <a href=\"#\" aria-describedby=\"tidbit-heading\" class=\"tertiary\">Learn more</a>\n    </div>\n</div>\n```\n\n<example class=\"example example--contains-icon\">\n    <div class=\"tidbit\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <h4 id=\"tidbit-heading\">Cats are amazing creatures</h4>\n            <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n            <a href=\"#\" aria-describedby=\"tidbit-heading\" class=\"tertiary\">Learn more</a>\n        </div>\n    </div>\n</example>\n\n#### Standard Tidbit - Developer notes\n\n* Icon: Ensure that the info icon has a text alternative. Add `role=\"img\"` and `aria-label=\"Info\"` to the SVG. The icon used to convey the purpose of the tidbit should be communicated through the label of the icon, such as \"Error\", \"Caution\", \"Success\", or \"Info\".\n* Heading: Ensure the bold text found ahead of the Tidbit paragraph text is a heading element. Consider the hiearchy of the page when choosing the heading level.\n* Link: If the link in the Tidbit is using generic text, such as \"Learn more\" or \"More info\", ensure that it is programmatically associated with the nearby heading with `aria-describedby`. The `aria-describedby` value will require the `ID` with a matching unique value on the heading element at the top of the Tidbit.\n\n***\n\n### Tidbit with no heading\n\n```html\n<div class=\"tidbit\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n        <a href=\"#\" class=\"tertiary\">Learn more about cats</a>\n    </div>\n</div>\n```\n\n<example>\n    <div class=\"tidbit\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n            <a href=\"#\" class=\"tertiary\">Learn more about cats</a>\n        </div>\n    </div>\n</example>\n\n#### Tidbit with no heading - Developer notes\n\n* Icon: Ensure that the info icon has a text alternative. Add `role=\"img\"` and `aria-label=\"Info\"` to the SVG. The icon used to convey the purpose of the tidbit should be communicated through the label of the icon, such as \"Error\", \"Caution\", \"Success\", or \"Info\".\n* Link: Ensure the link text is meaningful. Avoid generic \"Learn more\" \"Read more\" links when there is no heading.\n\n***\n\n### Tidbit with no heading no tertiary link\n\n```html\n<div class=\"tidbit\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n    </div>\n</div>\n```\n\n<example>\n    <div class=\"tidbit\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Info\" xmlns=\"http://www.w3.org/2000/svg\" height=\"1.5em\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <p>There are over 500 million domestic cats in the world. Cats and humans have been assocaiated for nearly 10,000 years. Cats conserve energy by sleepign for an average of 13-14 hours a day. Cats have flexible bodies and teeth adapted for hunting small animals, such as mice and rats.</p>\n        </div>\n    </div>\n</example>\n\n#### Tidbit with no heading no tertiary link - Developer notes\n\n* A tidbit without an action button is used to provide additional information or context about a particular feature or piece of content.\n* Icon: Ensure that the info icon has a text alternative. Add `role=\"img\"` and `aria-label=\"Info\"` to the SVG. The icon used to convey the purpose of the tidbit should be communicated through the label of the icon, such as \"Error\", \"Caution\", \"Success\", or \"Info\".\n\n***\n\n### Tidbit - Error example\n\n```html\n<div class=\"tidbit error\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Error\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <h4 id=\"tidbit-heading-error\">Abess, The Comedy of Errors</h4>\n        <p>And thereof came it that the man was mad:\n            The venom clamours of a jealous woman\n            Poison more deadly than a mad dog's tooth.\n            It seems, his sleeps were hinder'd by thy railing,\n            And thereof comes it that his head is light. </p>\n        <a href=\"#\" aria-describedby=\"tidbit-heading-error\" class=\"tertiary\">Learn more</a>\n    </div>\n</div>\n```\n\n<example>\n    <div class=\"tidbit error\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Error\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <h4 id=\"tidbit-heading-error\">Abess, The Comedy of Errors</h4>\n            <p>And thereof came it that the man was mad:\n                The venom clamours of a jealous woman\n                Poison more deadly than a mad dog's tooth.\n                It seems, his sleeps were hinder'd by thy railing,\n                And thereof comes it that his head is light. </p>\n            <a href=\"#\" aria-describedby=\"tidbit-heading-error\" class=\"tertiary\">Learn more</a>\n        </div>\n    </div>\n</example>\n\n### Tidbit - Caution example\n\n```html\n<div class=\"tidbit caution\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Caution\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <h4 id=\"tidbit-heading-warning\">Polonius, The Tragedy of Hamlet</h4>\n        <p>Marry, well bethought!\n         'Tis told me he hath very oft of late\n         Given private time to you, and you yourself\n         Have of your audience been most free and bounteous.\n         If it be so- as so 'tis put on me,\n         And that in way of caution- I must tell you\n         You do not understand yourself so clearly\n         As it behooves my daughter and your honour.\n         What is between you? Give me up the truth. </p>\n        <a href=\"#\" aria-describedby=\"tidbit-heading-warning\" class=\"tertiary\">Learn more</a>\n    </div>\n</div>\n```\n\n<example>\n    <div class=\"tidbit caution\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Caution\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <h4 id=\"tidbit-heading-warning\">Polonius, The Tragedy of Hamlet</h4>\n            <p>Marry, well bethought!\n            'Tis told me he hath very oft of late\n            Given private time to you, and you yourself\n            Have of your audience been most free and bounteous.\n            If it be so- as so 'tis put on me,\n            And that in way of caution- I must tell you\n            You do not understand yourself so clearly\n            As it behooves my daughter and your honour.\n            What is between you? Give me up the truth. </p>\n            <a href=\"#\" aria-describedby=\"tidbit-heading-warning\" class=\"tertiary\">Learn more</a>\n        </div>\n    </div>\n</example>\n\n### Tidbit - Success example\n\n```html\n<div class=\"tidbit success\">\n    <div class=\"icon\">\n        <svg role=\"img\" aria-label=\"Success\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM337 209L209 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L303 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/></svg>\n    </div>\n    <div class=\"content\">\n        <h4 id=\"tidbit-heading-success\">That went well!</h4>\n        <p>'They met me in the day of success: and I have\n         learned by the perfectest report, they have more in\n         them than mortal knowledge. When I burned in desire\n         to question them further, they made themselves air,\n         into which they vanished. Whiles I stood rapt in\n         the wonder of it, came missives from the king, who\n         all-hailed me 'Thane of Cawdor;' by which title,\n         before, these weird sisters saluted me, and referred\n         me to the coming on of time, with 'Hail, king that\n         shalt be!' This have I thought good to deliver\n         thee, my dearest partner of greatness, that thou\n         mightst not lose the dues of rejoicing, by being\n         ignorant of what greatness is promised thee. Lay it\n         to thy heart, and farewell.'</p>\n        <a href=\"#\" aria-describedby=\"tidbit-heading-success\" class=\"tertiary\">Learn more</a>\n    </div>\n</div>\n```\n\n<example>\n    <div class=\"tidbit success\">\n        <div class=\"icon\">\n            <svg role=\"img\" aria-label=\"Success\" height=\"1.5em\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM337 209L209 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L303 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z\"/></svg>\n        </div>\n        <div class=\"content\">\n            <h3 id=\"tidbit-heading-success\">Lady Macbeth, Macbeth</h3>\n            <p>'They met me in the day of success: and I have\n            learned by the perfectest report, they have more in\n            them than mortal knowledge. When I burned in desire\n            to question them further, they made themselves air,\n            into which they vanished. Whiles I stood rapt in\n            the wonder of it, came missives from the king, who\n            all-hailed me 'Thane of Cawdor;' by which title,\n            before, these weird sisters saluted me, and referred\n            me to the coming on of time, with 'Hail, king that\n            shalt be!' This have I thought good to deliver\n            thee, my dearest partner of greatness, that thou\n            mightst not lose the dues of rejoicing, by being\n            ignorant of what greatness is promised thee. Lay it\n            to thy heart, and farewell.'</p>\n            <a href=\"#\" aria-describedby=\"tidbit-heading-success\" class=\"tertiary\">Learn more</a>\n        </div>\n    </div>\n</example>\n\n#### Tidbit with Error or Caution or Success - Developer notes\n\n* Icon: Ensure that the info icon has a text alternative. Add `role=\"img\"` and `aria-label=\"Info\"` to the SVG. The icon used to convey the purpose of the tidbit should be communicated through the label of the icon, such as \"Error\", \"Caution\", or \"Success\".\n* Do not use Tidbit error variants as a substitute for traditional inline form field validation errors. Each form field should have its own proper inline error validation.\n\n***\n\n## Developer Notes\n\n### Name\n\n* The icon is an informative image and should have a text alternative of \"Info\", \"Error\", \"Caution\", or \"Success\".\n\n### Role\n\n* The \"i\" icon is an image due to the use of `role=\"img\"` on the SVG.\n* The bold text found the top of the Tidbit has a role of heading due to the use of an `<h2>` element.\n\n## Documentation\n\n* [WCAG 2.4.4 Link Purpose](https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html)\n* [WCAG 1.1.1 Non-text Content](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)"
        },
        {
          "label": "Toast Snackbar",
          "name": "toast-snackbar",
          "type": "file",
          "generalNotes": "How to test a toast snackbar",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toast snackbar\n\nGIVEN THAT I am on a page with a toast snackbar\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use features that trigger the toast I SEE the toast (BUT focus DOES NOT transfer automatically when the alert appears)\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use features that trigger the toast\n     * I HEAR the toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n     * I HEAR it identifies itself as an alert or status when it appears\n     * I HEAR if it is possible to close the toast, focus then returns to a logical place in the page\n     * I HEAR it remains open until closed by user\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I use features that trigger the toast snackbar\n     * I HEAR the toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n     * I HEAR it identifies itself as an alert or status when it appears\n     * I HEAR if it is possible to close the toast, focus then returns to a logical place in the page\n     * I HEAR it remains open until closed by user\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toast-snackbar>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toast snackbar\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves in logical order to buttons or links inside the toast\n   * Space: Any buttons inside are activated\n   * Enter: Any links or buttons inside are activated\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves in logical order to the toast\n   * Doubletap: This typically activates most elements in the toast\n\n3. Listen to screenreader output on all devices\n\n   * Name: The toast is read when it appears (BUT focus DOES NOT transfer automatically when the toast appears)\n   * Role: It identifies itself as an alert or status when it appears\n   * Group: If it is possible to close the toast, focus then returns to a logical place in the page\n   * State: It remains open until closed by user\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toast-snackbar>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Rethinking Toast Snackbars\n\nToast snackbars might seem like an easy way to provide feedback, but they’re often not the best fit for accessible and user-friendly design. Here’s why:\n\n* Accessibility Limitations: Because snackbars are custom HTML elements, they lack semantic meaning and can be challenging for assistive technologies like screen readers.\n* Missed Messages: If a user doesn’t catch a snackbar in time, it’s difficult to go back and review the information.\n* Auditory Clutter: For screen readers, snackbars can create unnecessary noise, especially if they appear frequently or unexpectedly.\n* Unclear Rules: Like tooltips, snackbars are tricky to define and test consistently in design criteria.\n\n### Instead use an inline element to indicate a change\n\n* Inline Feedback: Inject a success message *in proximity* to the updated control\n* Accessible Undo/Redo Options: Place these buttons in clear, easy-to-navigate locations.\n* Thoughtful Confirmations: Use a confirmation screen for critical actions or when users are exiting an important flow.\n\n<!-- TODO: Needs JS support to activate the toast!\n\n<example>\n<fieldset>\n  <legend>Marketing preferences</legend>\n  <input type=\"checkbox\" role=\"switch\" id=\"spam\" aria-describedby=\"hint-spam-message\" checked=\"\">\n  <label for=\"spam\">\n   Send me constant spam\n   </label>\n  <div id=\"hint-spam\" role=\"alert\" class=\"alert notification inert\">\n    <div id=\"hint-spam-message\">\n      - Use JS to inject the alert here (comment out in the future)\n    </div>     \n  </div>\n</fieldset>\n</example> -->\n\n### When Toast Snackbars Don’t Work:\n\nThere are certain scenarios where snackbars simply aren’t the right tool:\n\n* Critical or Irreversible Actions: For example, “Unsend this message” or “Confirm payment.” These require deliberate, visible feedback\n* Blocking Error Messages: Important errors should grab attention and provide clear guidance—not rely on a fleeting message.\n* Page-Load Alerts: Automatically showing messages on page load can confuse users, particularly those using screen readers.\n\n### Timing\n\nIf you find a situation where a toast snackbar is truly necessary:\n\n* Avoid auto-dismiss wherever possible.\n* If dismissal must be automatic, make sure the [timing is adjustable to meet WCAG 2.2.1 standards](https://www.w3.org/WAI/WCAG21/Understanding/timing-adjustable.html).\n\n## Only use toast snackbars to *reinforce* updates\n\n* If using a snackbar is unavoidable, it must only be used for non-critical messaging.\n* The status injected must also be discernable on the page *without the snackbar*.\n\n### Practical example\n\nGiven that I am on a dynamic single page application\n\n* WHEN the customer changes the state of a toggle to OFF or ON\n  * THEN the toast appears to *reinforce* that the change has been saved\n  * AND the customer can confirm this is true from the toggle itself\n\n## Code example\n\n```html\n<div id=\"toast\">\n  <span id=\"toast-message\" role=\"status\">\n    <!-- Inject snackbar message here -->\n  </span>\n  <button type=\"button\">\n    Dismiss\n  </button>\n</div>\n```"
        },
        {
          "label": "Toggle Switch",
          "name": "toggle-switch",
          "type": "file",
          "generalNotes": "How to test a toggle switch",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toggle switch\n\nGIVEN THAT I am on a page with a toggle switch\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a switch I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar to activate the switch I SEE the state is changed\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a switch\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies its role of switch, toggle button or checkbox\n     * I HEAR hints or errors are read after the label and related inputs include a group name (Ex: Account settings)\n     * I HEAR it expresses its state (on/off, checked/unchecked, disabled/dimmed)\n   * THEN when I use the spacebar to activate the switch I HEAR the state is changed\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a switch input\n     * I HEAR its label and purpose is clear\n     * I HEAR it identifies its role of switch, toggle button or checkbox\n     * I HEAR Hints or errors are read after the label and related inputs include a group name (Ex: Account settings)\n     * I HEAR it expresses its state (on/off, checked/unchecked, disabled/dimmed)\n   * THEN when I doubletap with the switch in focus I HEAR the state is changed\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toggle-switch>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a toggle switch\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the switch\n   * Spacebar: Toggles the switch between states\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state\n   * Doubletap: Element toggles between states\n\n3. Listen to screenreader output on all devices\n\n   * Name: Its label and purpose is clear\n   * Role: It identifies its role of switch, toggle button or checkbox\n   * Group: Hints or errors are read after the label and related inputs include a group name (Ex: Account settings)\n   * State: It expresses its state (on/off, checked/unchecked, disabled/dimmed)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toggle-switch>",
          "criteria": null,
          "videos": "<!-- TODO: We don't have an Android Talkback example and should! -->\n\n### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/web/toggle-switch/toggle-switch_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows JAWS Chrome\n\n<video controls>\n  <source src=\"media/video/web/toggle-switch/toggle-switch_WindowsJawsChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Windows NVDA Chrome\n\n<video controls>\n  <source src=\"media/video/web/toggle-switch/toggle-switch_WindowsNvdaChrome.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### MacOS VoiceOver Safari\n\n<video controls>\n  <source src=\"media/video/web/toggle-switch/toggle-switch_MacOsVoiceOverSafari.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use as much semantic HTML as possible\n\n* This semantic HTML contains all accessibility features by default, and only requires the addition of `role=\"switch\"`.\n* It uses [CSS pseudo attributes](https://github.com/tmobile/magentaA11y/blob/main/_sass/modules/_input-switch.scss) to create the toggle switch indicator, no Javascript\n\n```html\n<fieldset>\n  <legend>Privacy settings:</legend>\n  <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"locationSwitch\">\n  <label for=\"locationSwitch\">Share my location</label>\n\n  <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"emailSwitch\">\n  <label for=\"emailSwitch\">Share my email</label>\n\n  <input class=\"hidden-visually\"\n         type=\"checkbox\"\n         role=\"switch\"\n         id=\"photosSwitch\"\n         checked>\n  <label for=\"photosSwitch\">Share my photos</label>\n</fieldset>\n```\n\n<example>\n   <fieldset class=\"switch\">\n      <legend>Privacy settings:</legend>\n      <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"locationSwitch\">\n      <label for=\"locationSwitch\">Share my location</label>\n      <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"emailSwitch\">\n      <label for=\"emailSwitch\">Share my email</label>\n      <input class=\"hidden-visually\"\n               type=\"checkbox\"\n               role=\"switch\"\n               id=\"photosSwitch\"\n               checked>\n      <label for=\"photosSwitch\">Share my photos</label>\n   </fieldset>\n</example>\n\n### Disabled and focusable\n\nIf it's helpful for screenreaders to perceive a disabled toggle, use `aria-disabled=\"true\"` and prevent click events with scripting.\n\n```html\n<fieldset>\n  <legend>Choose your cookies</legend>\n\n  <input class=\"hidden-visually\"\n         type=\"checkbox\"\n        role=\"switch\" \n        id=\"mandatoryCookies\" \n        aria-disabled=\"true\" \n        checked>\n  <label for=\"mandatoryCookies\">Cookies required for the site to function</label>\n  \n  <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"raisinCookies\" aria-disabled=\"true\" >\n  <label for=\"raisinCookies\">Raisin cookies</label>\n\n  <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"optionalCookies\" checked>\n  <label for=\"optionalCookies\">Optional marketing cookies</label>\n\n</fieldset>\n```\n\n<!-- TODO need to preventDefaut for aria-disabed and figure out why checked state cannot be changed -->\n\n<example>\n   <fieldset class=\"switch\">\n      <legend>Choose your cookies</legend>\n      <input class=\"hidden-visually\"\n            type=\"checkbox\"\n            role=\"switch\" \n            id=\"mandatoryCookies\" \n            aria-disabled=\"true\" \n            checked>\n      <label for=\"mandatoryCookies\">Cookies required for the site to function</label>    \n      <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"raisinCookies\" aria-disabled=\"true\">\n      <label for=\"raisinCookies\">Raisin cookies</label>\n      <input class=\"hidden-visually\" type=\"checkbox\" role=\"switch\" id=\"optionalCookies\" checked>\n      <label for=\"optionalCookies\">Optional marketing cookies</label>\n   </fieldset>\n</example>\n\n### Disabled and not focusable\n\nUsing the `disabled` attribute will prevent the input from being clickable, but will also prevent it from being focusable, making it more difficult to discover for screenreaders.\n\n```html\n<input type=\"checkbox\"\n        role=\"switch\"\n        id=\"deltaSwitch\"\n        disabled\n        checked>\n<label for=\"deltaSwitch\">Delta</label>\n```\n\n### Using a `<button>` as a switch\n\nThis `<button>` toggle has focus and keyboard criteria built in. It requires the addition of `role=\"switch\"` and scripting to toggle `aria-checked=\"true/false\"`.\n\n```html\n<button role=\"switch\" aria-checked=\"true\">\n  Alpha\n</button>\n```\n\n### When you can't use semantic HTML\n\nThis custom switch requires extra attributes and keyboard event listeners.\n\n```html\n<div role=\"switch\" tabindex=\"0\" aria-checked=\"true\">\n  Alpha\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* `label` text should describe the input purpose\n* Use `aria-describedby=\"hint-id\"` for hints or additional descriptions\n* `aria-label=\"Switch [purpose]\"` can also be used (as a last resort)\n\n### Role\n\n* Use `role=\"switch\"`\n\n### Group\n\n* Semantic HTML\n  * `<fieldset>` should wrap a switch group\n  * `<legend>` should describe the group's purpose\n  * Each `<label>` must include `for=\"input-id\"` to be associated with its input\n* Custom elements\n  * Use `role=\"group\"` in the place of fieldset\n  * Use `aria-labelledby=\"label-id\"` to associate an element as a label\n  * `aria-label=\"Group purpose\"` can also be used if there's no label with an `id`\n\n### State\n\n* Semantic HTML\n  * Use `checked` for native HTML\n  * Use the `disabled` state for inactive switches\n* Custom element\n  * Use `aria-checked=\"true/false\"` to express state\n  * Use `aria-disabled=\"true\"` to declare inactive elements\n  * Use `aria-readonly=\"true\"` to declare a switch can't be edited\n\n### Focus\n\n* Focus must be visible"
        },
        {
          "label": "Tooltip",
          "name": "tooltip",
          "type": "file",
          "generalNotes": "How to test a tooltip",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n\n   * I use the tab key to enter the web browser window\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n   * I swipe to focusable elements in the header\n\n   * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tooltip>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the header or navigation\n\n   * Tab: Nothing, headings are not focusable unless they are actionable\n\n   * Arrow-keys: Headings are browsed\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves directly to the header or navigation\n\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n\n   * It is discoverable with screenreader shortcuts as header/banner landmark\n\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/tooltip>",
          "criteria": null,
          "videos": "* Videos go here\n  <video controls>\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n\n</video>",
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page."
        },
        {
          "label": "Video Audio Player",
          "name": "video-audio-player",
          "type": "file",
          "generalNotes": "How to test a video/audio player",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a video/audio player\n\nGIVEN THAT I am on a page with a video/audio player\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a control I SEE focus is strongly visually indicated\n   * THEN when I use the spacebar and/or enter key to activate the button I SEE the intended action occurs\n   * THEN when I use the arrow keys (left/right) I SEE the media fast forwards/reverses\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a control\n     * I HEAR the video control purpose is clear (play, pause, stop)\n     * I HEAR video controls identify as button, switch etc.\n     * I HEAR audio content never autoplays\n     * I HEAR it expresses it state if applicable (pressed, expanded, disabled)\n   * THEN when I use the spacebar and/or enter key to activate the button I HEAR the intended action occurs\n   * THEN when I use the arrow keys (left/right) I HEAR the media fast forwards/reverses\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n\n     * I swipe to focusable to a video control\n\n     * I HEAR the video control purpose is clear (play, pause, stop)\n\n     * I HEAR video controls identify as button, switch etc.\n\n     * I HEAR audio content never autoplays\n\n     * I HEAR it expresses it state if applicable (pressed, expanded, disabled)\n   * Then when I doubletap with the video control in focus I HEAR the intended action occurs\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/video-audio-player>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a video/audio player\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to each control\n   * Spacebar: Activates the control button\n   * Enter: Activates the control button\n   * Arrow-keys: Fast forward/reverse media\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus visibly moves to each control\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n\n   * Name: The video control purpose is clear (play, pause, stop)\n   * Role: Video controls identify as button, switch etc.\n   * Group: Audio content never autoplays\n   * State: It expresses it state if applicable (pressed, expanded, disabled)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/video-audio-player>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer notes\n\n### Autoplay can be very disruptive or hurt people\n\nLet people choose if they're subjected to video content.\n\n* For people using a screen reader, it unexpectedly interferes with their ability to hear/control their machine\n* For people with cognitive differences, it can make it impossible to focus\n* For people with light sensitivity or vestibular disorders, some video content can cause illness\n\n### Is it ever okay?\n\n* Media with audio must not autoplay\n* Silent video can autoplay under these conditions:\n  * It must stop after 5 seconds\n  * The video features accessible controls\n  * Autoplay is disabled when device reduce motion settings are activated\n\n## Code examples\n\n### A heading can serve as a name\n\n```html\n<h2>The Princess Bride</h2>\n<video-embed>\n</video-embed>\n```\n\n### An `aria-label=\"Media title\"` can also be used\n\n```html\n<video-embed aria-label=\"The Princess Bride\"></video-embed>\n```\n\n### Name\n\n* A heading (`<h1>` `<h2>` `<h3>`) above the media can serve as a name\n* `aria-label=\"Media title\"` on a wrapper element can also be used\n\n### Role\n\n* Controls must identify as buttons, switches, etc.\n* There are accessible video embed options available\n\n### Group\n\n* Captions are mandatory for spoken audio content\n  * Do not rely on auto-captioning\n  * This may require the manual creation of a VTT file\n  * There are many options online that will create these for you\n* Transcripts should be HTML based (not a PDF)\n\n### State\n\n* Controls must identify their state (pressed, checked, selected, value, etc)\n\n### Focus\n\n* Focus must be visible"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Basic Web Page",
          "name": "basic-web-page",
          "type": "file",
          "generalNotes": "How to test a basic web page",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\nGIVEN THAT I am on a page with a basic web page\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the keyboard to open a new web page I SEE the page has a unique logical title in the browser tab\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the keyboard to open a new web page\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to enter from the web browser tabs\n     * I HEAR The page has a unique logical title in the browser tab\n     * I HEAR Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n   * THEN when I change orientations I HEAR content is accessible in landscape or portrait orientation\n\n4. Device OS settings\n   * WHEN I use zoom/pinch THEN I see text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a basic web page\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Enters the page and visibly focuses only interactive elements\n   * Zoom: Content zooms up to 200%\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within page\n   * Pinch/stretch: Content zooms up to 200%\n   * Orientation: Content is accessible in landscape or portrait orientation\n\n3. Listen to screenreader output on all devices\n\n   * Name: The page has a unique logical title in the browser tab\n   * Role: Major landmarks are discoverable with screenreader shortcuts: header/banner, navigation, main and footer/content info landmarks\n\n4. Device OS settings\n\n   * Zoom/pinch: text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/basic-web-page>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Validate your code\n\nUse [HTML validation](https://validator.w3.org/nu/) as the foundation for ensuring your page works for everyone.\n\n## Code Examples\n\n### Declare a language\n\nThis aids a screen reader in reading a content in the proper language.\n\n```html\n<html lang=\"en\"></html>\n```\n\n### Give your page a unique title\n\nEach page must have unique `<title>` in the `<head>`:\n\n* This includes single-page dynamic apps *if* the URL changes during the user journey.\n* Do not use the `|` pipe character as a divider (it is read by screen readers).\n\n```html\n<head>\n  <title>Page title - Website title</title>\n</head>\n```\n\n### Ensure users can zoom in\n\nPeople with low vision need the ability to enlarge the page on mobile and desktop.\n\n```html\n<head>\n  <meta\n    name=\"viewport\"\n    content=\"width=device-width, initial-scale=1\"\n  />\n</head>\n```\n\n### Structure your page with landmarks\n\nLandmarks give structure to the page for the screenreader user to be able to navigate the page by major sections.\n\nEach page must include:\n\n* [Header](https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark)\n* [Nav](https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark)\n* [Main]() TODO\n* [Footer]() TODO\n\n```html\n<header>\n  <!-- Contains the site title -->\n</header>\n<nav>\n  <!-- Primary navigation menu-->\n</nav>\n<main>\n  <!-- Main content -->\n</main>\n<footer>\n  <!-- Site map and legal info -->\n</footer>\n```"
        },
        {
          "label": "Footer Landmark",
          "name": "footer-landmark",
          "type": "file",
          "generalNotes": "How to test a footer landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\nGIVEN THAT I am on a page with a footer landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a interactive element in the footer I SEE focus is strongly visually indicated\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a interactive element in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the footer\n     * I HEAR It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n     * I HEAR It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a footer landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the footer\n   * Tab: Links and buttons within the footer are focusable\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within footer.\n   * Doubletap: This typically activates most elements.\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as a footer or contentinfo landmark\n   * Group: It typically contains copyright information, navigation links, and privacy statements.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/footer>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#example-footer\">Skip to example footer</a>\n<footer tabindex=\"-1\" id=\"example-footer\">\n  <nav aria-label=\"Site map\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n  </nav>\n  © 2021\n</footer>\n```\n\n<example>\n    <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example footer</a>\n    <footer tabindex=\"-1\" id=\"destination\">\n    <nav aria-label=\"Site map\">\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/about/\">About</a></li>\n            <li><a href=\"/contact/\">Contact</a></li>\n        </ul>\n    </nav>\n    © 2025\n    </footer>\n</example>\n\n### When you can't use semantic HTML\n\nThis custom footer requires extra attributes.\n\n```html\n<div role=\"contentinfo\" tabindex=\"-1\" id=\"example-footer\">\n   &copy; 2025 Site Name\n</div>\n```\n\n## Developer notes\n\n### Name\n\n* Typically doesn't have a name, unless there are multiple footers.\n\n### Role\n\n* Identifies itself as a footer or contentinfo landmark.\n* If a non-semantic element must be used (like a `<div>`) use `role=\"contentinfo\"`.\n\n### Group\n\n* Typically contains copyright information, navigation links, site map, and privacy statements.\n\n### Focus\n\n* Can be targeted with a skip link, but isn't focusable with the tab key\n* Use `tabindex=\"-1\"` to make the footer targetable with a skip link."
        },
        {
          "label": "Form",
          "name": "form",
          "type": "file",
          "generalNotes": "How to test a web form for accessibility.",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\nGIVEN THAT I am on a page with a web form\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to move focus to a form field\n     * I SEE focus is visually indicated\n     * I SEE the focus moves in a logical order\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to inputs inside the form\n     * I HEAR If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name\n     * I HEAR It is discoverable with screenreader shortcuts as a form landmark along with its name\n     * I HEAR the screenreader switch from browse shortcuts to forms shortcuts\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on inputs inside the form\n     * I HEAR If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name\n     * I HEAR It is discoverable with screenreader shortcuts as a form landmark along with its name\n     * I HEAR the screenreader switch from browse shortcuts to forms shortcuts\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/form>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a web form for accessibility\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Not commonly used for form entry, but useful for jumping to a form landmark.\n   * Tab: Focus moves to each form control in logical order, strong visual focus indicator.\n   * Forms mode: Enabled when screen reader lands on a form field.\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves to form controls inside the form.\n   * Doubletap: Activates controls as expected.\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as a form landmark along with its name\n   * Name: If multiple forms are present (Ex: Search, Sign in, Newsletter subscription), the form must have a name.\n   * Group: Groups of related fields are identified with fieldset/legend or aria attributes.\n   * Instructions: Presented before the form or inline, announced in order.\n   * Errors: Errors are announced when inputs are invalid.\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/form>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Building accessible forms\n\n### Do not auto focus inputs\n\n* Automatically moving focus to an input field is very confusing for people using assistive technology.\n\n### Group inputs\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* Sign in\n* Shipping address\n* Payment information\n\n### Error handling\n\n* Individual inputs must have [programmatically described errors](https://www.magentaa11y.com/checklist-web/hint-help-error/) read by the screen reader on focus.\n* For long forms, list all errors in an [alert](https://www.magentaa11y.com/checklist-web/alert/) with links back to each invalid input on submission attempts.\n\n## UX guidance\n\n### Affordance: field width indicates the expected input\n\nForm field width should afford the user space to enter the characters that will be required. Do not arbitrarily limit the width of names, usernames, passwords or emails.\n\nPractical Examples\n\n* Middle initial should be wide enough to accommodate 1 character\n* State abbreviations should be wide enough to accommodate 2 characters\n* Zip code must be wide enough to accommodate 5 characters\n* Pin numbers reflect the number of digits expected\n\n### Why we stack inputs\n\nDo not put forms in multiple columns.\n\n* People are accustomed to scrolling vertically. There is no advantage to making the page take up less vertical space.\n* People with low vision may be using a zoom tool, enlarging the view of their screen and thus only seeing a portion of the form. If there is a column on the right side, it will be difficult to discover the fields.\n* Do not place submit buttons in a sidebar unless there is also a submit button at the bottom of the form\n\n### Why we use autocomplete\n\n* Utilizing [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/autocomplete) allows users automated assistance in filling out form field values.\n* Autocomplete is helpful for all customers leading to a speedier conversion\n* For those with motor disabilities, it eliminates the need to laboriously enter information\n\n## Code examples\n\n### Use semantic HTML\n\n```html\n<form aria-label=\"Sign in\">\n  <fieldset>\n    <legend>Sign in</legend>\n    <label for=\"username\">Username</label>\n    <input type=\"text\" id=\"username\">\n    <button type=\"submit\">Sign in</button>\n  </fieldset>\n</form>\n```\n\n<example>\n    <form aria-label=\"Sign in\">\n      <fieldset>\n        <legend>Sign in</legend>\n        <label for=\"username\">Username</label>\n        <input type=\"text\" id=\"username\">\n        <button class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"submit\">Sign in</button>\n      </fieldset>\n    </form>\n</example>\n\n### Credit card information\n\nUse `fieldset` and `legend` to group related fields, such as:\n\n* This form uses minimal unobtrusive masking to make the credit card number more readable. (When done poorly, masking can can cause the field to be read repeatedly as the mask refreshes)\n* Autofill attributes to help customers complete fields with less effort.\n* Using `inputmode=\"numeric\"` brings up the numeric keyboard on mobile devices making entry easier.\n\n```html\n<form aria-label=\"Payment information\">\n  <fieldset>\n    <legend>\n      Enter your payment information\n    </legend>\n      \n    <div class=\"card-number-container\">\n      <label for=\"card-number\">Card Number</label>\n        \n      <button type=\"button\" class=\"cc-camera secondary\">\n         <span class=\"hidden-visually\">Use camera to</span> \n         Scan\n         <span class=\"hidden-visually\">card number</span>\n      </button>\n        \n      <input type=\"text\" \n              name=\"cardnumber\" \n              id=\"card-number\" \n              autocomplete=\"cc-number\"\n              inputmode=\"numeric\"\n              pattern=\"[0-9]*\"\n              aria-describedby=\"description-card-number\"\n              required>\n\n      <div id=\"description-card-number\" class=\"hint secure-icon\">\n        Secure form protected by 8 bit encryption\n      </div>\n    </div>\n      \n    <fieldset>\n      <legend>\n        Expiration <span aria-hidden=\"true\">(MM YY)</span>\n      </legend>\n      <div class=\"expiry-container\">\n          \n        <label class=\"hidden-visually\" for=\"cc-exp-month\">Expiration Month (MM)</label>\n        <input type=\"text\"\n              maxlength=\"2\"  \n              name=\"ccmonth\" \n              id=\"cc-exp-month\"\n              inputmode=\"numeric\"\n              autocomplete=\"cc-exp-month\"\n              pattern=\"[0-9]*\"\n              required>\n          \n        <label class=\"hidden-visually\" for=\"cc-exp-year\">Expiration Year (YY)</span></label>\n        <input type=\"text\"\n              maxlength=\"2\"  \n              name=\"ccyear\" \n              id=\"cc-exp-year\"\n              inputmode=\"numeric\"\n              autocomplete=\"cc-exp-year\"\n              pattern=\"[0-9]*\"\n              required>\n      </div>\n    </fieldset>\n\n    <label for=\"cc-name\">Name on card</label>\n    <input type=\"text\"\n          name=\"ccname\" \n          id=\"cc-name\"\n          autocomplete=\"cc-name\"\n          maxlength=\"19\" \n          required>\n\n    <label for=\"cc-cvc\">Security code</label>\n    <input type=\"text\" \n            maxlength=\"5\" \n            name=\"cvc\" \n            id=\"cc-cvc\"  \n            autocomplete=\"cc-csc\"\n            inputmode=\"numeric\"\n            pattern=\"[0-9]*\"\n            aria-describedby=\"description-cc-cvc\"\n            required>\n    <div id=\"description-cc-cvc\" class=\"hint\">\n      <button type=\"button\" class=\"inline-link\">What's a security code?</button>\n          \n    </div>\n  </fieldset>\n</form>\n```\n\n<example>\n    <form aria-label=\"Payment information\">\n        <fieldset>\n            <legend>Enter your payment information</legend>\n            <div class=\"card-number-container\">\n                <label for=\"card-number\">Card Number</label>\n                <button type=\"button\" class=\"cc-camera secondary\">\n                   <span class=\"hidden-visually\">Use camera to</span> \n                   Scan\n                   <span class=\"hidden-visually\">card number</span>\n                </button>\n                <input type=\"text\" \n                       name=\"cardnumber\" \n                       id=\"card-number\" \n                       autocomplete=\"cc-number\"\n                       inputmode=\"numeric\"\n                       pattern=\"[0-9]*\"\n                       aria-describedby=\"description-card-number\"\n                       required>\n                <div id=\"description-card-number\" class=\"hint secure-icon\">\n                  Secure form protected by 8 bit encryption\n                </div>\n            </div>\n        </fieldset>\n        <fieldset>\n            <legend>Expiration <span aria-hidden=\"true\">(MM YY)</span></legend>\n            <div class=\"expiry-container\">\n                <label class=\"hidden-visually\" for=\"cc-exp-month\">Expiration Month (MM)</label>\n                <input type=\"text\"\n                       maxlength=\"2\"  \n                       name=\"ccmonth\" \n                       id=\"cc-exp-month\"\n                       inputmode=\"numeric\"\n                       autocomplete=\"cc-exp-month\"\n                       pattern=\"[0-9]*\"\n                       required>\n                <label class=\"hidden-visually\" for=\"cc-exp-year\">Expiration Year (YY)</label>\n                <input type=\"text\"\n                      maxlength=\"2\"  \n                      name=\"ccyear\" \n                      id=\"cc-exp-year\"\n                      inputmode=\"numeric\"\n                      autocomplete=\"cc-exp-year\"\n                      pattern=\"[0-9]*\"\n                      required>\n            </div>\n        </fieldset>\n        <label for=\"cc-name\">Name on card</label>\n        <input type=\"text\"  \n               name=\"ccname\" \n               id=\"cc-name\" \n               autocomplete=\"cc-name\" \n               maxlength=\"19\" \n               required>\n        <label for=\"cc-cvc\">Security code</label>\n        <input type=\"text\" \n               maxlength=\"5\" \n               name=\"cvc\" \n               id=\"cc-cvc\"  \n               autocomplete=\"cc-csc\"\n               inputmode=\"numeric\"\n               pattern=\"[0-9]*\"\n               aria-describedby=\"description-cc-cvc\"\n               required>\n        <div id=\"description-cc-cvc\" class=\"hint\">\n            <button  type=\"button\" class=\"Magentaa11y-button Magentaa11y-button--primary inline-link\">What's a security code?</button>\n        </div>\n    </form>\n</example>\n\n### Shipping Information\n\n```html\n<form aria-label=\"Shipping information\">\n  <fieldset>\n    <legend>\n      Shipping information\n    </legend>\n      \n    <label for=\"address-line1\">\n      Address line 1\n    </label>\n    <input type=\"text\" \n            id=\"address-line1\"\n            autocomplete=\"address-line1\">\n      \n    <label for=\"address-line2\">\n      Address line 2\n    </label>\n    <input type=\"text\" \n            id=\"address-line2\"\n            autocomplete=\"address-line2\">\n      \n    <label for=\"address-level2\">\n      City\n    </label>\n    <input type=\"text\" \n            id=\"address-level2\"\n            autocomplete=\"address-level2\">\n    <label for=\"address-level1\">\n        \n      State\n    </label>\n    <select id=\"address-level1\" \n            autocomplete=\"address-level1\">\n      <option value=\"\" selected disabled>Choose a state</option>\n      <option value=\"AL\">Alabama</option>\n      <option value=\"AK\">Alaska</option>\n      <option value=\"AZ\">Arizona</option>\n      <option value=\"AR\">Arkansas</option>\n      <option value=\"CA\">California</option>\n      <option value=\"CO\">Colorado</option>\n      <option value=\"CT\">Connecticut</option>\n      <option value=\"DE\">Delaware</option>\n      <option value=\"DC\">District Of Columbia</option>\n      <option value=\"FL\">Florida</option>\n      <option value=\"GA\">Georgia</option>\n      <option value=\"HI\">Hawaii</option>\n      <option value=\"ID\">Idaho</option>\n      <option value=\"IL\">Illinois</option>\n      <option value=\"IN\">Indiana</option>\n      <option value=\"IA\">Iowa</option>\n      <option value=\"KS\">Kansas</option>\n      <option value=\"KY\">Kentucky</option>\n      <option value=\"LA\">Louisiana</option>\n      <option value=\"ME\">Maine</option>\n      <option value=\"MD\">Maryland</option>\n      <option value=\"MA\">Massachusetts</option>\n      <option value=\"MI\">Michigan</option>\n      <option value=\"MN\">Minnesota</option>\n      <option value=\"MS\">Mississippi</option>\n      <option value=\"MO\">Missouri</option>\n      <option value=\"MT\">Montana</option>\n      <option value=\"NE\">Nebraska</option>\n      <option value=\"NV\">Nevada</option>\n      <option value=\"NH\">New Hampshire</option>\n      <option value=\"NJ\">New Jersey</option>\n      <option value=\"NM\">New Mexico</option>\n      <option value=\"NY\">New York</option>\n      <option value=\"NC\">North Carolina</option>\n      <option value=\"ND\">North Dakota</option>\n      <option value=\"OH\">Ohio</option>\n      <option value=\"OK\">Oklahoma</option>\n      <option value=\"OR\">Oregon</option>\n      <option value=\"PA\">Pennsylvania</option>\n      <option value=\"RI\">Rhode Island</option>\n      <option value=\"SC\">South Carolina</option>\n      <option value=\"SD\">South Dakota</option>\n      <option value=\"TN\">Tennessee</option>\n      <option value=\"TX\">Texas</option>\n      <option value=\"UT\">Utah</option>\n      <option value=\"VT\">Vermont</option>\n      <option value=\"VA\">Virginia</option>\n      <option value=\"WA\">Washington</option>\n      <option value=\"WV\">West Virginia</option>\n      <option value=\"WI\">Wisconsin</option>\n      <option value=\"WY\">Wyoming</option>\n    </select>\n      \n    <label for=\"postal-code\">\n      Zip postal code\n    </label>\n    <input type=\"text\" \n            id=\"postal-code\"\n            inputmode=\"numeric\"\n            pattern=\"[0-9]*\"\n            autocomplete=\"postal-code\"\n            maxlength=\"5\">\n  </fieldset>\n</form>\n```\n\n<example>\n    <form aria-label=\"Shipping information\">\n      <fieldset>\n        <legend>\n          Shipping information\n        </legend>\n        <label for=\"address-line1\">\n          Address line 1\n        </label>\n        <input type=\"text\" \n                id=\"address-line1\"\n                autocomplete=\"address-line1\">\n        <label for=\"address-line2\">\n          Address line 2\n        </label>\n        <input type=\"text\" \n                id=\"address-line2\"\n                autocomplete=\"address-line2\">\n        <label for=\"address-level2\">\n          City\n        </label>\n        <input type=\"text\" \n                id=\"address-level2\"\n                autocomplete=\"address-level2\">\n        <label for=\"address-level1\">\n          State\n        </label>\n        <select id=\"address-level1\" \n                autocomplete=\"address-level1\">\n          <option value=\"\" selected disabled>Choose a state</option>\n          <option value=\"AL\">Alabama</option>\n          <option value=\"AK\">Alaska</option>\n          <option value=\"AZ\">Arizona</option>\n          <option value=\"AR\">Arkansas</option>\n          <option value=\"CA\">California</option>\n          <option value=\"CO\">Colorado</option>\n          <option value=\"CT\">Connecticut</option>\n          <option value=\"DE\">Delaware</option>\n          <option value=\"DC\">District Of Columbia</option>\n          <option value=\"FL\">Florida</option>\n          <option value=\"GA\">Georgia</option>\n          <option value=\"HI\">Hawaii</option>\n          <option value=\"ID\">Idaho</option>\n          <option value=\"IL\">Illinois</option>\n          <option value=\"IN\">Indiana</option>\n          <option value=\"IA\">Iowa</option>\n          <option value=\"KS\">Kansas</option>\n          <option value=\"KY\">Kentucky</option>\n          <option value=\"LA\">Louisiana</option>\n          <option value=\"ME\">Maine</option>\n          <option value=\"MD\">Maryland</option>\n          <option value=\"MA\">Massachusetts</option>\n          <option value=\"MI\">Michigan</option>\n          <option value=\"MN\">Minnesota</option>\n          <option value=\"MS\">Mississippi</option>\n          <option value=\"MO\">Missouri</option>\n          <option value=\"MT\">Montana</option>\n          <option value=\"NE\">Nebraska</option>\n          <option value=\"NV\">Nevada</option>\n          <option value=\"NH\">New Hampshire</option>\n          <option value=\"NJ\">New Jersey</option>\n          <option value=\"NM\">New Mexico</option>\n          <option value=\"NY\">New York</option>\n          <option value=\"NC\">North Carolina</option>\n          <option value=\"ND\">North Dakota</option>\n          <option value=\"OH\">Ohio</option>\n          <option value=\"OK\">Oklahoma</option>\n          <option value=\"OR\">Oregon</option>\n          <option value=\"PA\">Pennsylvania</option>\n          <option value=\"RI\">Rhode Island</option>\n          <option value=\"SC\">South Carolina</option>\n          <option value=\"SD\">South Dakota</option>\n          <option value=\"TN\">Tennessee</option>\n          <option value=\"TX\">Texas</option>\n          <option value=\"UT\">Utah</option>\n          <option value=\"VT\">Vermont</option>\n          <option value=\"VA\">Virginia</option>\n          <option value=\"WA\">Washington</option>\n          <option value=\"WV\">West Virginia</option>\n          <option value=\"WI\">Wisconsin</option>\n          <option value=\"WY\">Wyoming</option>\n        </select>\n        <label for=\"postal-code\">\n          Zip postal code\n        </label>\n        <input type=\"text\" \n                id=\"postal-code\"\n                inputmode=\"numeric\"\n                pattern=\"[0-9]*\"\n                autocomplete=\"postal-code\"\n                maxlength=\"5\">\n      </fieldset>\n    </form>\n</example>\n\n### Contact Form\n\n```html\n<form aria-label=\"Contact us\">\n  <fieldset>\n    <legend>\n      Preferred contact method\n    </legend>\n  \n    <input type=\"radio\" name=\"method\" id=\"contact-email\" checked>\n    <label for=\"contact-email\">Email</label>\n  \n    <input type=\"radio\" name=\"method\" id=\"contact-sms\">\n    <label for=\"contact-sms\">SMS text</label>\n  \n    <input type=\"radio\" name=\"method\" id=\"contact-phone\">\n    <label for=\"contact-phone\">Phone</label>\n  </fieldset>\n\n  <fieldset>\n    <legend>\n      Your information\n    </legend>\n\n    <label for=\"email\">\n      Email address\n    </label>\n    <input id=\"email\"\n           type=\"email\"\n           autocomplete=\"email\"\n           spellcheck=\"false\"\n           aria-describedby=\"hint-email\">\n    <div class=\"hint\" id=\"hint-email\">\n      We’ll never sell or share your information\n    </div>\n\n    <label for=\"phone\">\n      Phone number\n    </label>\n    <input  type=\"tel\"\n            id=\"phone\"\n            inputmode=\"numeric\"\n            autocomplete=\"tel\"\n            aria-describedby=\"hint-phone\">\n    <div class=\"hint\" id=\"hint-phone\">\n      Format: 573-268-9692\n    </div>\n\n    <label for=\"message\">\n      Your message\n    </label>\n    <textarea id=\"message\"></textarea> \n      \n\n  </fieldset>\n</form>\n```\n\n<example>\n    <form aria-label=\"Contact us\">\n          <fieldset>\n            <legend>\n              Preferred contact method\n            </legend>\n            <input type=\"radio\" name=\"method\" id=\"contact-email\" checked>\n            <label for=\"contact-email\">Email</label>\n            <input type=\"radio\" name=\"method\" id=\"contact-sms\">\n            <label for=\"contact-sms\">SMS text</label>\n            <input type=\"radio\" name=\"method\" id=\"contact-phone\">\n            <label for=\"contact-phone\">Phone</label>\n          </fieldset>\n          <fieldset>\n            <legend>\n              Your information\n            </legend>\n            <label for=\"email\">\n              Email address\n            </label>\n            <input id=\"email\"\n                   type=\"email\"\n                   autocomplete=\"email\"\n                   spellcheck=\"false\"\n                   aria-describedby=\"hint-email\">\n            <div class=\"hint\" id=\"hint-email\">\n              We’ll never sell or share your information\n            </div>\n            <label for=\"phone\">\n              Phone number\n            </label>\n            <input  type=\"tel\"\n                    id=\"phone\"\n                    inputmode=\"numeric\"\n                    autocomplete=\"tel\"\n                    aria-describedby=\"hint-phone\">\n            <div class=\"hint\" id=\"hint-phone\">\n              Format: 573-268-9692\n            </div>\n            <label for=\"message\">\n              Your message\n            </label>\n            <textarea id=\"message\"></textarea>\n          </fieldset>\n        </form>\n</example>\n\n## Output from inputs\n\n* Screenreader support varies\n* Output can be used for a dynamic content that changes based on user inputs (example: a calculator).\n* Alternatively, using a custom element with `role=”status”` will achieve more predictable results.\n\n```html\n<form oninput=\"result.value=parseInt(rent.value)+parseInt(utilities.value)\">\n  <fieldset>\n    <legend>\n      Calculate monthly expenses\n    </legend>\n    \n    <label for=\"rent\">Monthly rent</label>\n    <input type=\"text\" id=\"rent\" inputmode=\"numeric\" value=\"2500\" maxlength=\"4\">\n\n    <label for=\"utilities\">Monthly utilities</label>\n    <input type=\"text\" id=\"utilities\" inputmode=\"numeric\" value=\"500\" maxlength=\"4\">\n    \n    <label for=\"result\">Total</label>\n    <input \n      readonly \n      type=\"text\"\n      id=\"result\"\n      inputmode=\"numeric\" \n      value=\"3000\" \n      maxlength=\"6\">\n  </fieldset>\n</form>\n```\n\n## Further Reading\n\n* [WebAIM Accessible Form validation and error recovery](https://webaim.org/techniques/formvalidation/)"
        },
        {
          "label": "Header Landmark",
          "name": "header-landmark",
          "type": "file",
          "generalNotes": "How to test a header landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\nGIVEN THAT I am on a page with a header landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the tab key to enter the web browser window I SEE focus is strongly visually indicated on interactive components\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to enter the web browser window\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the header\n     * I HEAR It is discoverable with screenreader shortcuts as header/banner landmark\n     * I HEAR It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a header landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the header or navigation\n   * Tab: Nothing, headers are not focusable unless they are actionable\n   * Arrow-keys: headers are browsed\n\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves directly to the header or navigation\n   * Doubletap: This typically activates most elements\n\n3. Listen to screenreader output on all devices\n   * Role: It is discoverable with screenreader shortcuts as header/banner landmark\n   * Group: It typically contains the name and primary navigation of the website\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/header-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## General\n\n* There must only be a singular header/banner element on the page.\n* Contains the site title and typically the primary navigation.\n\n## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<header id=\"example-header\">\n  <a href=\"#nav-example\">Skip to navigation</a>\n  <a href=\"#\">Not the navigation</a>\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n      <li><button>Sign in</button></li>\n    </ul>\n  </nav>\n</header>\n```\n\n<example>\n   <header aria-label=\"example\">\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example navigation</a>\n   <a href=\"#\">Not the navigation</a>\n   <nav tabindex=\"-1\" class=\"nav-example\" id=\"destination\">\n      <ul>\n         <li><a href=\"/\">Home</a></li>\n         <li><a href=\"/about/\">About</a></li>\n         <li><a href=\"/contact/\">Contact</a></li>\n         <li><button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-haspopup=\"true\">Sign in</button></li>\n      </ul>\n   </nav>\n   </header>\n</example>\n\n### When You Can’t Use Semantic HTML\n\nThis custom header requires extra attributes.\n\n```html\n<div role=\"banner\" tabindex=\"-1\" id=\"example-header\">\n  <a href=\"/\">Website name</a>\n</div>\n```\n\n## Developer Notes\n\n### Name\n\n* Typically doesn’t have a name or description since there must be only one instance per page.\n\n### Role\n\n* Identifies itself as a header or banner landmark.\n* If a non-semantic element must be used (like a `<div>`), use `role=\"banner\"` to make the element discoverable.\n\n### Group\n\n* Contains the site title and typically the primary navigation.\n\n### Focus\n\n* Can be targeted with a skip link, but the skip link will typically be labeled “skip to navigation”\n* Use `tabindex=\"-1\"` to make the header targetable with a skip link.\n* The `<header>` itself isn’t focusable with the tab key."
        },
        {
          "label": "Main Landmark",
          "name": "main-landmark",
          "type": "file",
          "generalNotes": "How to test a main landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a main landmark\n\nGIVEN THAT I am on a page with a main landmark\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the arrow keys to browse the main content I SEE the screen scroll through the page\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse the main content\n     * I HEAR It is discoverable with screenreader shortcuts as main landmark\n     * I HEAR It contains the content portion of the page starting with the H1\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to elements in the header\n     * I HEAR It is discoverable with screenreader shortcuts as main landmark\n     * I HEAR It contains the content portion of the page starting with the H1\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/main-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a main landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Skip-links: Focus moves directly to the main content area\n   * Tab: Links and buttons within the main area are focusable\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within main area\n\n3. Listen to screenreader output on all devices\n\n   * Role: It is discoverable with screenreader shortcuts as main landmark\n   * Group: It contains the content portion of the page starting with the H1\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/main-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n### Use semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#example-main\">Skip to main content</a>\n<a href=\"#\">Not main content</a>\n<main tabindex=\"-1\" id=\"example-main\" aria-label=\"example\">\n  <h1>About main content</h1>\n  <p>The main content of the page belongs here.</p>\n  <p><a href=\"#\">Focus moves here next</a></p>\n</main>\n```\n\n<example>\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to main content</a>\n   <a href=\"#\">Not main content</a>\n   <main tabindex=\"-1\" id=\"destination\" aria-label=\"example\">\n      <h1>About main content</h1>\n      <p>The main content of the page belongs here.</p>\n      <p><a href=\"#\">Focus moves here next</a></p>\n   </main>\n</example>\n\n### When you can't use semantic HTML\n\nThis custom main element requires extra attributes.\n\n```html\n<div role=\"main\" tabindex=\"-1\" id=\"example-main\"> \n  <h1>About our company</h1>\n  <p>The main content of the page belongs here.</p>\n</div>\n```\n\n<example>\n   <div role=\"main\" tabindex=\"-1\" id=\"example-main\"> \n      <h1>About our company</h1>\n      <p>The main content of the page belongs here.</p>\n   </div>\n</example>\n\n## Developer notes\n\n### Name\n\n* Typically doesn't have a name other than its role.\n* If a page has multiple `<main>` landmarks, then each should have a unique programmatic label.\n  * Use `aria-label=\"Content name\"` when there is not a visible content label.\n  * Use `aria-labelledby=\"content-id\"` when the content label is a visible heading or existing page text.\n\n### Role\n\n* Identifies itself as a main landmark\n* If a non-semantic element must be used (like a `<div>`) use `role=\"main\"`.\n\n### Group\n\n* Must contain the main content of the page.\n* Ideally appears only once per Web page.\n\n### Focus\n\n* Can be targeted with a skip link, but isn't focusable with the tab key\n* Use `tabindex=\"-1\"` to make the main targetable with a skip link.\n\n## Further Reading\n\n* [WCAG 1.3.1 Info and Relationships (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/info-and-relationships.html)"
        },
        {
          "label": "Navigation Landmark",
          "name": "navigation-landmark",
          "type": "file",
          "generalNotes": "How to test a navigation landmark",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\nGIVEN THAT I am on a page with a navigation landmark\n\n1. Keyboard for mobile & desktop\n   * WHEN I use the arrow keys to browse the navigation menu, I SEE the screen scrolls through the page.\n\n2. Desktop screenreader\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the arrow keys to browse the navigation menu\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\n3. Mobile screenreader\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focusable elements in the navigation\n     * I HEAR It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n     * I HEAR It is discoverable with screenreader shortcuts as a navigation landmark.\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a navigation landmark\n\n1. Test keyboard only, then screen reader + keyboard actions\n   * Skip-links: Focus moves directly to the nav element\n   * Tab: Focus moves to Links and buttons within the nav\n2. Test mobile screenreader gestures\n   * Swipe: Focus moves within the nav\n   * Doubletap: This typically activates most elements\n3. Listen to screenreader output on all devices\n   * **Name**: It indicates its role AND IF multiple navigations are present (ex: Main navigation, Site map, Breadcrumbs), the name of the navigation\n   * **Role**: It is discoverable with screenreader shortcuts as a navigation landmark\n\nFull information: <https://www.magentaa11y.com/#/web-criteria/page-level/navigation-landmark>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code Examples\n\n### Use Semantic HTML\n\nThis semantic HTML contains all accessibility features by default.\n\n```html\n<a href=\"#nav-example\">Skip to example navigation</a>\n<a href=\"#\">Not the navigation</a>\n<nav tabindex=\"-1\" class=\"nav-example\" id=\"nav-example\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n    <li><button aria-haspopup=\"true\">Sign in</button></li>\n  </ul>\n</nav>\n```\n\n<example>\n  <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to example navigation</a>\n  <a href=\"#\">Not the navigation</a>\n  <nav tabindex=\"-1\" class=\"nav-example\" id=\"destination\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n      <li><button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-haspopup=\"true\">Sign in</button></li>\n    </ul>\n  </nav>\n</example>\n\n### Keep custom menus as simple as possible\n\nUse semantic elements where possible.\n\n```html\n<nav id=\"example-expanding-nav\" class=\"menu\">\n  <ul>\n    <li>\n      <a class=\"home\" href=\"/\">\n        Home\n      </a>\n    </li>\n    <li class=\"expander-group MagentaA11y-accordion\">\n      <h3 className=\"MagentaA11y-accordion__heading\">\n        <button className=\"MagentaA11y-accordion__headline\" data-fn=\"toggleAccordionState\" type=\"button\" class=\"menu expander-toggle\" aria-expanded=\"false\" aria-haspopup=\"true\">\n        Menu\n        </button>\n      </h3>\n      <ul className=\"MagentaA11y-accordion__body\">\n        <li>\n          <a href=\"/about/\">About</a>\n        </li>\n        <li>\n          <a href=\"/contact\">Contact</a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</nav>\n```\n\n<example>\n  <nav id=\"example-expanding-nav\" class=\"menu\">\n    <ul>\n      <li>\n        <a class=\"home\" href=\"/\">\n          Home\n        </a>\n      </li>\n      <li class=\"expander-group MagentaA11y-accordion\">\n        <h3 className=\"MagentaA11y-accordion__heading\">\n          <button className=\"MagentaA11y-accordion__headline\" data-fn=\"toggleAccordionState\" type=\"button\" class=\"menu expander-toggle\" aria-expanded=\"false\" aria-haspopup=\"true\">\n          Menu\n          </button>\n        </h3>\n        <ul className=\"MagentaA11y-accordion__body\">\n          <li>\n            <a href=\"/about/\">About</a>\n          </li>\n          <li>\n            <a href=\"/contact\">Contact</a>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </nav>\n</example>\n\n### When you can’t use semantic HTML\n\nThis custom navigation requires extra attributes.\n\n```html\n<div role=\"navigation\" tabindex=\"-1\" id=\"example-navigation\">\n  <ul>\n    <li><a href=\"/\">Website name</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</div>\n```\n\n### Multiple navigation elements\n\nWhen there is more than one navigation element, they must have a name.\n\n```html\n<nav tabindex=\"-1\" id=\"nav\" aria-label=\"Main\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/about/\">About</a></li>\n    <li><a href=\"/contact/\">Contact</a></li>\n  </ul>\n</nav>\n\n<h2 id=\"cat-heading\">Categories</h2>\n<nav id=\"cat-nav\" aria-labelledby=\"#cat-heading\">\n  <ul>\n    <li><a href=\"/alpha/\">Alpha</a></li>\n    <li><a href=\"/bravo/\">Bravo</a></li>\n    <li><a href=\"/charlie/\">Charlie</a></li>\n  </ul>\n</nav>\n\n<footer>\n  <nav aria-label=\"Site map\">\n    <ul>\n      <li><a href=\"/\">Home</a></li>\n      <li><a href=\"/about/\">About</a></li>\n      <li><a href=\"/contact/\">Contact</a></li>\n    </ul>\n  </nav>\n</footer>\n```\n\n## Developer Notes\n\n### Name\n\n* If there are multiple `<nav>` elements (e.g., site menu, pagination, categories), it may be helpful to name them.\n  * Use `aria-label=\"Menu name\"` when there is no visible navigation title.\n  * Use `aria-describedby=\"menu-name-id\"` when the navigation title is a visible heading.\n\n### Role\n\n* Identifies itself as a navigation landmark.\n* Avoid adding ‘menu’ or ‘option’ roles with arrow key event listeners unless building an actual application like Gmail.\n\n### Focus\n\n* When skip links are used, add `tabindex=\"-1\"` so focus can move to the `nav` element, not just bring it into view.\n\n## Further Reading\n\n* [WCAG 3.2.3 Consistent Navigation (Level AA)](https://www.w3.org/WAI/WCAG22/Understanding/consistent-navigation)\n* [WCAG 4.1.2 Name, Role, Value (Level A)](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value)"
        },
        {
          "label": "Single Page Application",
          "name": "single-page-application",
          "type": "file",
          "generalNotes": "How to test a single page application (SPA)",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a single page application (SPA)\n\nGIVEN THAT I am on a page built with a SPA:\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the application AND whole new dynamic page appears I SEE browsing and focus starts consistently at top of new page content or top of page\n   * THEN when I use the tab key I SEE focus starts consistently at the first interactive element in the new page content or top of page\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver)\n     * AND I use the application AND whole new dynamic page appears\n     * AND I HEAR new content is announced or indicated\n     * AND I HEAR browsing and focus starts consistently at top of new page content or top of page\n   * THEN when I use the tab key I HEAR focus starts consistently at the first interactive element in the new page content or top of page\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver)\n     * AND I use the application AND new dynamic content page appears\n     * I HEAR new content is announced or indicated\n     * I HEAR browsing and focus starts consistently at top of new page content or top of page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/single-page-application>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a single page application (SPA)\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Arrow-keys: Browsing starts consistently at top of new page content OR top of page\n   * Tab: Focus starts consistently at the first interactive element in the content or top of page\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus starts at top of new content or top of page\n\n3. Listen to screenreader output on all devices\n\n   * Name: New content is announced or indicated\n   * Group: Browsing and focus starts consistently at top of new page content or top of page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/single-page-application>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Focus management & consistency\n\n* Focus must be **deliberately and consistently** placed at the\n  * top of new page content or\n  * top of the HTML page\n* Pick one or the other and **consistently** follow that pattern\n* **DO NOT** place focus on the first input on page load\n\n## How does dynamic `aria-live` content work?\n\n* The screenreader expects content **within** an element with a `aria-live=\"polite\"` attribute to change\n* By default, **only the content that has changed** will be read\n* To force the screenreader to read all contents even if it did not change within the element, add `aria-atomic=\"true\"`\n* **Rarely** must you use `aria-live=\"assertive\"` as it will override every other message from the screenreader\n\n## About alerts\n\n* *By default* an element using `role=\"alert\"` has `aria-live=\"assertive\"`\n\n## Code example\n\nThis is one example of a dynamic content region. It is similar to the carousel example.\n\n<!-- TODO mention how SPA works for our routing on current site -->\n\n* It is not the only way to build a dynamic region, but it meets all the critieria:\n  * New content is announced\n  * Focus is consistently placed at the top of the content\n\n```html\n<div id=\"dynamic-app-container\" \n     class=\"simp\" \n     aria-live=\"polite\" \n     tabindex=\"-1\">\n\n  <h2 class=\"h-bravo\">\n    Sesame Street Experience\n  </h2>\n\n  <ul class=\"slide-list\">\n    <li class=\"slide visible\">\n      <h3>\n        Alpha\n      </h3>\n      <button class=\"next\">\n        Start\n      </button>\n    </li>\n\n    <li class=\"slide inert\">\n      <h3>\n        Big Bird\n      </h3>\n      <p>\n        A large, yellow bird character\n      </p>\n      <button class=\"tertiary previous\">\n        Back\n      </button>\n      <button class=\"next\">\n        Next\n      </button>\n    </li>\n\n    <li class=\"slide inert\">\n      <h3>\n        Cookie Monster\n      </h3>\n      <p>\n        A blue, cookie-eating character.\n      </p>\n      <button class=\"tertiary previous\">\n        Back\n      </button>\n      <button>\n        Submit\n      </button>\n    </li>\n  </ul>\n</div>\n```\n\n<example>\n   <div id=\"destination\" \n      class=\"spa\" \n      aria-live=\"polite\" \n      tabindex=\"-1\">\n      <h2 class=\"h-bravo\">\n         Sesame Street Experience\n      </h2>\n      <ul class=\"slide-list\">\n         <li class=\"slide visible\" id=\"current\">\n            <h3>\n            Elmo\n            </h3>\n            <p>\n            A red, fuzzy character.\n            </p>\n            <button data-fn=\"goToNext\" class=\"Magentaa11y-button Magentaa11y-button--primary next\">\n            Start\n            </button>\n         </li>\n         <li class=\"slide\">\n            <h3>\n            Big Bird\n            </h3>\n            <p>\n            A large, yellow bird character\n            </p>\n            <button data-fn=\"goToNext\" class=\"Magentaa11y-button Magentaa11y-button--primary next\">\n            Next\n            </button>\n         </li>\n         <li class=\"slide\">\n            <h3>\n            Cookie Monster\n            </h3>\n            <p>\n            A blue, cookie-eating character.\n            </p>\n            <button data-fn=\"goToNext\" class=\"Magentaa11y-button Magentaa11y-button--primary next\">\n            Submit\n            </button>\n         </li>\n      </ul>\n   </div>\n</example>"
        },
        {
          "label": "Skip Link",
          "name": "skip-link",
          "type": "file",
          "generalNotes": "How to test a skip link",
          "gherkin": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a skip link\n\nGIVEN THAT I am on a page with a skip link\n\n1. Keyboard for mobile & desktop\n\n   * WHEN I use the tab key to move focus to a skip link I SEE focus is strongly visually indicated\n   * THEN when I use the enter key to activate the link I SEE my focus moves directly to the targeted element\n\n2. Desktop screenreader\n\n   * WHEN I use a desktop screenreader (NVDA, JAWS, VoiceOver) AND\n   * I use the tab key to move focus to a skip link\n     * I HEAR it describes which landmark it's targeting\n     * I HEAR it identifies itself as a link\n     * I HEAR it is typically the first element in the page\n   * THEN when I use the enter key to activate the link I HEAR my focus moves directly to the targeted element\n\n3. Mobile screenreader\n\n   * WHEN I use a mobile screenreader (Talkback, VoiceOver) AND\n   * I swipe to focus on a skip link\n     * I HEAR it describes which landmark it's targeting\n     * I HEAR it identifies itself as a link\n     * I HEAR it is typically the first element in the page\n   * THEN when I doubletap with the link in focus I HEAR my focus moves directly to the targeted element\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/skip-link>",
          "condensed": "### #a11y - Web Accessibility Acceptance Criteria\n\nHow to test a skip link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus moves to the skip link\n   * Enter: Activates the link, focus/tabindex moves directly to the targeted element\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the skip link\n   * Doubletap: Activates the link, focus/tabindex moves directly to the targeted element\n\n3. Listen to screenreader output on all devices\n\n   * Name: It describes which landmark it's targeting\n   * Role: It identifies itself as a link\n   * Group: It is typically the first element in the page\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/page-level/skip-link>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Code examples\n\n```html\n   <a href=\"#example-main\">Skip to main content</a>\n   <a href=\"#\">Not main content</a>\n   <main tabindex=\"-1\" id=\"example-main\">\n      <h1>About main content</h1>\n      <p>The main content of the page belongs here.</p>\n      <p><a href=\"#\">Focus moves here next</a></p>\n   </main>\n```\n\n<example>\n   <a href=\"#destination\" data-fn=\"scrollToHref\">Skip to main content</a>\n   <a href=\"#\">Not main content</a>\n   <main tabindex=\"-1\" id=\"destination\">\n      <h1>About main content</h1>\n      <p>The main content of the page belongs here.</p>\n      <p><a href=\"#\">Focus moves here next</a></p>\n   </main>\n</example>\n\n## Developer Notes\n\n### Group\n\n* Skip links must be the first perceivable elements in the page\n\n### Focus\n\n* Landmarks and other elements can be targeted with a skip link, but aren't individually focusable with the tab key\n* Use `tabindex=\"-1\"` to make the target focusable with a skip link."
        }
      ]
    }
  ],
  "native": [
    {
      "label": "Controls",
      "name": "controls",
      "children": [
        {
          "label": "Button",
          "name": "button",
          "type": "file",
          "generalNotes": "How to test a button",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a button\n\nGIVEN THAT I am on a screen with a button\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\"\n     * THEN the focus should visibly move to the button\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the button should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the button should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the button\n     * THEN the focus should move to the button\n       * AND the button's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the button\n     * THEN the button should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as a button in iOS and as a button or \"double tap to activate\" in Android\n       * AND its visible label should be grouped or associated with the button in a single swipe\n       * AND its state (DISABLED/DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text on the button should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/button>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a button\n\n1. Test keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the button\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the button in a single swipe\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/button>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/button/buttonIosVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/button/buttonAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control\n* Programmatic name matches the visible text label (if any)\n\n#### Android Views\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n\n#### Jetpack Compose\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n***\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n#### Android Views\n\n* Standard button or ImageButton\n\n#### Jetpack Compose\n\n* Standard `Button` composable\n\n***\n\n### Groupings\n\n* Visible label can be grouped with button (if applicable) to provide a programmatic name for the button and not duplicate the name announcement\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n***\n\n### State\n\n#### Android Views\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled:  `Button(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n***\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading), except when changing between navigation tabs\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n#### Android Views\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n***\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n#### Android Views\n\n* step 1: Create an accessibility service\n* step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n* step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n#### Jetpack Compose\n\n* List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n* Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n***\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from \"button\" in the label\n  * **Note:** When the user has hints turned on in settings, \"double tap to activate\" will announce at the end of most interactive controls.  Testing should be done with hints turned on to ensure the user understands a control is interactive by hearing either \"button\" or \"double tap to activate\" or both.  Announcements on Android devices vary slightly due to manufacturer.\n* \"Label, button, double tap to activate\"\n* \"Label, (other content in cell), button, double tap to activate\" (grouping)\n* \"Label, button, selected, double tap to activate\" (selected state)\n* \"Label, disabled\" (disabled state)",
          "iosDeveloperNotes": "* A button is accessible by default prior to customization. Use the native button when at all possible to avoid additional development effort\n* A button is a control that executes an action or navigates within the app\n  * To redirect users outside of the app, use links\n* Even if the control visibly looks like a link, implement the control as a button to cue the screen reader that the action will keep them within the app\n* Name, Role, State must be stated in a single announcement when focus is on the control\n\n***\n\n### Name\n\n* Name describes the purpose of the control.\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note**: Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n* When naming a button, do not add “button” to the programmatic name (label). Assigning “Button” as the role will handle this announcement.\n  * **Incorrect announcement**: “Submit button, Button”\n  * **Correct announcement**: “Submit, Button”\n\n#### UIKit\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The button’s title will overwrite the button’s `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the button’s `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label’s `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `AccessibilityEnabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`.\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n***\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### UIKit\n\n* Use `UIButton`\n* If necessary, set `accessibilityTraits` to `.button`.\n\n#### SwiftUI\n\n* Use native `Button` view\n* If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as `Button`.\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n***\n\n### Groupings\n\nGroup visible label with button, if applicable, to provide a programmatic name for the button and not duplicate the name announcement\n\n#### UIKit\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to true for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n* If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n  * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n* Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n* Use `shouldGroupAccessibilityChildre`n to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### SwiftUI\n\n* Use view `modifier accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n***\n\n### State\n\n#### UIKit\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is “Dimmed”.\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### SwiftUI\n\n* For selected, use `accessibilityAddTraits(.isSelected)`.\n* For disabled, use view modifier `disabled()`.\n\n***\n\n### Focus\n\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading, except when changing between navigation tabs\n* When a menu, picker, or modal is closed, the focus should return to the triggering element.\n\n#### UIKit\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### SwiftUI\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n***\n\n### Announcement examples\n\nOptions for announcements below depend on implementation. Announcement order can vary.\n\n* \"Label, button\"\n* \"Label, (other content in cell), button\" (grouping)\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)\n\n***",
          "developerNotes": ""
        },
        {
          "label": "Calendar Date Picker",
          "name": "calendar-date-picker",
          "type": "file",
          "generalNotes": "How to test a calendar date picker",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a calendar date picker\n\nGIVEN THAT I am on a screen with a calendar date picker\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses \"TAB\", Arrow Keys, or \"CTRL+TAB\"\n     * THEN the focus visibly moves to the picker\n   * WHEN the user presses \"SPACEBAR\" on iOS or Android\n     * THEN the picker is selected and opens\n   * WHEN the user presses \"ENTER\" on Android\n     * THEN the picker is selected and opens\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to the picker element\n     * THEN focus moves to the element and announces its Name, Role, Value, and State (if applicable)\n   * WHEN the user performs a double-tap gesture\n     * THEN the picker is selected and opens\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the user swipes to the picker element\n     * THEN the picker must be announced with the following attributes:\n       * AND the Name must clearly describe the purpose and match any visible label\n       * AND the Role must be identified as a \"Button\" in iOS and \"Double tap to activate\" in Android\n       * AND the Group must have the visible label grouped with the control that opens the picker\n       * AND the State must express its state (DISABLED/DIMMED)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN a user adjusts text resizing settings up to 200%\n     * THEN all text must remain readable without loss of information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/calendar-date-picker>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a calendar date picker\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the picker\n   * Spacebar: Selects and opens the picker on iOS and Android\n   * Enter: Selects and opens the picker on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, value & state (if applicable)\n   * Doubletap: Selects and opens picker\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button in iOS and \"double tap to activate\" in Android\n   * Group: Group visible label with control that opens picker\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/calendar-date-picker>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* Date pickers can display past, present, or future dates. Clearly indicate important dates, such as current and selected days. Follow common patterns, like a calendar view\n* Time/Date pickers can be two types: dial and input\n* They are modals that cover the main content, where TalkBack users should be confined in them\n* Swipe order in the picker goes through the three months shown, the three days shown and the three years shown\n* Swiping up and down in each column rotates through the options in the column\n* Initial focus in modal can often be one of the first elements and not necessarily the heading.\n\n### Name\n\n* Name describes the purpose of the control\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * By default, the programmatic name is the visible text label of the segment\n  * Compose uses semantics properties to pass information to accessibility services\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Follow native component role\n\n* **Android Views**\n\n  * DatePickerDialog\n  * See native date pickers in Gmail or Settings to determine the specific device's swipe order and behavior (Ex: Gmail-Compose-Menu-Schedule, send-Pick date & time)\n\n* **Jetpack Compose**\n\n  * `DatePicker`\n  * `DatePickerDialog`\n  * `DateRangePicker`\n\n### Groupings\n\n* N/A\n\n* **Android Views**\n\n  * Follow native component grouping\n\n* **Jetpack Compose**\n\n  * Follow native component grouping\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Tab(enabled = true)` to specify explicitly\n  * Disabled: `Tab(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n\n  * `android:focusable`\n\n  * `android=clickable`\n\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n\n  * `nextFocusDown`\n\n  * `nextFocusUp`\n\n  * `nextFocusRight`\n\n  * `nextFocusLeft`\n\n  * `accessibilityTraversalBefore` (or after)\n\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n\n  * To hide controls: `importantForAccessibility=false`\n\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n  * **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {\n    val state = rememberDatePickerState(initialDisplayMode = DisplayMode.Input)\n    DatePicker(state = state, modifier = Modifier.padding(16.dp))\n}\n```\n\n### Announcement examples\n\n* “Name, edit box, Double-tap and hold to long press. Actions available, use Tap with 3 fingers to view” (On Edit box to open TalkBack Actions menu)\n* “Show date picker button, double tap to activate” (Down arrow to open picker)\n* “Day, date” (Title or heading)\n* “Option (day or date) button, Swipe up or swipe down to adjust. Double tap to activate. Double tap and hold to long press” (On each day/date in column) (Double tap and hold to long press will rotate quickly through the column)\n* “Cancel button, double tap to activate” (CTA with “Set” as the other action)",
          "iosDeveloperNotes": "### General Notes\n\n* Use native app calendar date pickers when possible vs a custom element, as the native app picker will handle expected behavior without additional development effort\n* Calendar image often needs alt text and is sometimes grouped with the label of the field\n* The native calendar has a few circles for selected dates, but there are limitations in the colors resulting in insufficient color contrast minimum ratios, as well as the color for the days of the week\n* Natively, VoiceOver announces the disabled/unavailable dates as dimmed\n* The month is adjustable (swipe up or down to change) and can also be changed via the wheel picker with double tap\n* Arrow buttons to change the month and year and not in the swipe order for the screen reader, since there is an alternate way to change the dates\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* It is the name of the element that opens the date picker.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* Placeholder or value text is NOT the programmatic name\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * Setting the triggering element's title will overwrite its `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the trigger's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Role\n\n* **UIKit**\n\n  * Use `UIDatePicker` (It is a custom subclass of `UIPickerView` so the functionality and accessibility between the two will be similar)\n\n* **SwiftUI**\n\n  * Use native `DatePicker` view\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits\n\n### Groupings\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* By default, disabled or unavailable dates are announced as \"dimmed\"\n\n* **UIKit**\n\n  * For enabled trigger element: Set `isEnabled` to `true`.\n  * For disabled trigger element: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, close button, first text field, or first heading.\n\n* When the date picker is closed, the focus should return to the triggering element.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* “Double tap to dismiss pop up window” (First invisible element) (on later versions)\n* Header announces as \"heading\"\n* “Close, button” (Close X button)\n* “Month, button, adjustable, double tap to change month and year, swipe up or down with one finger to adjust the value” (Month and year button)\n* “Day, Date, button” (Each date)\n* “Selected, Day, Date, button” (Selected date)\n* “Day, Date, dimmed, button” (Disabled or unavailable date)",
          "developerNotes": ""
        },
        {
          "label": "Captcha",
          "name": "captcha",
          "type": "file",
          "generalNotes": "How to test a captcha",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a captcha\n\nGIVEN THAT I am on a screen with a captcha\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses Tab, Arrow Keys, or Ctrl+Tab\n     * THEN the focus must visibly move to the captcha button\n   * WHEN the user presses Spacebar and or Enter\n     * THEN the button is activated\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to interactive elements\n     * THEN focus must move sequentially to the captcha button\n       * AND the screen reader must announce the state of the captcha button (e.g., enabled or disabled)\n   * WHEN the user performs a double-tap gesture\n     * THEN the captcha button must activate\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose, captcha\n       * AND its role should be identified as a button or image button in iOS and as a button or \"double tap to activate\" in Android\n       * AND its state (DISABLED/DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN a user adjusts text resizing settings up to 200%\n     * THEN text resizing does not apply to the captcha functionality (n/a)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/captcha>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a captcha\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the captcha button\n   * Spacebar: Activates the captcha on iOS and Android\n   * Enter: Activates the button on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the interactive elements, expresses its state, if applicable\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (ex: \"Captcha\")\n   * Role: Identifies itself as a button or image button, if interactive\n   * Group: n/a\n   * State: Expresses its state (disabled/dimmed)\n\n4. Device OS Settings\n\n   * Text resize: n/a\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/captcha>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "* There are several experiences for Captcha:\n  1. A non-interactive image in a table row, where the whole table row acts like a button.\n  2. A single interactive element, like an image button\n  3. An audio challenge as an equivalent experience to the image challenge\n* When selecting the type of Captcha, do not limit the options to only <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html#dfn-cognitive-function-test\"> cognitive function tests</a> (e.g. remembering or transcribing a word, or recognizing a picture the website provided). When possible, leverage <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html#examples\"> recommended techniques recommended by the W3C</a> such as email link authentication, 3rd party authentication, or 2 factor authentication.\n* Captcha is not common in apps, as there are other options for authentication\n\n### Name\n\n* Experiences (refer to number above):\n  1. Alt text on the image that describes its purpose.\n  2. Name describes the purpose of the control and matches any visible text in image\n  3. Programmatic name of each interactive component in audio challenge is announced\n\n#### **Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate any visible label with the control\n\n#### **Jetpack Compose**\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Experiences (refer to number above):\n  1. Identifies as an image\n  2. Identifies as an image button\n  3. Each interactive component in audio challenge identifies as a button or edit box\n\n#### **Android Views**\n\n* When not using native controls (ie, custom controls), roles will need to be manually coded.\n* Standard button or ImageButton\n\n#### **Jetpack Compose**\n\n* Standard `Button` composable\n\n### Groupings\n\n#### **Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### **Jetpack Compose**\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Experiences (refer to number above):\n  1. If grouped in table row, it's possible for the whole row to have a disabled state, or the captcha button disabled separately\n  2. Image button can have a disabled state (disabled)\n  3. Buttons in audio challenge can have a disabled state (disabled)\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n#### **Jetpack Compose**\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled: `Button(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Experiences (refer to number above):\n  1. Focus is on the whole table row. There should be no focus on any single element, if the whole table row is grouped together, as long as there is only one interactive element per row.\n  2. The image button receives focus by swipe or touch\n  3. Each element in audio challenge receives focus by swipe or touch. User is confined inside a modal, if presented\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Jetpack Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n#### **Android Views**\n\n* step 1: Create an accessibility service\n* step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n* step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n#### **Jetpack Compose**\n\n* List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n* Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`",
          "iosDeveloperNotes": "* Here are just a few experiences for Captcha:\n  1. A non-interactive image in a table row, where the whole table row acts like a button.\n  2. A single interactive element, like an image button\n  3. An audio challenge as an equivalent experience to the image challenge\n* When selecting the type of Captcha, do not limit the options to only <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-minimum.html#dfn-cognitive-function-test\">cognitive function tests</a> (e.g. remembering or transcribing a word, or recognizing a picture the website provided). When possible, leverage <a href=\"https://www.w3.org/WAI/WCAG22/Understanding/accessible-authentication-enhanced.html#examples\">recommended techniques recommended by the W3C</a> such as email link authentication, 3rd party authentication, or 2 factor authentication.\n* Captcha is not common in native apps, as there are other options for authentication\n\n### Name\n\n* Experiences (refer to number above):\n  1. Alt text on the image that describes its purpose.\n  2. Name describes the purpose of the control and matches any visible text in image\n  3. Programmatic name of each interactive component in audio challenge is announced\n\n#### **UIKit**\n\n* Programmatic name describes the purpose of the control\n* You can programmatically set the visible label with `setTitle()`\n  * The button’s title will overwrite the button’s `accessibilityLabel`\n* If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector\n\n#### **SwiftUI**\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`\n\n### Role\n\n* Experiences (refer to number above):\n  1. Identifies as an image\n  2. Identifies as an image button\n  3. Each interactive component in audio challenge identifies as a button or text field\n\n#### **UIKit**\n\n* Use `UIButton`\n* If necessary, set `accessibilityTraits` to `.button`\n\n#### **SwiftUI**\n\n* Use native `Button` view\n* If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as Button\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits\n\n### Groupings\n\n#### **UIKit**\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* Experiences (refer to number above):\n  1. If grouped in table row, it's possible for the whole row to have a dimmed/disabled state, or the captcha button disabled separately\n  2. Image button can have a disabled state (dimmed)\n  3. Buttons in audio challenge can have a disabled state (dimmed)\n\n#### **UIKit**\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### **SwiftUI**\n\n* For selected, use `accessibilityAddTraits(.isSelected)`\n* For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Experiences (refer to number above):\n  1. Focus is on the whole table row. There should be no focus on any single element, if the whole table row is grouped together, as long as there is only one interactive element per row.\n  2. The image button receives focus by swipe or touch\n  3. Each element in audio challenge receives focus by swipe or touch. User is confined inside a modal, if presented\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n#### **UIKit**\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Carousel",
          "name": "carousel",
          "type": "file",
          "generalNotes": "How to test a carousel",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a carousel\n\nGIVEN THAT I am on a screen with a carousel\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses \"TAB\", Arrow Keys, or \"CTRL+TAB\"\n     * THEN the focus must visibly move to the next carousel item\n   * WHEN the user presses \"SPACEBAR\" on iOS or Android\n     * THEN the button or interactive slide must activate\n   * WHEN the user presses \"ENTER\" on Android\n     * THEN the button or interactive slide must activate\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes right\n     * THEN focus must move to the next interactive element\n   * WHEN the user performs a 3-finger swipe on iOS\n     * THEN focus must move to the next slide\n   * WHEN the user performs a 2-finger swipe on Android\n     * THEN focus must move to the next slide\n   * WHEN the user performs a 1-finger swipe up or down or a custom action on iOS\n     * THEN focus must move to the next slide\n   * WHEN the user performs a double-tap\n     * THEN the button must activate\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the user swipes through the elements\n     * THEN each item must be announced with the following attributes:\n       * AND the Name must clearly describe the purpose and match the visible text\n       * AND the Role must be identified as \"Button\" in iOS and \"Double tap to activate\" in Android\n       * AND the Role must be identified as \"Adjustable\" with custom actions in iOS\n       * AND the Group must be marked as not applicable (N/A)\n       * AND the State must announce the button’s state (e.g., DISABLED/DIMMED)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN a user adjusts text resizing settings up to 200%\n     * THEN all text must remain readable without loss of information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/carousel>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a carousel\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the next item\n\n   * Spacebar: Activates button or interactive slide on iOS and Android\n\n   * Enter: Activates button or interactive slide on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe right: Focus moves to the next element\n\n   * 3 finger swipe: Focus moves to the next slide (iOS)\n\n   * 2 finger swipe: Focus moves to the next slide (Android)\n\n   * 1 finger swipe up or down or other custom actions: Focus\n     moves to the next slide on iOS\n\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose of each item is clear and matches visible text.  Index should be announced in Android and iOS\n\n   * Role: Identifies as a button in iOS and \"double tap to activate\" in Android\n\n   * Role: Identifies as \"adjustable\" with custom actions (iOS)\n\n   * Group: n/a\n\n   * State: Expresses a button's state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/carousel>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A carousel is a list of related content items as a horizontal slideshow\n* There are a variety of implementation alternatives for a carousel. At least one of the options in the above success criteria for navigating through the elements/slides must be available\n* Slides cannot automatically start rotating through carousel unless there is a pause/stop button\n* Consider the number of slides/elements in carousel when choosing implementation.  Swiping right through the slides of a very large number of slides to get to the next element past the carousel would not be a good user experience.\n* The container around the carousel on Android can be an alternative for the user to bypass all the slides.  The user can enter the container to navigate through the slides, or swipe to the next element past the container.\n  * When navigating to a carousel with the screen reader, it should first focus on the entire carousel container\n  * Each carousel may have a different number of items, so the label includes the total amount of items and the current item in focus\n  * Then, activating the carousel container focuses on the first carousel item\n  * Two finger swipe rt or left navigates through the slides putting focus on the next slide in the order\n* Alternate implementation to swiping through carousel: Change the slides with interactive page control dots and dynamically announce all the content in the slide along with page index (without focus on slides, just on the dots)\n\n### Name\n\n* Programmatic name of any interactive element describes it's purpose.\n\n* Each item in the carousel, if interactive, has a name that describes the purpose of the control and matches any visible label/all text and image descriptions within item.\n\n* **Android View**\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label.\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label to the control\n\n* **Jetpack Compose**\n  * If no visible label, use compose modifier semantics `contentDescription`.\n  * If any icons or images need to be hidden for accessibility talkback, use compose modifier semantics `invisibleToUser()`\n\n### Role\n\n* The native Pager component will handle the built-in accessibility behavior\n\n* Each item in the carousel can have the independent role and accessibility trait. For example, if the item is clickable, the role should be `button`.\n\n* **Android View**\n  * ViewPager\n  * CarouselView\n\n* **Jetpack Compose**\n  * Compose foundation `HorizontalPager` and `VerticalPager`\n\n### Groupings\n\n* Group visible label with the carousel, if applicable.\n* Group the title and any description with each item in the carousel\n* If the item in carousel is clickable, use compose modifier `clickable` which will group the child elements automatically.\n* If the item in carousel has multi-actions, then spilt the action out of the group with proper focus order on each actions.\n* **Android View**\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n* **Jetpack Compose**\n  * `Modifier.semantics(mergeDescendants = true) {}` for the child elements grouping/merging\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Indicate where the item is in the carousel by announcing the position/index out of the total number of items. (see Announcements below)\n\n* Indicate the action state if applicable\n\n* **Android View**\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`\n  * Announcement: disabled\n\n* **Jetpack Compose**\n  * Active: default state is active and enabled. Use `Button(enabled = true)` or `clickable {enabled = true}` to specify explicitly\n  * Disabled:  `Button(enabled = false)` or `clickable {enabled = false}` announces as disabled\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n\n### Focus\n\n* Each slide/element in the carousel should be in the view area when it is being announced\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **Android View**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `Important_For_Accessibility_false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * *Example:* To customize the focus events behaviour\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\n// Example of Compose horizontal pager with single page snapping\nval state = rememberPagerState { 10 }\nHorizontalPager(\n    state = state,\n    modifier = Modifier.fillMaxSize(),\n) { pageIndex ->\n    Box(\n        modifier = Modifier\n            .padding(10.dp)\n            .background(Color.Blue)\n            .fillMaxWidth()\n            .aspectRatio(1f),\n        contentAlignment = Alignment.Center\n    ) {\n        Text(text = pageIndex.toString(), fontSize = 32.sp)\n    }\n}\n```\n\n### Announcements\n\n* “In list” or “Showing slides x of y” are common announcements to give screen readers layout context when landing on carousel container\n* “Swipe right with two fingers to change slides” – common navigation announcement",
          "iosDeveloperNotes": "### General Notes\n\n* A carousel is a list of related content items as a horizontal slideshow\n* There are a variety of implementation alternatives for a carousel. At least one of the options in the above success criteria for navigating through the elements/slides must be available\n* Slides cannot automatically start rotating through carousel unless there is a pause/stop button\n* Consider the number of slides/elements in carousel when choosing implementation.  Swiping right through the slides of a very large number of slides to get to the next element past the carousel would not be a good user experience. Custom actions/gestures for navigation through the slides should be considered on large carousels on iOS.  Then, if the user wants to bypass all the slides, they would simply swipe right to the next element past the carousel\n* Alternate implementation to swiping through carousel: Change the slides with interactive page control dots and dynamically announce all the content in the slide along with page index (without focus on slides, only on the dots)\n\n### Name\n\n* Programmatic name of any interactive element describes it's purpose\n\n* Append \", Carousel\" to the programmatic name to announce the role, since the carousel is custom and does not have a native role assigned\n\n* If visible text label exists for an interactive component, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* **UIKit**\n  * You can programmatically set the visible label with `setTitle()`.\n    * The carousel's title will overwrite the carousel's `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the carousel's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* Since there is no native carousel component, a custom carousel must be implemented.\n\n* The carousel itself has its own role indicated by appending \", Carousel\" to the programmatic name.\n\n* Each item in the carousel has its own independent role or accessibility trait. For example, if the item is interactive, the role will be `.button`.\n\n* **UIKit**\n  * A common method of implementing a carousel involves using `UICollectionView` and its corresponding protocols. Each item of the carousel is a `UICollectionViewCell`.\n  * Set the `accessibilityTraits` of the overall carousel role to `.adjustable`, and then append \", Carousel\" to the programmatic name to notify the user of the role\n  * An individual item of the carousel will have its own role that is dependent on whether it is interactive. Assign the role that best fits your use case.\n\n* **SwiftUI**\n  * As there are different ways to implement a carousel, use your best judgment for your use case.\n  * Append \", Carousel\" to the programmatic name for the overall carousel\n  * An individual item of the carousel will have its own role that is dependent on whether it is interactive. Assign the role that best fits your use case.\n  * Use view modifier `accessibilityAddTraits(:)` to add traits.\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* Group visible label with the carousel, if applicable.\n\n* Group the title and any description with each item in the carousel.\n\n* **UIKit**\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* Indicate where the item is in the carousel by announcing the position/index out of the total number of items. (see Announcements below)\n\n* **UIKit**\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n\n* **SwiftUI**\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Custom Gestures\n\n* The expected experience is that when users swipe left or right, they are navigating from one section of the screen to another. When users swipe up or down on the carousel, the user is scrolling through the carousel\n\n* **UIKit**\n\n  * First, ensure that the accessibility trait of the carousel is `.adjustable`.\n  * Then, you are able to take advantage of the `accessibilityIncrement` and `accessibilityDecrement` methods\n\n  ```swift\n  override func accessibilityIncrement() {\n      // Move forward one item\n\n  }\n\n  override func accessibilityDecrement() {\n      // Move backward one item\n\n  }\n  ```\n\n* **SwiftUI**\n  * There are many approaches to applying custom gestures to a component\n  * One suggestion is to use `.accessibilityAdjustableAction` with a `switch` statement for the `direction`, and changing the index of the cell depending on whether the direction is `.increment` or `.decrement`\n\n    * \"Incrementing\" should move to the next item\n    * \"Decrementing\" should move to the previous item\n\n    ```swift\n    .accessibilityAdjustableAction { direction in\n        switch direction {\n        case .increment:\n            // Go to next page\n\n        case .decrement:\n            // Go to previous page\n\n        }\n    }\n    ```\n\n### Announcements\n\n* “Showing slides x of y” are common announcements to give screen readers context of layout\n* “Custom actions available.  Swipe up or down to change slides” – common custom actions announcement",
          "developerNotes": ""
        },
        {
          "label": "Checkbox",
          "name": "checkbox",
          "type": "file",
          "generalNotes": "How to test a checkbox",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a checkbox\n\nGIVEN THAT I am on a screen with a checkbox\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the checkbox\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the checkbox should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the checkbox should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the checkbox\n     * THEN the focus should move to the checkbox\n       * AND the checkbox's name, role, and state should be expressed\n   * WHEN I double-tap the checkbox\n     * THEN the checkbox should toggle between CHECKED and NOT CHECKED states\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the checkbox\n     * THEN its name should describe the purpose of the control and match the visible label\n       * AND its role should be identified as a checkbox in Android and as a button or checkbox in iOS\n       * AND its visible label should be grouped with the checkbox in a single swipe\n       * AND its state (DISABLED/DIMMED, CHECKED, NOT CHECKED, SELECTED, UNSELECTED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text label should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/checkbox>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a checkbox\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the checkbox\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, state\n   * Doubletap: Checkbox toggles between checked and unchecked states\n\n3. Listen to screenreader output on all devices\n\n   * Name: Name describes the purpose of the control and matches the visible label\n   * Role: Identifies itself as a checkbox in Android and a Button or checkbox in iOS\n   * Group: Visible label can be grouped with the checkbox in a single swipe\n   * State: Expresses its state (disabled/dimmed, checked, not checked, selected, unselected)\n\n4. Test device settings\n\n   * Text resize: Text label can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/checkbox>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/checkbox/checkboxVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Andriod Talkback\n\n<video controls>\n  <source src=\"media/video/native/checkbox/checkboxTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A check box lets the user choose between two opposite states, actions or values\n* You should use a native control when at all possible vs a custom element, as it will automatically and correctly announce the role without additional development effort\n* A check box should toggle between checked and unchecked. It should not automatically navigate the user to another field or screen when activated, as that may cause a change of context. Revealing new information on the same screen as a result of activating a checkbox is usually ok, as it is not a change of context.\n* Name, Role, State must be announced when focus is on the control. Announcing the label only in a separate swipe before the checkbox does not meet this requirement.\n\n#### Code example\n\n```java\nval checkedState = remember { mutableStateOf(true) }\nval stateNotSubscribed = \"Not Selected\"\nval stateSubscribed = \"Selected\"\nRow(\n  modifier = Modifier\n        .semantics {\n            stateDescription = if (checkedState.value) { stateSubscribed } else { stateNotSubscribed }\n            contentDescription = \"Subscribe\"\n        }\n        .toggleable(\n            value = checkedState.value,\n            onValueChange = { checkedState.value = it },\n            role = Role.Checkbox\n        )\n  ) {\n    Checkbox(\n            modifier = Modifier.align(Alignment.CenterVertically),\n            checked = checkedState.value,\n            onCheckedChange = null\n    )\n        Text(text = \"Subscription\")\n    }\n```\n\n### Name\n\n* Programmatic name describes the purpose of the control\n\n* Programmatic name matches the visible text label\n\n* **Android Views**\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control (best practice)\n\n* **Jetpack Compose**\n  * By default, the simple checkbox composable is readout & focused separately from its label text, which makes it hard to understand the context.\n  * Use `Row` composable and `toggleable(role = Role.Checkbox)` with inner element as `Checkbox` composable (recommended practice) to have entire row including its label focused for selection, so it allows screenreader to read the name and role together.\n  * Optional: use `Modifier.semantics {  contentDescription = \"\" }` for a more descriptive name\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n  * CheckBox Class\n  * Announced as \"checkbox\"\n\n* **Jetpack Compose**\n  * Simple checkbox composable.\n  * Alternatively use checkbox composable in combination with `Row` and `toggleable(role = Role.Checkbox)`. Code example above.\n  * Announced as \"checkbox\"\n\n### Groupings\n\n* Group visible label with button (if applicable) to provide a programmatic name for the button\n\n* **Android Views**\n  * ViewGroup\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n  * use `labelFor`\n\n* **Jetpack Compose**\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to importantForAccessibility when compared to android views.\n  * To allow checkbox grouping, specify `onCheckedChange = null` on inner simple checkbox composable when combined with `Row` composable and `toggleable(value = checkedState.value, onValueChange = { checkedState.value = it })`. This makes the entire row group selectable including its label.\n  * `FocusRequester` can be used to request focus to individual components with in the group. More on FocusRequester in the focus section below.\n\n### State\n\n* When native code is not available for a state, add the state to the programmatic name (label).  Add logic when needed.\n\n* **Android Views**\n  * Active: `android:enabled=true`, `isChecked`, `setChecked`\n  * Disabled: `android:enabled=false` announced as: \"disabled\"\n\n* **Jetpack Compose**\n  * Checked: `Checkbox(checked = true)` announced as: \"checked\"\n  * Enabled:  `Checkbox(enabled = true)`\n  * Disabled: `Checkbox(enabled = false)` announced as: \"disabled\"\n  * When using checkbox composable with row and toggleable, need to specify `Modifier.toggleable(enabled = false)` along with `Checkbox(enabled = false)`\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement.\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `Important_For_Accessibility_false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * *Example:* To customize the focus events behaviour\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Checked, label, checkbox, double tap to toggle\"\n* \"Not checked, label, checkbox, double tap to toggle\"",
          "iosDeveloperNotes": "### General Notes\n\n* A check box lets the user choose between two opposite states, actions or values\n* You should use a native app control when at all possible vs a custom element, as it will automatically and correctly announce the role without additional development effort\n* A check box should toggle between checked and unchecked. It should not automatically navigate the user to another field or screen when activated, as that may cause a change of context. Revealing new information on the same screen as a result of activating a checkbox is usually ok, as it is not a change of context\n* Name, Role, State must be announced when focus is on the control. Announcing the label only in a separate swipe before the checkbox does not meet this requirement\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* **UIKit**\n  * You can programmatically set the visible label with `setTitle()`.\n    * The checkbox's title will overwrite the checkbox's `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n  * By default, the visible label of a Toggle is the accessibility label\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n  * Since there is no native checkbox in UIKit, implementing a custom checkbox may be necessary using `UIButton`, `UISwitch`, `UIControl`, or another class.\n    * Extend from one of the UIKit native controls above. A common control for custom checkboxes to extend from is the `UIButton`, but choose the native control that best fits your use case.\n    * Provide your own checked and unchecked checkbox images\n    * Implement action handlers for your custom checkbox\n    * Set accessibility properties accordingly\n  * If necessary, set `accessibilityTraits` to `.button`. Be sure to set the accessibility value to either \"Checked\" or \"Unchecked\" to indicate that this control behaves as a checkbox.\n  * An alternative to setting the accessibility trait to `.button` is removing and hiding the accessibility trait using `accessibilityTraits.remove(:)`. Then, append \", Checkbox\" to the programmatic name\n\n* **SwiftUI**\n  * Use native `Toggle` view with `toggleStyle(.checkbox)`\n\n### Groupings\n\n* Group visible label with checkbox, if applicable, to provide a programmatic name for the checkbox.\n\n* Group the units such that the label, role, and state of the checkbox is announced in a single announcement.\n\n* **UIKit**\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n  * If the tap gesture is removed due to grouping logic, restore the tap gesture functionality using bindings to bind the tap gesture of the container with the state of the checkbox.\n\n### State\n\n* **UIKit**\n  * For checked state: Set `accessibilityValue` to \"Checked\"\n  * For unchecked state: Optionally, set `accessibilityValue` to \"Unchecked\"\n  * For enabled state: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n* **SwiftUI**\n  * For checked state, if necessary: Set accessibility value to \"Checked\" with `accessibility(:)`\n  * For unchecked state, if necessary: Set accessibility value to \"Unchecked\" with `accessibilityValue(:)`\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Appending checkbox to label:\n* \"Label checkbox, checked, button\"\n* \"Label checkbox, not checked, button\"  (not checked or \"unselected\" are acceptable)\n* Not appending to label:\n* \"Label, checked, button\"\n* \"Label, not checked, button\"  (both \"not checked\" or \"unselected\" are acceptable)",
          "developerNotes": ""
        },
        {
          "label": "Chip",
          "name": "chip",
          "type": "file",
          "generalNotes": "How to test a chip",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a chip\n\nGIVEN THAT I am on a screen with a chip\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\"\n     * THEN the focus should visibly move to the chip\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN any elements inside the chip should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN any elements inside the chip should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the chip\n     * THEN the focus should move to the chip\n       * AND the chip's state should be expressed, if applicable\n   * WHEN I double-tap the chip\n     * THEN the chip should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the chip\n     * THEN its name should clearly describe its purpose and match the group visible label or chip label\n       * AND its role should be identified as a button in iOS and as \"double tap to activate\" or checkbox in Android\n       * AND its state (SELECTED, DISABLED, DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text label should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/chip>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a chip\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the chip\n   * Space: Any elements inside are activated on iOS and Android\n   * Enter: Any elements inside are activated on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state, if applicable\n   * Doubletap: Activates the chip\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches the group visible label or chip label\n   * Role: Identifies as a button in iOS and \"double tap to activate\" or checkbox in Android\n   * Group: n/a\n   * State: Expresses its state (selected/disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/chip>",
          "criteria": null,
          "videos": "### Andriod Talkback\n\n<video controls>\n  <source src=\"media/video/native/chip/chip-AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* Chips are compact elements that represent an input, attribute, or small actions on a current screen\n* Often, a list of chips/filters has one label identifying the purpose of the group\n* Because the group label conveys the purpose, the value or choice text label identifies the chip\n* The chip can announce as a checkbox, button or dropdown\n* Touch target for each chip should meet a minimum of 48 x 48px\n\n### Name\n\n* Programmatic name describes the purpose of the control and matches the visible label, if there is one\n\n**Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n  **Jetpack Compose**\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Chip composable will fill the semantics properties with information inferred from the composable by default.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the Chip text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n* By default the role is button for chips with actions like AssistChip and SuggestionChip. If the chips are selectable as FilterChip or InputChip, the role is checkbox\n  **Android Views**\n  * Material `Chip`\n    **Jetpack Compose**\n  * `AssistChip`, `ElevatedAssistChip`\n  * `FilterChip`, `ElevatedFilterChip`\n  * `InputChip`\n  * `SuggestionChip`, `ElevatedSuggestionChip`\n\n### Groupings\n\n* Sometimes a visible label is provided.  Associate or group label with chip to provide a programmatic name\n\n**Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n  **Jetpack Compose**\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n**Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n  **Jetpack Compose**\n* Active: default state is active and enabled. Use `AssistChip(enabled = true)` to specify explicitly\n* Disabled:  `AssistChip(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n**Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n  **Jetpack Compose**\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n**Jetpack Compose**\n\n```java\nAssistChip(\n    onClick = { /* Do something! */ },\n    label = { Text(\"Assist Chip\") },\n    leadingIcon = {\n        Icon(\n            Icons.Filled.Settings,\n            contentDescription = \"Localized description\",\n            Modifier.size(AssistChipDefaults.IconSize)\n        )\n    }\n)\n```\n\n### Announcement example  (will vary with implementation, version and device)\n\n* \"Selected, label, index, checkbox\"   (selected state)\n* \"Not selected, label, double tap to select filter, checkbox, double tap to toggle\"   (unselected state)\n* “In-list filters” does not always get announced on each chip",
          "iosDeveloperNotes": "There is no native chip element for iOS.  The notes below are suggestions and accessibility guidance.\n\n### General Notes\n\n* Chips are compact elements that represent an input, attribute, or small actions on a current screen\n* Often, a list of chips/filters has one label identifying the purpose of the group\n* Because the group label conveys the purpose, the value text label for a chip that is a dropdown, identifies the chip\n* The chip can announce as a checkbox, button or dropdown\n* Touch target for each chip should meet a minimum of 48 x 48px\n\n### Role\n\n* See Button, Dropdown or checkbox components for guidance\n\n### Announcement example  (will vary with implementation)\n\n* \"Selected, label, filter, button, list start\" (selected state)\n* \"Not selected, label, filter, button\" (unselected state)",
          "developerNotes": ""
        },
        {
          "label": "Date Time Picker",
          "name": "date-time-picker",
          "type": "file",
          "generalNotes": "How to test a date time picker",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a date time picker\n\nGIVEN THAT I am on a screen with a date time picker\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses \"TAB\", Arrow Keys, or \"CTRL+TAB\"\n     * THEN the focus must visibly move to the picker\n   * WHEN the user presses \"SPACEBAR\" on iOS or Android\n     * THEN the time/date picker must be selected and opened\n   * WHEN the user presses \"ENTER\" on Android\n     * THEN the time/date picker must be selected and opened\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to the picker\n     * THEN the screen reader must announce the picker’s Name, Role, and Value\n   * WHEN the user performs a double-tap gesture\n     * THEN the time/date picker must be selected and opened\n   * WHEN the user swipes up or down on iOS or Android\n     * THEN the focus must move to the next item in the picker (iOS) or next item in the column (Android)\n       * AND the screen reader must announce the Name and Role of the next item\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the user swipes to the picker\n     * THEN the time/date picker must be announced with the following attributes:\n       * AND the Name must clearly describe the purpose and match any visible label\n       * AND the Role must be identified as \"Button/Adjustable\" in iOS and \"Button\" or \"Double tap to activate\" in Android\n       * AND the Group must be marked as not applicable (N/A)\n       * AND the State must announce the picker’s state (e.g., DISABLED/DIMMED)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the user adjusts text resizing settings up to 200%\n     * THEN all text must remain readable without loss of information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/inputs/date-time-picker>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a date time picker\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the picker\n   * Spacebar: Selects and opens the picker on iOS and Android\n   * Enter: Selects and opens the picker on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, value\n   * Doubletap: Selects and opens picker\n   * Swipe up or down: Focus moves to next item in picker (iOS) or next item in column (Android), expresses its name, role\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button/adjustable in iOS and button or \"double tap to activate\" in Android\n   * Group: n/a\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/inputs/date-time-picker>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* Time pickers in Android are often created as a modal that covers over top of the main app content. Users can select hours, minutes, or periods of time.\n* The clock or time picker toggles between two displays, the clock and a text input.\n* For this component, a TalkBack screen reader user should be confined inside the modal and not reach the content behind it.\n* The native component `TimePickerDialog` and `TimePicker` will supply the name, role, and state required for conformance.\n\n#### Name\n\nThe name should describe the purpose of the control.\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * By default, the programmatic name is the visible text label of the segment\n  * Compose uses semantics properties to pass information to accessibility services\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n#### Role\n\nUse the native component to give the appropriate role.\n\n* **Android Views**\n\n  * `TimePickerDialog`\n\n* **Jetpack Compose**\n\n  * `TimePicker`\n  * `TimePickerDialog`\n\n#### Groupings\n\nFollow native component grouping.\n\n#### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled.\n    * Use `Tab(enabled = true)` to specify explicitly\n  * Disabled: `Tab(enabled = false)` announces as disabled.\n    * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled.\n\n#### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* When the time picker is closed, the focus should return to the triggering element.\n\n**Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n\n* `android:focusable`\n\n* `android=clickable`\n\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n\n* `nextFocusDown`\n\n* `nextFocusUp`\n\n* `nextFocusRight`\n\n* `nextFocusLeft`\n\n* `accessibilityTraversalBefore` (or after)\n\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n\n* To hide controls: `importantForAccessibility=false`\n\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n#### Code Example\n\n* **Jetpack Compose**\n\n```java\nvar showTimePicker by remember { mutableStateOf(false) }\nval state = rememberTimePickerState()\nTimePickerDialog(\n    onCancel = { showTimePicker = false },\n    onConfirm = {\n        val cal = Calendar.getInstance()\n        cal.set(Calendar.HOUR_OF_DAY, state.hour)\n        cal.set(Calendar.MINUTE, state.minute)\n        cal.isLenient = false\n        showTimePicker = false\n    },\n) {\n    TimePicker(state = state)\n}\n```\n\n#### Announcement examples\n\n* “Hour, Minutes and Period, Select Hours, Hour displayed, Double tap to select hours” Then swipe to the hours on the clock. Double tap on your selection. Swipe back to the minutes display\n* “Minute, Double tap to select minutes” Then swipe to the clock. Swipe around the clock to select the minute. Swipe back to the AM/PM display\n* “Selected, PM, Radio button, 2 of 2, Double tap to select” Selected PM option\n* “Not selected, AM, Radio button, 1 of 2, Double tap to select”\n* “Switch to text input mode for the time input, button, Double tap to activate” Set time modal is displayed (Toggled option is “clock mode”)\n* “Set time” Heading for the text input modal\n* “Type in time” Visible text label for hour/minute text input\n* “Hour, Edit box for hour, Double tap to edit text” Hour input. User explores by touch until the keyboard is found and enters the text for the minutes and hours\n* “Colon” Colon is announced to communicate a visible time display\n* “Minutes, Edit box for minute, Double tap to edit text\" “Hour” and “Minute” are announced because it is visually displayed\n* “Dropdown list, PM, Double tap to change”\n  * “Pop up window, checked, AM, In list, Double tap to select” Pop up list\n* “Cancel, button, double tap to activate” CTA (OK is other option)",
          "iosDeveloperNotes": "### General Notes\n\n* For iOS, VoiceOver generally moves focus to the picker options when it opens\n* A \"Done\" button closes picker\n* Screen reader focus should move back to the button that opened the picker originally\n* At first swipe to the input, it may announce as a textfield, but once clicked on you will hear \"adjustable\" and now you will be inside the time/date picker\n\n### Name\n\n* Programmatic name describes the purpose of the control that opens the picker.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* Placeholder text is NOT the programmatic name\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The triggering element's title will overwrite its's `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the date picker's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label is present, use view modifier `accessibilityLabel(_:)`.\n\n#### Role\n\n* **UIKit**\n\n  * Use `UIPickerView`\n\n* **SwiftUI**\n\n  * Use native `Picker` view with `WheelPickerStyle`\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n#### Groupings\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n#### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`.\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n**SwiftUI**\n\n* For disabled, use view modifier `disabled()`.\n\n#### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* When the picker is closed, the focus should return to the triggering element.\n\n* **UIKit**\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n#### Announcement examples\n\n* For button that opens time/date picker: \"Birthday, button, activate to choose type, actions available\"\n* Value is announced along with role when picker opens: \"November, picker item, adjustable\"\n* Announcement for disabled state is \"dimmed\"",
          "developerNotes": ""
        },
        {
          "label": "Dropdown",
          "name": "dropdown",
          "type": "file",
          "generalNotes": "How to test a dropdown",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a dropdown\n\nGIVEN THAT I am on a screen with a dropdown\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the dropdown\n   * WHEN I press the \"ESCAPE\" key\n     * THEN the dropdown should close and return focus to the button that launched it\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the dropdown should be selected and opened on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the dropdown should be selected and opened on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the dropdown\n     * THEN the focus should move to the dropdown\n       * AND the dropdown's name, role, value, and state (EXPANDED or COLLAPSED) should be expressed\n   * WHEN I double-tap the dropdown\n     * THEN the dropdown should be selected and opened\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the dropdown\n     * THEN its name should clearly describe its purpose and match any visible label\n       * AND its role should be identified as a button in iOS and as \"double tap to activate\" in Android\n       * AND its visible label should be grouped or associated with the dropdown in a single swipe\n       * AND its state (DISABLED/DIMMED) should be expressed\n       * AND the EXPANDED or COLLAPSED state should be announced on the elements that close or open the dropdown\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text on the dropdown should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/dropdown>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a dropdown\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the Dropdown\n   * Spacebar: Selects and opens the Dropdown on iOS and Android\n   * Enter: Selects and opens the Dropdown on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, value & state (expanded or collapsed)\n   * Doubletap: Selects and opens Dropdown\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button in iOS and \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the Dropdown in a single swipe\n   * State: Expresses its state (disabled/dimmed). Expanded/collapsed states are announced on the elements that close or open the dropdown\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/dropdown>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/dropdown/dropdown-iOSVoiceOver.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/dropdown/dropdown-AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "* A dropdown or spinner is a button that opens a list of options.  When an option is chosen, it displays in the field (replaces the current option or placeholder)\n* The screen reader focus moves directly to first option in dropdown/spinner upon double tapping the dropdown button and is confined in the list.\n* Sometimes, a hidden \"dismiss context menu\" button after the last item is available to close it.\n* Focus should go back to the triggering dropdown/spinner button, displaying the new option\n* There must be a visible label for the dropdown field that is not a placeholder and it describes the purpose of the dropdown.\n* The screen reader focus also remains confined in the dropdown list\n* The state of expanded or collapsed should be announced\n\n### Name\n\n* Name describes the purpose of the control, with additional label description if needed.\n\n* **Android Views**\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n  * Compose uses semantics properties to pass information to accessibility services\n  * The built-in `ExposedDropdownMenuBox`, `ExposedDropdownMenu` and `DropdownMenuItem` components will fill the semantics properties with information inferred from the composable by default\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label of the `DropdownMenuItem` composable\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Required: Screen reader user is confined inside a dropdown when it opens\n* When not using native app controls (custom controls), roles will need to be manually coded.\n* **Android Views**\n  * `Spinner` Class\n  * \"pop up window\" or \"dropdown list\" can be the role\n* **Jetpack Compose**\n  * `ExposedDropdownMenuBox`, `ExposedDropdownMenu`, `DropdownMenuItem`\n\n### Groupings\n\n* Visible label, if any, is grouped with the dropdown item in a single swipe as an option for a programmatic name for the spinner\n\n* **Android Views**\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n  * When use built-in Composable `DropdownMenuItem`, `ExposedDropdownMenu` in `ExposedDropdownMenuBox`, then it has the default grouping with the elements inside.\n  * Use `Modifier.semantics(mergeDescendants = true) {}` when work on the customized dropdown items\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Expandable dropdowns\n  * State must be announced - expands/collapses, opens/closes. Add logic and announcement to the programmatic name for the state\n  * If \"opens\" or \"closes\" is not included in the name, the expanded/collapsed state must be announced\n* **Android Views**\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: disabled\n* **Jetpack Compose**\n  * Active: default state is active and enabled. Use `DropdownMenuItem(enabled = true)` to specify explicitly\n  * Disabled:  `DropdownMenuItem(enabled = false)` announces as disabled\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Moving focus into the dropdown tells the screen reader user there is a dropdown available\n\n* When a dropdown is closed, the focus should return to the triggering element.\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n**Jetpack Compose**\n\n```java\nval items = listOf(\"Item 1\", \"Item 2\", \"Item 3\")\nvar expanded by remember { mutableStateOf(false) }\nvar selectedItemText by remember { mutableStateOf(items[0]) }\nExposedDropdownMenuBox(\n    expanded = expanded,\n    onExpandedChange = { expanded = !expanded },\n) {\n    TextField(\n        // The `menuAnchor` modifier must be passed to the text field for correctness.\n        modifier = Modifier.menuAnchor(),\n        readOnly = true,\n        value = selectedItemText,\n        onValueChange = {},\n        label = { Text(\"Label\") },\n        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },\n        colors = ExposedDropdownMenuDefaults.textFieldColors(),\n    )\n    ExposedDropdownMenu(\n        expanded = expanded,\n        onDismissRequest = { expanded = false },\n    ) {\n        items.forEach { selectionOption ->\n            DropdownMenuItem(\n                text = { Text(selectionOption) },\n                onClick = {\n                    selectedItemText = selectionOption\n                    expanded = false\n                },\n                contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding\n            )\n        }\n    }\n}\n```\n\n### Announcement examples (vary with devices and OS)\n\n* \"Label, button, selected option label, in list, collapsed, double tap to activate\"  (Opens drop down menu)\n* \"Selected, selected option label, index, double tap to activate\"  (Selected list item)\n* \"Other option label, double tap to activate\"  (Other list item)",
          "iosDeveloperNotes": "There is no native dropdown element for iOS.  The notes below are suggestions and accessibility guidance.\n\n### General Notes\n\n* A dropdown is a button that opens a list of options.  When an option is chosen, it displays in the field as the value\n* The difference between a menu and dropdown is a menu item performs an action when activated.  A dropdown item only replaces the current option\n* The screen reader focus moves directly to first option in dropdown upon double tapping the dropdown button and is confined in the list.\n* Sometimes, a hidden \"dismiss context menu\" button after the last item is available to close it.\n* Focus should go back to the triggering dropdown button, displaying the new option\n* There must be a visible label for the dropdown field that is not a placeholder and it describes the purpose of the dropdown.\n* The screen reader focus also remains confined in the dropdown list\n* The state of expanded or collapsed should be announced\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition\n\n* When naming a button, do not add \"button\" to the programmatic name (label). Assigning \"Button\" as the role will handle this announcement.\n  * **Incorrect announcement:** \"Submit button, Button\"\n  * **Correct announcement:** \"Submit, Button\"\n\n* Placeholder or value text is NOT the programmatic name\n\n* **UIKit**\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* One option is to use a table view and a button inside a UIStackView\n\n* **UIKit**\n  * Use `UIButton`\n  * If necessary, set `accessibilityTraits` to `.button`.\n\n* **SwiftUI**\n  * Use native `Button` view\n  * If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as Button.\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button.\n\n* **UIKit**\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* In the case of expandable dropdowns, state of the dropdown must be announced (i.e. expanded/collapsed). Add logic and announcements to the programmatic name for the state.\n\n* **UIKit**\n  * If applicable, dropdown items should be announced whether they are selected/unselected, in the cases of radio buttons or checkboxes.\n  * For enabled dropdown items: Set `isEnabled` to `true`.\n  * For disabled dropdown items: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the dropdown item to `notEnabled`, but this may overwrite the current accessibility role of the dropdown item.\n\n* **SwiftUI**\n  * If applicable, dropdown items should be announced whether they are selected/unselected, in the cases of radio buttons or checkboxes.\n  * For selected dropdown items, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled dropdown items, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* When a menu, picker, or modal is closed, the focus should return to the triggering element.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Button label, chosen option label, button, collapsed\"  (Button that opens dropdown with selected option from dropdown and state)\n* \"Selected, chosen option label, button\" (Selected option in dropdown list)\n* \"Label, button\" (Other options in list that populate dropdown)\n* \"Dismiss context menu, button\"  (Optional Hidden button that closes dropdown)",
          "developerNotes": ""
        },
        {
          "label": "Expandable",
          "name": "expandable",
          "type": "file",
          "generalNotes": "How to test an expandable region",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an expandable region\n\nGIVEN THAT I am on a screen with an expandable region\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the expandable region\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the expandable region should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the expandable region should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the expandable region\n     * THEN the focus should move to the expandable region\n       * AND the expandable region's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the expandable region\n     * THEN the expandable region should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the expandable region\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text on the expandable region should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/expandable>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an expandable region\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the expandable region\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the expandable region\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies as an expandable region in iOS and expandable region or \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the expandable region in a single swipe\n   * State: Expresses its state (expanded/collapsed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/expandable>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/expandable/expandable-iOSVoiceOver.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/expandable/expandable-AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* An expandable region is a view that shows items in a two-level list; groups which can individually be expanded to show its children.\n* The expand/collapses indicator (caret) is not focused separately.  As part of a table row/list view, the label, images and other non-interactive content in the row are usually announced together. The caret shows the state, which should be announced as part of the whole row announcement.\n* When the row is activated to expand, the focus stays on that row and does not automatically move to the new content.\n* Name, Role, State must be stated in a single announcement when focus is on the control area (caret icon should not gain focus alone).\n\n### Name\n\n* Name describes the purpose of the control\n\n* Programmatic name matches the visible text label (if any)\n\n* **Android Views**\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of `contentDescription` in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n  * use native `Button`\n\n* **Jetpack Compose**\n  * use foundation views to create an expandable list ([Source](https://proandroiddev.com/expandable-lists-in-jetpack-compose-b0b78c767b4))\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button.\n\n* **Android Views**\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android Views**\n  * Use `AccessibilityNodeInfoCompat.ACTION_EXPAND`\n  * Use `AccessibilityNodeInfoCompat.ACTION_COLLAPSE`\n\n* **Jetpack Compose**\n  * `expandedState`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* “Amenities, 2 Hotel amenities selected, collapsed, double tap to activate”  (Label, data, state, role/action)",
          "iosDeveloperNotes": "There is no native expandable or accordion element for iOS.  The notes below are suggestions and accessibility guidance.\n\n### General Notes\n\n* An expandable region is a view that shows items in a two-level list; groups which can individually be expanded to show its children.\n* The expand/collapses indicator (caret) is not focused separately.  As part of a table row/list view, the label, images and other non-interactive content in the row are usually announced together. The caret shows the state, which should be announced as part of the whole row announcement.\n* When the row is activated to expand, the focus stays on that row and does not automatically move to the new content.\n* Name, Role, State must be stated in a single announcement when focus is on the control area (caret icon should not gain focus alone).\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n* **UIKit**\n  * You can programmatically set the visible label with `setTitle()`.\n    * The expandable region title will overwrite the expandable region `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the expandable region `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n  * Use `UIButton`\n\n* **SwiftUI**\n  * Use native `DisclosureGroup` view\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button.\n\n* **UIKit**\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new `accessibilityElement`.\n\n### State\n\n* Append “expanded” or “collapsed” to the `accessibilityLabel` or `accessibilityValue` of the button (with logic)\n\n* **UIKit**\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* “Amenities, 2 Hotel amenities selected, collapsed, double tap to activate”  (Label, data, state, role/action)",
          "developerNotes": ""
        },
        {
          "label": "Link",
          "name": "link",
          "type": "file",
          "generalNotes": "How to test a link",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a link\n\nGIVEN THAT I am on a screen with a link\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the link\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the link should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the link should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the link\n     * THEN the focus should move to the link\n       * AND the link's name, role, and state (if applicable) should be expressed\n   * WHEN I use the Rotor/TalkBack menu\n     * THEN the link should be navigable and activatable from the Rotor/TalkBack menu or by focus and double-tap\n       * AND at least one method should work\n   * WHEN I double-tap the link\n     * THEN the link should be activated\n       * AND KNOWN ISSUE: Links do not currently appear in iOS Rotor using SwiftUI\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the link\n     * THEN its name should clearly describe its purpose and destination\n       * AND its role should be identified as a link\n       * AND its state (DISABLED/DIMMED) should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text of the link should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/link>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a link\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys, or ctrl+tab: Focus visibly moves to the link\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Rotor/talkback menu: Links can be navigated to and activated from the Rotor/TalkBack menu or by focus/double tap. Only one way is required. Known issue: Links do not currently appear in iOS Rotor using SwiftUI.\n   * Doubletap: Activates the link\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose and destination is clear\n   * Role: Identifies itself as a link\n   * Group: n/a\n   * State: Expresses its state if applicable (disabled/dimmed)\n\n4. Device OS settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/link>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/link/linkIosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/link/linkAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### **Developer Notes**\n\n* Actionable text that navigates the user outside of the app to a web page (ex: opens an web browser).\n* When accessing an in-line link that is inside a paragraph with a screen reader, the focus can be around the paragraph container.\n* To activate a link, screen reader users must double tap both inline links and links outside of paragraphs.\n* There should only be a single inline link inside of a paragraph. Screen readers can only access the first link in the paragraph.\n* The correct execution of native app controls informs assistive technologies, such as voice control, screen readers, and switch access, that the element is interactive.\n\n### Name\n\n* Interactive text that describes the destination or purpose of the link\n* Programmatic name matches the visible text label\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of “Learn more” that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as “Learn more about accessible controls\".\n\n### Role\n\n* Ensure screen reader users can navigate to links from the TalkBack menu\n* Role is automatically announced if a native app component is used\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### **Android Views**\n\n* TextView - Announces as “link”\n* URLSpan / ClickableSpan\n* Linkify Class\n\n#### **Android Compose**\n\n* Compose does not have native support on Link in Text, a customized linkable text need to be added into Text composable or use a `AndroidView` to bring the Android View with `Linkify` to build Compose composable\n\n### Groupings\n\n* Link text can be grouped with paragraph text automatically to make a larger touch target, provided there is only one interactive link in view.\n\n#### **Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### **Android Compose**\n\n* `Modifier.semantics(mergeDescendants = true) {}` for the child elements grouping/merging\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n* Announcement: disabled\n\n#### **Android Compose**\n\n* Active: default state is active and enabled. Use `RadioButton(enabled = true)` to specify explicitly\n* Disabled:  `RadioButton(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus order\n* Consider how focus should be managed between child elements and their parent views or containers\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading\n* When a link is closed, the focus should return to the triggering element\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Android Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour or the sequence of focus,\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n#### **Jetpack Compose**\n\n```java\n   /**\n   * Custom Composable with AndroidView to support link in textView and the links accessibility features from talkback menu\n   */\n   @Composable\n   fun LinkText(\n      modifier: Modifier = Modifier,\n      textBody: String\n   ) {\n      AndroidView(\n         modifier = modifier,\n         factory = { context ->\n               TextView(context).apply {\n                  text = SpannableString(textBody)\n                  LinkifyCompat.addLinks(this, Linkify.WEB_URLS)\n                  movementMethod = LinkMovementMethod.getInstance()\n               }\n         }\n      )\n   }\n```\n\n### Further reading\n\n* [Handling Android App Links](https://developer.android.com/training/app-links)\n\n### Announcement examples\n\nOptions for announcements below depend on device framework and versions. Announcement order can vary. \"Double tap to activate\" hint announcement varies with implementation.\n\n* \"Label, link\"\n* \"Label, link, double tap to activate\"\n* \"Label, double tap to activate, links available, tap with three fingers to view\" (TalkBack menu appears)\n* \"All text in paragraph including link name, links available, tap with three fingers to view\" (link in paragraph)\n* \"Text in sentence, link name, link, remainder of sentence, double tap to activate, links available, tap with three fingers to view\" (link in sentence with separate link focus)\n* \"Label, disabled\" (disabled)",
          "iosDeveloperNotes": "### **Developer Notes**\n\n* Actionable link that navigates the user outside of the app to a web page (ex: opens a web browser).\n* When accessing an in-line link that is inside a paragraph with a screen reader, the focus is usually around the paragraph container.\n* To activate a link, screen reader users can double tap both inline links and links outside of paragraphs.\n* There should only be a single inline link inside of a paragraph. Screen readers can only access the first link in the paragraph.\n* The correct execution of native app controls informs assistive technologies, such as voice control, screen readers, and switch access, that the element is interactive.\n\n### Name\n\n* Interactive text that describes the destination or purpose of the link\n* Programmatic name matches the visible text label\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of \"Learn more\" that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as \"Learn more about accessible controls\".\n  * **Note:** If adding context to a generic link, ensure the visible text for the link is the first part of the label and it matches the visible text. For example, a link the has a visual label of \"Learn more\" that is not part of a paragraph may need a label with greater context in the code so it is announced by a screen reader as \"Learn more about accessible controls\".\n\n#### **UIKit**\n\n* The link's visible text will overwrite the link's `accessibilityLabel`.\n* If necessary, change the element's `accessibilityLabel` property.\n\n#### **SwiftUI**\n\n* The link's visible text will overwrite the link's `accessibilityLabel`.\n* If necessary, use view modifier `accessibilityLabel(_:)` to change the `accessibilityLabel`.\n\n### Role\n\n* When using non-native app controls (custom controls), roles will need to be manually coded.\n\n#### **UIKit**\n\n* Since UIKit does not have a native link, develop using `UIButton`\n  * If using a `UIButton` is not suitable for your use case, you may try the following strategies:\n    * Use a `UITextView` with a `NSAttributedString` with a `.link` attribute, OR\n    * Use a `UILabel` or related view and apply a `UITapGestureRecognizer`\n    * **Note:** The more complex your custom control is, the more complex the accessibility implementation can be\n* Set `accessibilityTraits` to `.link`\n* Stylize the text to appear as a link\n\n#### **SwiftUI**\n\n* Use native `Link` view\n* If necessary, use view modifier `accessibilityAddTraits(.isLink)` to assign the role as Link.\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* Link text can be grouped with paragraph text to make a larger touch target, provided there is only one interactive link in view.\n\n#### **UIKit**\n\n* Ensure that the child elements, such as the in-line link, of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom development, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n* After grouping the paragraph and the in-line link to form a single accessibility element, bind the link action to it.\n  * For the screen reader experience, focus will surround the paragraph container. Double-tapping the paragraph will activate the link.\n  * For the non-screen reader experience, do not bind the link action to the paragraph container. Non-screen readers must tap on the link itself to activate the link.\n\n### State\n\n#### **UIKit**\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the link to `notEnabled`, but this may overwrite the current accessibility role of the link.\n\n#### **SwiftUI**\n\n* For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n* When a link is closed, the focus should return to the triggering element.\n\n#### **UIKit**\n\n* Implement focus ring to be around the paragraph container, so that double-tapping the container will activate the in-line link, given that there is only one link inside the container.\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* Implement focus ring to be around the paragraph container, so that double-tapping the container will activate the in-line link, given that there is only one link inside the container.\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Announcement order can vary\n* \"Label, link\"\n* \"All text in paragraph including url, link\" (link in paragraph)\n* \"Label, dimmed, link\" (disabled)\n\n### Further reading\n\n* [UIAccessibilityTraits](https://developer.apple.com/documentation/uikit/uiaccessibilitytraits)",
          "developerNotes": ""
        },
        {
          "label": "Menu",
          "name": "menu",
          "type": "file",
          "generalNotes": "How to test a menu",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a menu\n\nGIVEN THAT I am on a screen with a menu\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move and remain confined within the menu\n   * WHEN I press the \"ESCAPE\" key\n     * THEN the menu should close and return focus to the button that launched it\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN any buttons or links within the menu should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN any buttons or links within the menu should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate within the menu\n     * THEN the focus should move and remain confined within the menu\n       * AND a two-finger swipe anywhere should dismiss the menu (Android only)\n   * WHEN I double-tap interactive elements within the menu\n     * THEN those elements should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the menu and its contents\n     * THEN interactive options within the menu should follow button guidance\n       * AND the name of interactive elements should match the visible text\n       * AND the menu's role should be identified as a menu, popover, or modal\n       * AND confining the user's focus within the menu should communicate the presence of a modal to the screen reader\n       * AND its state should be expressed (e.g., INERT when open, EXPANDED/COLLAPSED, or CLOSED/OPENED) on the elements that close or open the menu\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text within the menu should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/menu>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a menu\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves, confined within the menu\n   * Escape: The menu closes and returns focus to the button that launched it\n   * Space: Any buttons or links are activated on iOS and Android\n   * Enter: Any buttons or links are activated on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves, confined within the menu. Two finger swipe anywhere often dismisses menu (Android only)\n   * Doubletap: Activates interactive elements\n   * Group: n/a\n\n3. Listen to screenreader output on all devices\n\n   * Name: Interactive options within the menu should follow button guidance. The name should match the visible text for those buttons\n   * Role: May identify itself as a menu, popover or modal. Confining the user within the menu communicates the context to the screen reader user that there is a modal present\n   * State: Typically, when open, other content is inert. Expands/collapses, closes/opens states are announced on the elements that close or open the menu\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/menu>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/menu/menu_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/menu/menu_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A menu is a container for a list of items\n* Use native app menus when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Options to close the menu for the screen reader user:\n  * An invisible close button announced for the screen reader only, can be in the swipe order after the last menu item\n  * Two/three finger swipe to close\n  * A close button\n  * Swiping back to the element that opened menu\n* If menu hides content underneath it, the screen reader focus should be confined within the menu.\n* Tapping outside the menu to close cannot be the only option for screen reader users\n\n### Name\n\n* Name describes the purpose of the control (Ex: opens settings menu or closes menu), with additional label description if needed.\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services\n  * The built-in `DropdownMenuItem` composable will fill the semantics properties with information inferred from the composable by default\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label of the `DropdownMenuItem` composable\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Required: Screen reader user is confined inside a menu, communicating a modal is present if hiding content underneath it\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n\n  * `android.view.Menu`\n\n* **Jetpack Compose**\n\n  * `DropdownMenu`, `DropdownMenuItem`\n\n### Groupings\n\n* Visible label, if any, is grouped with the menu button in a single swipe\n\n* Group label with data to ensure reading order is logical. (Not label, label, data, data)\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * When use built-in Composable `DropdownMenuItem` in `DropdownMenu`, then it has the default grouping with the elements inside.\n  * Use `Modifier.semantics(mergeDescendants = true) {}` when work on the customized menu items\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Expandable menus\n  * State must be announced - expands/collapses, opens/closes. Add logic and announcement to the programmatic name for the state\n  * If \"opens\" or \"closes\" is not included in the name, the expands/collapses state must be announced\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: disabled\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `DropdownMenuItem(enabled = true)` to specify explicitly\n  * Disabled:  `DropdownMenuItem(enabled = false)` announces as disabled\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nvar expanded by remember { mutableStateOf(false) }\nDropdownMenu(\n    expanded = expanded,\n    onDismissRequest = { expanded = false }\n) {\n    DropdownMenuItem(\n        text = { Text(\"Settings\") },\n        onClick = { /* Handle settings! */ },\n        leadingIcon = {\n            Icon(\n                Icons.Outlined.Settings,\n                contentDescription = null\n            )\n        })\n}\n```\n\n### Announcement examples\n\n* Options for announcements below depend on framework and versions. Announcement order can vary.\n* \"Open navigation drawer, button, double tap to activate\"\n* \"More options, button, double tap to activate\"\n* \"Open main menu, button, double tap to activate\"\n* \"More options button, disabled\" (disabled state)",
          "iosDeveloperNotes": "### General Notes\n\n* A menu is a container for a list of items\n* Use native app menus when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Options to close the menu for the screen reader user:\n  * An invisible close button announced for the screen reader only, can be in the swipe order after the last menu item\n  * A close button\n  * Swiping back to the element that opened menu\n* If menu hides content underneath it, the screen reader focus should be confined within the menu\n* Tapping outside the menu to close cannot be the only option for screen reader users\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The menu's title will overwrite the menu's `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the menu's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If menu item has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded. Otherwise in native app controls, they are automatically assigned.\n\n* Since menu items are interactive, it must be indicated to the user that they are interactive such as indicating that it is a button or it can be double-tapped to be selected.\n\n* **UIKit**\n\n  * Use `UIMenu`\n\n* **SwiftUI**\n\n  * Use native app `Menu` view\n\n### Groupings\n\n* Each menu item and its children are grouped together\n\n* Ensure logical reading order\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom menu, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Native app `Menu` views are accessible by default\n  * If necessary, use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* In the case of expandable menus, state of the menu must be announced (i.e. expands/collapses, opens/closes). Add logic and announcements to the programmatic name for the state.\n\n* **UIKit**\n\n  * If applicable, menu items should be announced whether they are selected/unselected, in the cases of radio buttons or checkboxes.\n  * For enabled menu items: Set `isEnabled` to `true`.\n  * For disabled menu items: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the menu item to `notEnabled`, but this may overwrite the current accessibility role of the menu item.\n\n* **SwiftUI**\n\n  * If applicable, menu items should be announced whether they are selected/unselected, in the cases of radio buttons or checkboxes.\n  * For selected menu items, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled menu items, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Focus should be confined within the menu, which can include the button that opened it, if content underneath is hidden.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* When a menu is closed, the focus should return to the triggering element\n\n* An invisible close button can be implemented to close the menu. Ensure this button is in the swipe order, if implemented.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Options for announcements below depend on framework and versions. Announcement order can vary. \"Menu\" in label is optional, but recommended.\n* \"Label menu, button\"\n* \"Label, button\" (without recommended \"menu\" announcement)\n* \"Label menu, dimmed, button\" (disabled state)\n* \"Dismiss context menu, button\" (Invisible button in swipe past the last item in menu)",
          "developerNotes": ""
        },
        {
          "label": "Pagination Control",
          "name": "pagination-control",
          "type": "file",
          "generalNotes": "How to test a pagination control",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a pagination control\n\nGIVEN THAT I am on a screen with a pagination control\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\"\n     * THEN the focus should visibly move to interactive elements\n   * WHEN I press the \"ARROW\" keys or \"SPACEBAR\" key while focus is on the page control\n     * THEN the next page should come into view on iOS\n   * WHEN I press the \"ARROW\" keys and \"SPACEBAR\" or \"ENTER\" key\n     * THEN the focus should move to the next page on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe up or down with one finger, double-tap, or perform a three-finger horizontal swipe\n     * THEN the next page should come into view when focus is on the page control on iOS\n   * WHEN I perform a two-finger swipe\n     * THEN the next page should come into view when focus is not on the page control on Android\n   * WHEN I swipe and double-tap\n     * THEN the next page should come into view when focus is on the page control on Android\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the page index (X of X) and heading of the slide should be announced\n       * AND the control should identify as \"adjustable\" or a button in iOS\n       * AND the control should identify as \"In horizontal pager\" in Android\n       * AND the control’s state (DISABLED/DIMMED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text resize interaction is N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/pagination-control>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a pagination control\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to interactive elements\n   * Arrow and space keys: Brings next page into view when focus is on page control (iOS)\n   * Arrow keys and space/enter: Moves focus to next page (Android)\n\n2. Test mobile screenreader gestures\n\n   * Swipe up/down with one finger, double tap, or three finger horizontal swipe: Brings next page into view when focus is on page control (iOS)\n   * Two finger swipe: Brings next page into view when focus is not on page control (Android)\n   * Swipe and double tap: Brings next page into view when focus is on page control (Android)\n\n3. Listen to screenreader output on all devices\n\n   * Name: The page index (X of X) and heading of slide\n   * Role: Identifies as \"adjustable\" or button in iOS, \"In horizontal pager\" in Android\n   * Group: n/a\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: n/a\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/pagination-control>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/pagination-control/pagination-control_IosVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/pagination-control/pagination-control_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A control that displays a horizontal series of dots, each of which corresponds to a screen/page or slide\n* There are a variety of implementation alternatives for a page control:\n  * The screen reader focus may remain on the page control when it is focused and the user interacts with it. Custom actions can be implemented on the dots so that the screen reader user can swipe right or left past the page control to navigate through the screen. If there are many pages, having to swipe through all of them to get to the rest of the screen may not be a good user experience\n  * Swiping right or left to change the pages while focus is on the page control is acceptable, if there are not too many pages. Index of the page (2 of 4) must be announced\n  * Navigating through the pages while focus is not on images or slides is acceptable. Index must be announced while on each slide. Then, pagination dots do not need to be focused by the screen reader, eliminating a redundant experience\n* If a container around the entire screen is the page control, there is usually no programmatic name. But it announces the page index and possibly \"in horizontal pager\" or other information that tells the screen reader user they are within a page experience. The focus should move to a logical place in the new content\n* Pagination control must not change automatically to the next page/dot\n* Ensure the external Blue tooth keyboard user can navigate through the slides/screens\n\n### Name\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate any visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n  * Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles may need to be manually coded.\n\n* **Android Views**\n\n  * TabLayout with ViewPager\n\n* **Jetpack Compose**\n\n### Groupings\n\n* Group visible label with button (if applicable) to provide a programmatic name for the button\n\n* Group label with data to ensure reading order is logical. (Not label, label, data, data)\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n  * Disabled: `Button(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n* **Android Views**\n\n  * step 1: Create an accessibility service\n  * step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n  * step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n* **Jetpack Compose**\n\n  * List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n  * Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n### Announcements\n\n* \"Label, page three of three, List, out of grid pager” (If focus is on pagination dots and they are not interactive)\n* “Text, images, in horizontal pager” (When focus is in body of page. Swipe up and right (or left) with two fingers to change page)\n* “Images, text, page 1 of 3, list, double tap to activate” (Swipe right or left to navigate through slides and announcement includes meaningful content on the page and text, plus the index. Pagination dots are not focusable.)",
          "iosDeveloperNotes": "### General Notes\n\n* A control that displays a horizontal series of dots, each of which corresponds to a screen/page or slide\n* There are a variety of implementation alternatives for a page control:\n  * The screen reader focus may remain on the page control when it is focused and the user interacts with it. Custom actions can be implemented on the dots so that the screen reader user can swipe right or left past the page control to navigate through the screen. If there are many pages, having to swipe through all of them to get to the rest of the screen may not be a good user experience\n  * Swiping right or left to change the pages while focus is on the page control is acceptable, if there are not too many pages. Index of the page (2 of 4) must be announced\n  * Navigating through the pages while focus is not on images or slides is acceptable. Index must be announced while on each slide. Then, pagination dots do not need to be focused by the screen reader, eliminating a redundant experience\n* Pagination control must not change automatically to the next page/dot\n* Ensure the external Blue tooth keyboard user can navigate through the slides/screens\n\n### Name\n\n* **UIKit**\n\n  * Programmatic name describes the purpose of the control.\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles may need to be manually coded.\n\n* **UIKit**\n\n  * Use UIPageControl\n  * If necessary, set `accessibilityTraits` to `.adjustable`\n\n* **SwiftUI**\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcements\n\n* \"Page three of three, adjustable, swipe up or down with one finger to adjust the value\" (Focus is on pagination dots, custom actions have been implemented and the dots are interactive)\n* “Images, text, page 1 of 3, button” (Swipe right or left to navigate through slides and announcement includes meaningful content on the page and text, plus the index. Pagination dots are not focusable.)",
          "developerNotes": ""
        },
        {
          "label": "Progress Indicator",
          "name": "progress-indicator",
          "type": "file",
          "generalNotes": "How to test a progress indicator",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\nGIVEN THAT I am on a screen with a progress indicator\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the interactive part of the progress indicator\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the control should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the control should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the progress indicator\n     * THEN the focus should move to the control\n       * AND the progress indicator's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the progress indicator\n     * THEN the control should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the progress indicator\n     * THEN its name should clearly describe its purpose (e.g., \"Step 6 of 7, Account\")\n       * AND its role should be identified as a button or dropdown\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/progress-indicator>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a progress indicator\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the part of the control that is interactive\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the control, expresses its name, role, state (if applicable)\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (ex: \"Step 6 of 7, Account\")\n   * Role: Identifies itself as a button or dropdown\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/progress-indicator>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/progress-indicator/progress-indicator_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/progress-indicator/progress-indicator_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A control or graphic that shows the status of a process in real time\n* If the meaning of the process bar graphic is visible in text near it, for example, 66% of 100% or step 2 of 3 underneath a progress bar, then the graphic should be ignored by the screen reader to avoid duplication of announcements. Or group the graphic with the text in one swipe. The visible text also helps users with various disabilities to interpret the graphic\n* If the progress bar is interactive, it is in the swipe order for the screen reader and its text description is announced\n* The graphic must meet color contrast ratios for the sections that are currently active\n\n### Name\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate any visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n  * Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles may need to be manually coded.\n\n* **Android Views**\n  * `public class ProgressBar`\n\n* **Jetpack Compose**\n  * `LinearProgressIndicator` or \\`CircularProgressIndicator composables\n\n### Groupings\n\n* Group visible label with button (if applicable) to provide a programmatic name for the button\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements within the group\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n  * Disabled: `Button(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n* **Android Views**\n\n  * step 1: Create an accessibility service\n  * step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n  * step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n* **Jetpack Compose**\n\n  * List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n  * Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n### Announcements\n\n* \"Step 3 of 4” (Text, non-interactive)\n* “Step 3 of 4, button, double tap to activate” (Label, role and hint)",
          "iosDeveloperNotes": "### General Notes\n\n* A control or graphic that shows the status of a process in real time\n* If the meaning of the process bar graphic is visible in text near it, for example, 66% of 100% or step 2 of 3 underneath a progress bar, then the graphic should be ignored by the screen reader to avoid duplication of announcements. Or group the graphic with the text in one swipe. The visible text also helps users with various disabilities to interpret the graphic\n* If the progress bar is interactive, it is in the swipe order for the screen reader and its text description is announced\n* The graphic must meet color contrast ratios for the sections that are currently active\n\n### Name\n\n* **UIKit**\n\n  * Programmatic name describes the purpose of the control.\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles may need to be manually coded.\n\n* **UIKit**\n\n  * Use `UIProgressView` or `UIActivityIndicatorView`\n\n* **SwiftUI**\n\n  * Use `ProgressView`\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcements\n\n* \"Step 3 of 4” (Text, non-interactive)\n* “Step 3 of 4, button” (Label and role of button)",
          "developerNotes": ""
        },
        {
          "label": "Radio Button",
          "name": "radio-button",
          "type": "file",
          "generalNotes": "How to test a radio button",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a radio button\n\nGIVEN THAT I am on a screen with a radio button\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\"\n     * THEN the focus should visibly move to the radio button\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the radio button should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the radio button should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the radio button\n     * THEN the focus should move to the radio button\n       * AND the radio button's name, role, and state should be expressed\n   * WHEN I double-tap the radio button\n     * THEN the radio button state should toggle\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the radio button\n     * THEN its name should clearly describe its purpose and match any visible label\n       * AND its role should be identified as a button in iOS and as a radio button in Android\n       * AND its visible label should be grouped or associated with the radio button in a single swipe\n       * AND its state (DISABLED/DIMMED, iOS: CHECKED/UNCHECKED, SELECTED/UNSELECTED, Android: CHECKED/NOT CHECKED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text label should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/radio-button>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a radio button\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the radio button\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, and state\n   * Doubletap: Toggles the radio button state\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button in iOS and radio button in Android\n   * Group: Visible label can be grouped or associated with the radio button in a single swipe\n   * State: Expresses its state (disabled/dimmed, iOS: checked/unchecked, selected/unselected. Android: checked/not checked)\n\n4. Device OS Settings\n\n   * Text resize: Text label can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/radio-button>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/radio-button/radioButtonIosVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/radio-button/radioButtonAndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "* Radio buttons allow users to select an item from a predefined list of options\n* Use a native element rather than a custom element because it will announce the correct built-in screen reader announcements without additional development effort\n* A radio button should toggle between selected and unselected states. It should not automatically navigate the user to another field or screen when selected, as that may cause a change of context. Revealing new information on the same screen as a result of activating a radio button is ok, as it is usually not a change of context\n* Name, Role, State must be announced when focus is on the control. Announcing the label in the swipe before the radio button does not meet this requirement\n\n### Name\n\n* Programmatic name describes purpose while focus is on the control (or on the whole table row/blade)\n* Programmatic name matches the visible text label\n\n#### **Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control (Best practice)\n\n#### **Jetpack Compose**\n\n* Radiobutton compose class combined with Text is used\n* Recommended to use Row layout to allow for entire row to be selectable\n* Use the `click` on the row for selection event and nullify the `click` on the RadioButton.\n* Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Role is automatically announced if a native component is used\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n#### **Android Views**\n\n* Standard RadioButton with RadioGroup when applicable\n* Announced as: \"Radio Button, double tap to toggle\"\n\n#### **Jetpack Compose**\n\n* Simple `RadioButton` composable.\n* In case of radio button group, use `Column(Modifier.selectableGroup())` to add radio buttons as child views.\n* Alternatively use checkbox composable in combination with `Row` or `Colum` and `toggleable(role = Role.RadioButton)`. Code example above.\n* Announced as \"Radio Button, double tap to toggle\"\n\n### Groupings\n\n* Group visible label with radio button (label and radio button can be grouped together in a tableview/row/blade - one swipe) to provide a programmatic name for the button\n* Or use `labelFor` (Android)\n* Ensure that number of items in the group are announced, while grouping by default allows to make single selection from the set of radio buttons.\n* Using `selectableGroup()` announces the number of items.\n\n#### **Android Views**\n\n* ViewGroup\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false.\n* In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement\n\n#### **Jetpack Compose**\n\n* Radiobutton can be combined with Text into either a Column or Row layout to get radio group-like behaviour so the entire layout is selectable.\n* To ensure correct accessibility behavior `Modifier.selectableGroup()` is essential.\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* States can be selected, dimmed/disabled, checked/unchecked, on/off\n\n#### **Android Views**\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n* on/off: `isChecked`, `setChecked`\n* Announcement: disabled, checked/not checked\n\n#### **Jetpack Compose**\n\n* Active: default state is active and enabled. Use `RadioButton(enabled = true)` to specify explicitly\n* Disabled:  `RadioButton(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus order.\n* Consider how focus should be managed between child elements and their parent views or containers\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n#### **Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### **Jetpack Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour or the sequence of focus,\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from the label. Options for announcements below depend on framework and versions. Announcement order can vary.\n* \"Checked, label, radio button, double tap to toggle\" (selected state)\n* \"Not checked, label, radio button, double tap to toggle\" (unselected state)\n* \"Not checked, label, radio button, double tap to select\" (unselected state)",
          "iosDeveloperNotes": "* Radio buttons allow a user to select one item from a predefined list of options\n* A radio button should toggle between selected and unselected states. It should not automatically navigate the user to another field or screen when selected, as that may cause a change of context. Revealing new information on the same screen as a result of activating a radio button is ok, as it is usually not a change of context\n* Name, Role, State must be announced when focus is on the control. Announcing the label in the swipe before the radio button does not meet this requirement\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n* If a visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n* Placeholder text is NOT the programmatic name.\n\n#### **UIKit**\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The radio button's title will overwrite its `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the radio button's `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n#### **SwiftUI**\n\n* By default, the visible label of a radio group is the accessibility label of that radio group\n  * The visible label of each radio button within a radio group is the accessibility label of that radio button\n* If no visible label, use view modifier `accessibilityLabel(_:)` and assign to the radio group and/or individual radio buttons accordingly.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n#### **UIKit**\n\n* Since there is no native radio button in UIKit, you can implement a custom radio button by using `UIButton`, `UISwitch`, `UIControl`, or another class.\n* If necessary, set `accessibilityTraits` to `.button`. Be sure to set the accessibility value to either \"Selected\"/\"Checked\" or \"Unselected\"/\"Unchecked\" to indicate that this control behaves as a radio button.\n* An alternative to setting the accessibility trait to `.button` is removing and hiding the accessibility trait using `accessibilityTraits.remove(:)`. Then, append \", Radio Button\" or \", Button\" to the programmatic name\n\n#### **SwiftUI**\n\n* Use a native `Picker` view with `.pickerStyle(.radioGroup)`\n\n### Groupings\n\n* Group visible label with radio button, if applicable, to provide a programmatic name for the radio button.\n* Group the units such that the label, role, and state of the radio button is announced in a single announcement.\n\n#### **UIKit**\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### **SwiftUI**\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n* If the tap gesture is removed due to grouping logic, restore the tap gesture functionality using bindings to bind the tap gesture of the container with the state of the checkbox.\n\n### State\n\n#### **UIKit**\n\n* For checked state: Set `accessibilityValue` to \"Selected\" or \"Checked\"\n* For unchecked state: Optionally, set `accessibilityValue` to \"Unselected\" or \"Unchecked\"\n* For enabled state: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n#### **SwiftUI**\n\n* For checked state, if necessary: Set accessibility value to \"Selected\" or \"Checked\" with `accessibility(:)`\n* For unchecked state, if necessary: Set accessibility value to \"Unselected\" or \"Unchecked\" with `accessibilityValue(:)`\n* For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality.\n* Consider how focus should be managed between child elements and their parent views.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* When a bottom navigation bar element is activated, the next screen's initial focus should stay in the bottom navigation bar.\n\n#### **UIKit**\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### **SwiftUI**\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"button\" in announcements below comes from the accessibility services most of the time when a native component is used, not from the label. Options for announcements below depend on framework and versions. Announcement order can vary.\n* \"Label, button\"\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)",
          "developerNotes": ""
        },
        {
          "label": "Reorder Data Row",
          "name": "reorder-data-row",
          "type": "file",
          "generalNotes": "How to test a reorder data row",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a reorder data row\n\nGIVEN THAT I am on a screen with a reorder data row\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the reorder control\n       * AND the reorder control should not be activated via keyboard input\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the reorder control\n     * THEN the focus should move to the control\n       * AND the control's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap and hold the reorder control\n     * THEN the reorder action should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the reorder control\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as a button and \"draggable\"\n       * AND the visible label should be associated with the reorder control\n       * AND its state (e.g., DISABLED/DIMMED) should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text should resize up to 200% without losing information (visible label text)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/reorder-data-row>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a reorder data row\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus can visibly move to the reorder control, but cannot be activated\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the control, expresses its name, role, state (if applicable)\n   * Doubletap and hold: Activates the reorder action\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Control identifies as a button and ”draggable”\n   * Group: Associate the visible label with the reorder control\n   * State: Expresses the state of the control is disabled (dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information (visible label text)\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/reorder-data-row>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/reorder-data-row/reorder-data-row_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/reorder-data-row/reorder-data-row_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* There is no specific native component for Reordering rows in Android. The experience is simply tap with three fingers to show custom actions (with screen reader on), double tap Actions and choose 1) Move down, 2) Move up, 3) Move to bottom, 4) Move to top or 5) Remove.\n* These are implemented as buttons. Please see the Button component for guidance.\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n* **Android Views**\n\n  * step 1: Create an accessibility service\n  * step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n  * step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n* **Jetpack Compose**\n\n  * List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n  * Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n### Announcement examples\n\n* \"Actions available. Please tap with three fingers to view\" (Brings the TalkBack menu into view)\n* \"TalkBack menu. Actions, in list, double tap to activate\" (Usually first item in the TalkBack menu)\n* \"Actions, Move down, in list, double tap to activate\" (Performs chosen action)",
          "iosDeveloperNotes": "### General Notes\n\n* A common pattern on the reorder component is to offer a delete option. If this is the case, then the label is interactive, with the delete button appearing upon double tap. \"Remove\" is added prior to the label announcement programmatically.\n* The native component provides thorough instruction announcements that are very intuitive\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* The programmatic name should match the visible text label\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The \\_component title will overwrite the \\_component `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the \\_component `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n* Follow code guidance for Button control. Ensure “draggable” is also announced.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the \\_component to `notEnabled`, but this may overwrite the current accessibility role of the control.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples for editing Keyboards in Settings\n\n* \"Remove, English US, button\" (Option to delete row - Delete button appears and announces as \"Delete, button\"\n* \"Reorder, English, button, draggable, double tap and hold, wait for the sound, then drag to rearrange\" (on three-line reorder button)\n* \"Moved below Spanish\" (After double tap and hold and two-click sound is heard, slowly drag up or down, waiting for the row above or below to announce. Continue to slowly move up or down until moved to the desired location. Lift finger to complete task)",
          "developerNotes": ""
        },
        {
          "label": "Search",
          "name": "search",
          "type": "file",
          "generalNotes": "How to test a search",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a search\n\nGIVEN THAT I am on a screen with a search\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the search field\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the search field should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the search field should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the search field\n     * THEN the focus should move to the search field\n       * AND the search field's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the search field\n     * THEN the search field should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the search field\n     * THEN its name should clearly describe its purpose and match the visible label or icon meaning (e.g., search icon)\n       * AND its role should identify as a search field or text field in iOS and as an edit box in Android\n       * AND its state (DISABLED/DIMMED) should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text within the search field should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/search>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a search\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the search field\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the search field, expresses its name, role, state (if applicable)\n   * Doubletap: Activates the search field\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label or icon (search) meaning\n   * Role: Input field identifies as a search field or text field in iOS and edit box in Android\n   * State: Expresses the search field state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/search>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/search/search_IosVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/search/search_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A search field lets people search a collection of content for specific terms they enter\n* A search field should behave similar to a typical input field\n* Ensure the placeholder does not take the place of the programmatic name for the search field\n* If auto results populate, an optional announcement can be added to the programmatic name so the user knows there are options to choose from below\n* Search icon can be the persistent visible label instead of a text label\n\n### Name\n\n* Name describes the purpose of the control\n\n* Programmatic name matches the visible text label or search icon meaning\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n\n  * `searchable`\n  * Search dialog\n  * Search widget\n\n* **Jetpack Compose**\n\n  * `SearchBar`\n\n### Groupings\n\n* Group visible label or icon with the input field, if applicable, to provide a programmatic name for the search field.\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: Set `enabled = true` in `SearchBar` composable\n  * Disabled: Set `enabled = false` in `SearchBar` composable\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Search, Search for files, edit box, double tap to edit text\" (name, placeholder, role, hint)\n* \"Auto search results below\" (Added when auto-populated search results are shown - optional)",
          "iosDeveloperNotes": "### General Notes\n\n* A search field lets people search a collection of content for specific terms they enter\n* A search field should behave similar to a typical input field\n* Ensure the placeholder does not take the place of the programmatic name for the search field\n* If auto results populate, an optional announcement can be added to the programmatic name so the user knows there are options to choose from below\n* Search icon can be the persistent visible label instead of a text label\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label or search icon meaning\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n* Placeholder text is not the programmatic name\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The search field title will overwrite the search field `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the search filed `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n\n  * Use `UISearchTextField`\n\n* **SwiftUI**\n\n  * `searchable(text:placement:)`\n\n### Groupings\n\n* Group visible label or icon with the input field, if applicable, to provide a programmatic name for the search field.\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group has their `isAccessibilityElement` properties set to `false`.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If the frame does not exist due to implmenting a custom text input field, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge label and field into a new accessibilityElement.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the \\_component to `notEnabled`, but this may overwrite the current accessibility role of the search field.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Search, Search field, double tap to edit\" (Name, role, hint)\n* \"Auto search results below\" (Added when auto-populated search results are shown - optional)",
          "developerNotes": ""
        },
        {
          "label": "Segmented Control",
          "name": "segmented-control",
          "type": "file",
          "generalNotes": "How to test a segemented control / tabs",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a segemented control / tabs\n\nGIVEN THAT I am on a screen with a segemented control / tabs\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the button\n   * WHEN I press the \"ARROW KEYS\"\n     * THEN I should navigate through the group\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the button should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the button should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the button\n     * THEN the focus should move to the button\n       * AND the button's state (if applicable) should be expressed\n   * WHEN I double-tap the button\n     * THEN the button should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as a button in iOS and as \"double tap to activate\" in Android\n       * AND its visible label (if any) should be grouped or associated with the button in a single swipe\n       * AND its state (SELECTED, DISABLED, DIMMED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting\n     * THEN this element remains exempt from text resizing requirements\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/segmented-control>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a segemented control / tabs\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the button\n   * Arrow keys: Navigate through group\n   * Spacebar: Activates the button on iOS and Android\n   * Enter: Activates the button on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state, if applicable\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies as a button in iOS and \"double tap to activate\" in Android\n   * Group: Visible label (if any) is grouped or associated with the button in a single swipe\n   * State: Expresses its state (selected/disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: This element is exempt from text resizing requirements\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/segmented-control>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/segmented-control/segmented-control_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/segmented-control/segmented-control_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A segmented control is a horizontal set of two or more segments presented, each of which functions as a mutually exclusive button\n* Once a tab has been selected, the focus should remain in the tab group on the selected tab. The user swipes through the tab group and the content revealed by the tab action should be the first swipe out of the tab group.\n\n### Name\n\n* A programmatic name is assigned to each segment title and tab\n\n* If visible text label exists, the programmatic name should match the visible text label.\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * By default, the programmatic name is the visible text label of the segment\n  * Compose uses semantics properties to pass information to accessibility services\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Since the segmented control items are interactive, it must indicate the interaction of double-tap for segment selecting.\n\n* When not using native controls, roles will need to be manually coded\n\n* **Android Views**\n\n  * Tabs\n  * Button or Image Button\n\n* **Jetpack Compose**\n\n  * `TabRow`, `Tab`\n  * `Chip`\n\n### Groupings\n\n* N/A\n\n* **Android Views**\n\n  * Follow native component grouping\n\n* **Jetpack Compose**\n\n  * Follow native component grouping\n\n### State\n\n* Selected state is announced as either \"Selected\" or \"Unselected\" for the control in group that is focused\n\n* The position of the segment out of the entire segment list must be announced\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n  * Selected: Announced as \"selected\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Tab(enabled = true)` to specify explicitly\n  * Disabled: `Tab(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n  * Use `Tab(selected = <condition logic>)` to define selected state\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nvar tabIndex by remember { mutableStateOf(0) }\nval titles = listOf(\"Tab 1\", \"Tab 2\", \"Tab 3\")\nColumn {\n    TabRow(selectedTabIndex = tabIndex) {\n        titles.forEachIndexed { index, title ->\n            Tab(\n                selected = tabIndex == index,\n                onClick = { tabIndex = index },\n                text = { Text(text = title) }\n            )\n        }\n    }\n    Box(modifier = Modifier\n        .fillMaxWidth()\n        .background(MaterialTheme.colorScheme.background)) {\n        Text(\n            modifier = Modifier.align(Alignment.Center),\n            text = \"Tab ${tabIndex + 1} selected\",\n            style = MaterialTheme.typography.titleMedium,\n            color = MaterialTheme.colorScheme.primary\n        )\n    }\n}\n```\n\n### Announcement examples\n\n* Options for announcements below depend on device framework and versions. Announcement order can vary.\n* \"Top apps, Selected, Kids, tab, 1 of 4\" (Group label, state, button label, role, index) (Selected)\n* \"Weather, tab, 2 of 4, double tap to activate\" (Button label, role, index, hint) (Not selected)",
          "iosDeveloperNotes": "### General Notes\n\n* A segmented control is a horizontal set of two or more segments presented, each of which functions as a mutually exclusive button\n* Once a tab has been selected, the focus should remain in the tab group on the selected tab. The user swipes through the tab group and the content revealed by the tab action should be the first swipe out of the tab group.\n\n### Name\n\n* A programmatic name is assigned to each segment title and tab\n\n* If visible text label exists, the programmatic name should match the visible text label\n\n* **UIKit**\n\n* You can programmatically set the visible label with `setTitle()`\n  * The segment's title will overwrite the segment’s `accessibilityLabel`\n\n* **SwiftUI**\n  * By default, the programmatic name is the visible text label of the segment/tab\n  * If necessary, use view modifier `accessibilityLabel(_:)`.\n  * Use `.accessibilityLabel(label for group)` to announce the group label for the tabs when the first tab is in focus\n  * If a segment has decorative icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`\n\n### Role\n\n* Since picker items are interactive, it must be indicated to the user that they are interactive such as indicating that it is a button or it can be double-tapped to be selected.\n\n* \"Tab\" or \"Button\" usually indicate the role\n\n* **UIKit**\n\n  * Use `UISegmentedControl`\n\n* **SwiftUI**\n\n  * Use native `Picker` view\n  * Use `SegmentedPickerStyle`\n\n### Groupings\n\n* N/A\n\n* **UIKit**\n\n  * Follow native grouping and order\n\n* **SwiftUI**\n\n  * Follow native grouping and order\n\n### State\n\n* A state of the individual segments themselves are announced, which is either \"Selected\" or \"Unselected\"\n\n* The position of the segment out of the entire set (index) must be announced.\n\n* **UIKit**\n\n  * Segments should be announced whether they are selected/unselected. Often, the button announcement and the absence of \"unselected\" is assumed to be unselected\n  * For disabled menu items: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the menu item to `notEnabled`, but this may overwrite the current accessibility role of the segmented control.\n\n* **SwiftUI**\n\n  * By default, the \"selected\" state is announced and the position of the segment out of the set.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality\n\n* Focus should be confined within the segmented control\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Options for announcements below depend on framework and versions. Announcement order can vary. Index in label is recommended.\n* \"Favorite apps\" (Group label)\n* \"Favorite apps, Selected, Weather, button, one of three\" (Group label, state, button label, role, index) (Selected, on first tab only)\n* \"Photos, button, 2 of 3\" (Button label, role, index) (not selected)\n* \"Clock, dimmed, button, 3 of 3\" (Button label, disabled state, role, index)",
          "developerNotes": ""
        },
        {
          "label": "Sheet",
          "name": "sheet",
          "type": "file",
          "generalNotes": "How to test a sheet",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a sheet\n\nGIVEN THAT I am on a screen with a sheet\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses \"TAB\", Arrow Keys, or \"CTRL+TAB\"\n     * THEN the focus must visibly move to the first interactive element\n   * WHEN the Grabber is available\n     * AND the user presses \"SPACEBAR\" on iOS or Android\n     * THEN the sheet expands or minimizes\n   * WHEN the user presses \"SPACEBAR\" on any other interactive element\n     * THEN the element activates\n   * WHEN the Grabber is available\n     * AND the user presses \"ENTER\" on Android\n     * THEN the sheet expands or minimizes\n   * WHEN the user presses \"ENTER\" on any other interactive element\n     * THEN the element activates\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes through elements\n     * THEN focus must move to the first element (hidden or visible)\n       * AND the screen reader must announce the element’s Name, Role, Value, and State\n   * WHEN the user performs a double-tap gesture\n     * THEN the interactive element must activate\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the user swipes through elements\n     * THEN each element must be announced with the following attributes:\n       * AND the Name must clearly describe its purpose\n       * AND the Role must be identified as a \"Button\" in iOS and announce \"Double tap to activate\" in Android\n       * AND the Group must be marked as not applicable (N/A)\n       * AND the State must be marked as not applicable (N/A)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN all text must remain readable without loss of information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/sheet>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a sheet\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the first interactive element\n   * Spacebar: If Grabber is available, spacebar activates on iOS and Android and will either expand or minimize sheet. Spacebar will also activate any other interactive element in the sheet.\n   * Enter: If Grabber is available, enter activates on Android and will either expand or minimize sheet.\n     Enter will also activate any other interactive element in the sheet.\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the first element (hidden or not), expresses its name, role, value & state\n   * Doubletap: Activates interactive elements\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear\n   * Role: Identifies itself as a button in iOS and \"double tap to activate\" in Android\n   * Group: n/a\n   * State: n/a\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/sheet>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A sheet helps people perform a distinct task that’s related to the parent view without taking them away from their current context\n* Use native elements when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Most sheets appear as a modal that partially covers the underlying content.\n* The screen reader is usually confined in the sheet/drawer if it covers underlining content. If a sheet does not cover other content, the screen reader can move out of it\n* Swipe anywhere on the screen dismisses the sheet\n* A grabber at the top of the sheet is used to expand/collapse if needed. When implemented, the initial focus is on the grabber\n* A grabber expands/collapses the sheet to cover half the screen or the whole screen. Even though two finger swipe will expand the sheet, the user has to start the swipe with fingers on the drawer, which may be a challenge to those who cannot see the screen. Keyboard users would not be able to expand the sheet without the grabber\n\n### Name\n\n* Name describes the purpose of the control\n\n* Ensure that the button that activates the sheet has a programmatic name. The sheet does not have one as it is implied by the button's programmatic name.\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n  * Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n\n  * `ModalBottomSheet`\n  * Grabber announces as \"double tap to activate\"\n\n* **Jetpack Compose**\n\n  * `ModalBottomSheet`\n  * `BottomSheetScaffold`\n  * When use the drag handle on top of the sheet from the native component then it will be announced as \"collapse drag handle\" with actions available (three fingers tapping to view). With no drag handle designed UI, a close button is required to be displayed and have the init focus whenever the sheet is triggered and showing.\n\n### Groupings\n\n* Group elements together logically to better understand the context of the screen\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android Views**\n\n  * Grabber, if any, announces as expands/collapses\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Partial expanded bottom sheet: Drag handle, if any, announces as \"collapse drag handle\" with actions available in taleback menu (Expand/Dismiss)\n  * Full expanded bottom sheet: Drag handle, if any, announces as \"expanded drag handle\" with actions available in talkback menu (Collapse/Dismiss)\n  * Full expanded bottom sheet with no partial expanded state: Drag handle, if any, announces as \"drag handle\" with actions available in talkback menu (Dismiss)\n  * Fixed bottom sheet with Close button and no drag handle: Close button state:\n    * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n    * Disabled: `Button(enabled = false)` announces as disabled\n    * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* Moving focus into the sheet when an action opens it makes it clear to the screen reader user that there is a sheet available\n\n* When the sheet is closed, the focus should return to the triggering element.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on the sheet should land on the grabber\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code example\n\n* **Jetpack Compose**\n\n```java\nvar openBottomSheet by rememberSaveable { mutableStateOf(false) }\nval scope = rememberCoroutineScope()\nval bottomSheetState = rememberModalBottomSheetState()\nButton(onClick = { openBottomSheet = !openBottomSheet }) {\n    Text(text = \"Show Bottom Sheet\")\n}\nif (openBottomSheet) {\n    ModalBottomSheet(\n        onDismissRequest = { openBottomSheet = false },\n        sheetState = bottomSheetState\n    ) {\n        Column(modifier = Modifier.fillMaxWidth()) {\n            OutlinedButton(\n                modifier = Modifier.align(Alignment.CenterHorizontally).semantics {\n                    disabled()\n                },\n                // Note: If you provide logic outside of onDismissRequest to remove the sheet,\n                // you must additionally handle intended state cleanup, if any.\n                onClick = {\n                    scope.launch { bottomSheetState.hide() }.invokeOnCompletion {\n                        if (!bottomSheetState.isVisible) {\n                            openBottomSheet = false\n                        }\n                    }\n                }\n            ) {\n                Text(\"Hide Bottom Sheet\")\n            }\n            LazyColumn {\n                items(50) {\n                    ListItem(\n                        headlineContent = { Text(\"Sheet item /$it\") },\n                        leadingContent = {\n                            Icon(\n                                Icons.Default.Star,\n                                contentDescription = \"Localized description\"\n                            )\n                        }\n                    )\n                }\n            }\n        }\n    }\n}\n```\n\n### Announcement examples\n\n* **Note:** When the user has hints turned on in settings, \"double tap to activate\" will announce at the end of most interactive controls. Testing should be done with hints turned on to ensure the user understands a control is interactive by hearing either \"button\" or \"double tap to activate\" or both. Announcements on Android devices vary slightly due to manufacturer.\n* \"Sheet grabber, collapsed, double tap to activate\" (In minimized state)\n* \"Sheet grabber, expanded, double tap to activate\" (In expanded state)",
          "iosDeveloperNotes": "### General Notes\n\n* A sheet helps people perform a distinct task that’s related to the parent view without taking them away from their current context\n* Use native elements when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Most sheets appear as a modal that partially covers the underlying content\n* The screen reader is usually confined in the sheet/drawer if it covers underlining content. If a sheet does not cover other content, the screen reader can move out of it\n* Ensure there is a way to collapse or close the sheet for the screen reader if covering other content. Initial focus is to an invisible dismiss button in later versions\n* A grabber/card controller is used for sheets that expand/collapse. When implemented, the initial focus can be on the grabber, then the next swipe focus is moved to the invisible dismiss button or close X.\n* A card controller button expands/collapses the sheet to cover half the screen or the whole screen. After expanding or collapsing, only the name and state gets announced, not the full announcement\n* Keyboard users would not be able to expand the sheet without the grabber\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* Ensure that the button that activates the sheet has a programmatic name. The sheet does not have its own programmatic name as it is implied by the button's programmatic name.\n\n* **UIKit**\n\n  * Set the programmatic name of the button that activates the sheet.\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the triggering button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * Set the programmatic name of the button that activates the sheet.\n  * If there is no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* Assign a role to the button that activates the sheet\n\n* The role of the sheet is implied when the sheet opens, and the initial focus lands on the invisible dismiss button (or sheet grabber, if it exists).\n\n* **UIKit**\n\n  * Use `UIButton` for the button that activates the sheet.\n  * Use `UISheetPresentationController` to implement the sheet.\n  * If necessary, set `accessibilityTraits` to `.button` for the button that activates the sheet.\n\n* **SwiftUI**\n\n  * Use native `Button` view for the button that activates the sheet\n  * Use native `sheet` view modifier for implementation of the sheet\n  * If necessary, use view modifier `accessibilityAddTraits(.isButton)` to assign the role for the button that activates the sheet.\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* Group elements together logically to better understand the context of the screen\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* The state of the sheet is implied when the sheet opens, and the initial focus lands on the invisible dismiss button.\n\n* For a sheet with adjustable height, the action to increase sheet height or decrease sheet height must be announced when the user is interacting with the sheet grabber/card controller.\n\n* The accessibility label or value must be updated with each interaction with the sheet grabber/card controller to adjust the sheet height.\n\n* **UIKit**\n\n  * For enabled state of the button that activates the sheet: Set `isEnabled` to `true`.\n  * For disabled state of the button that activates the sheet: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n* The open and closed state of the sheet is implied when the user's initial focus is on the invisible dismiss button (or sheet grabber, if it exists), and when the user closes the sheet with the invisible dismiss button or developer-implemented close button, if it exists.\n\n* For disabled state of the button that activates the sheet, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* When the sheet is closed, the focus should return to the triggering element.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus should land on the sheet grabber, if it exists. Then, the invisible dismiss button. Then, the developer-implemented close button, if it exists.\n\n* If the sheet grabber does not exist, the initial focus should land on the invisible dismiss button, and then the implemented close button.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter - `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Announcement order can vary.\n* \"Double tap to dismiss pop-up window, button\" (Invisible dismiss button- later versions)\n* \"Close, button\" (If Close X is available)\n* \"Card controller, minimized, button, adjust the size of the card overlaying screen\" (When focus is on the card controller in minimized to go to half screen)\n* \"Card controller, half screen, button, adjust the size of the card overlaying screen\" (When focus is on the card controller in half screen to go to full screen)\n* \"Card controller, full screen, button, adjust the size of the card overlaying screen\" (When focus is on the card controller in full screen to minimize)",
          "developerNotes": ""
        },
        {
          "label": "Sidebar Menu",
          "name": "sidebar-menu",
          "type": "file",
          "generalNotes": "How to test a sidebar navigation menu",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a sidebar navigation menu\n\nGIVEN THAT I am on a screen with a sidebar navigation menu\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the first interactive element in the menu\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the menu item should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the menu item should be activated on Android\n   * WHEN a close button is present\n     * THEN I activate the close button\n       * AND the menu should close and the focus should return to the triggering element\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate through the menu\n     * THEN the focus should move to each menu item\n       * AND the item's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap a menu item\n     * THEN the menu item should be activated\n   * WHEN I perform a two-finger swipe to the left anywhere on the screen\n     * THEN the menu should close (Android only)\n   * WHEN a close button is present\n     * AND I double-tap the close button\n     * THEN the menu should close and the focus should return to the triggering element\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the menu items\n     * THEN their name should clearly describe their purpose and match the visible label\n       * AND their role should be identified as a button in iOS and as a button or \"double tap to activate\" in Android\n       * AND their visible label should be grouped or associated with the menu item in a single swipe\n       * AND their state (DISABLED/DIMMED) should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/sidebar-menu>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a sidebar navigation menu\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the first interactive element in the menu\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n   * If close button present: Activate the close button and focus should return to the triggering element\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the menu item\n   * Two-finger swipe to the left anywhere on the screen closes the menu: Activates close on Android\n   * If close button present: Double tap to activate the close button and focus should return to the triggering element\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Usually identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Group: Visible label is grouped or associated with the button in a single swipe\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/sidebar-menu>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/sidebar-menu/sidebar-menu_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/sidebar-menu/sidebar-menu_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* The navigation drawer component is a slide-in menu that lets users navigate to various sections of your app\n* The navigation drawer can appear as a modal, over the top of content. Ensure the screen reader user is confined in the modal\n* Two finger swipe to the left anywhere on the screen closes menu\n* Name, Role, State must be stated in a single announcement when focus is on any button in the menu\n* Inform the screen reader user of the open/close actions on the elements that perform those actions\n* Ensure focus order is logical\n* Use headings when appropriate\n* If dropdowns are a part of the menu, group the label with the caret\n* Images don’t usually need alt text, if their meaning is in the text label next to them\n\n### Name\n\n* Name describes the purpose of the control\n\n* Programmatic name matches the visible text label\n\n* Name sometimes includes the state (opens menu), state being currently closed\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android Views**\n\n  * Use `DrawerLayout` with two child views: a `NavHostFragment` to contain the main content and a `NavigationView` for the contents of the navigation drawer\n\n* **Jetpack Compose**\n\n  * Use `ModalNavigationDrawer` composable\n\n### Groupings\n\n* Group visible label with button or dropdown, if applicable, to provide a programmatic name for the control\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Inform the screen reader of the state of opens and closes the on the button that performs this action\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n  * Disabled: `Button(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management to interactive elements\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* When a menu or modal is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement example for Google Meet Navigation Drawer\n\n* “Open navigation menu, button, double tap to activate” (menu button collapsed)\n* “Google Meet, in list, 3 items” (Menu label, list announcement, number of items in list)\n* Left swipe with two fingers anywhere on screen to dismiss menu",
          "iosDeveloperNotes": "### General Notes\n\n* A sidebar can help people navigate your app, providing quick access to top-level collections of content\n* Consider using a tab bar instead of a sidebar for a phone app, as it can require a lot of horizontal space, especially in Portrait orientation\n* Name, Role, State must be stated in a single announcement when focus is on any button in the menu\n* Inform the screen reader user of the open/close actions on the elements that perform those actions\n* Ensure the screen reader user can close the menu\n* If the secondary pane of the split view is not available to the non-screen reader user, the screen reader user should be confined in the menu\n* Ensure focus order is logical\n* Use headings when appropriate\n* If dropdowns are a part of the menu, group the label with the caret\n* Images don’t usually need alt text, if their meaning is in the text label next to them\n\n### Name\n\n* Name describes the purpose of the control\n\n* Programmatic name matches the visible text label\n\n* Name sometimes includes the state (opens menu), state being currently closed\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button title will overwrite the button `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n\n  * Use `UISplitViewController`\n  * Use `UICollectionLayoutListConfiguration.Appearance`\n  * For other elements in a menu, follow guidance for Buttons or Dropdowns\n\n* **SwiftUI**\n\n  * Use a list inside a `NavigationView`\n  * For other elements in a menu, follow guidance for Buttons or Dropdowns\n\n### Groupings\n\n* Group visible label with button or dropdown, if applicable, to provide a programmatic name for the control\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* Inform the screen reader of the state of opens and closes on the button that performs this action\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`\n  * For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus to interactive elements\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading\n\n* When a menu or modal is closed, the focus should return to the triggering element\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement example for Google Meet\n\n* “More options, button” (Image label, action)\n* “Close menu, button” (Invisible button label, action)",
          "developerNotes": ""
        },
        {
          "label": "Slider",
          "name": "slider",
          "type": "file",
          "generalNotes": "How to test a slider",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a slider\n\nGIVEN THAT I am on a screen with a slider\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"CTRL+TAB\", or \"ARROW KEYS\"\n     * THEN the focus should visibly move to the slider input\n   * WHEN I press the \"RIGHT ARROW\" key\n     * THEN the slider value should increase by one step\n   * WHEN I press the \"LEFT ARROW\" key\n     * THEN the slider value should decrease by one step\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the slider input\n     * THEN the focus should move to the slider input\n   * WHEN I swipe up or down on iOS or Android\n     * THEN the slider value should increase or decrease by one step\n   * WHEN I use the volume controls or swipe up/down on Android\n     * THEN the slider value should increase or decrease by one step\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the slider\n\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as \"adjustable\" in iOS and as \"Slider\" in Android\n       * AND its label should be programmatically grouped with the control, if possible\n       * AND its current value should be expressed, if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text label should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/slider>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a slider\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, ctr+tab or arrow keys: Focus moves visibly to the input\n   * Right and left arrow-keys: Increase / decrease value one step\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the input\n   * Ios and android-swipe-up/down: Increase/decrease slider value one step\n   * Android-volume or swipe up/down: Increase/decrease slider value one step\n\n3. Listen to screenreader output on all devices\n\n   * Name: Name describes the purpose of the control and matches the visible label\n   * Role: Identifies itself as \"adjustable\" in iOS and \"Slider\" in Android\n   * Group: Group label with control, when possible to give the slider a programmatic name\n   * State: Expresses its current value, if applicable\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/slider>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/slider/slider-iOSVoiceover.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/slider/slider-AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A slider is a horizontal track with a control called a thumb, which you\\\n  can slide with your finger to move between a minimum and maximum value (without using AT)\n* If there are labels beneath the slider that adds more context than just the changing value, add this info to each value\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n* Since the slider has a native programmatic name, it is not necessary to group the slider with its visible text label (if it exists). It is fine to have the visible text label be read in a separate announcement from the slider's programmatic name.\n* If visible text label exists, the programmatic name should match the visible text label.\n\n**Android Views**\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n\n**Jetpack Compose**\n\n* Compose uses semantics properties to pass information to accessibility services.\n* The built-in Slider composable will fill the semantics properties with information inferred from the composable by default.\n* Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n**Android Views**\n\n* Seekbar class\n* Slider class\n\n**Jetpack Compose**\n\n* `Slider` composable\n* `RangeSlider` composable\n\n### Groupings\n\n* N/A\n\n**Android Views**\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n**Jetpack Compose**\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n**Android Views**\n\n* By default, the value of the slider is announced. If not, set the `contentDescription` to the correct value.\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: disabled\n\n**Jetpack Compose**\n\n* By default, the value of the slider is announced. If not, set the `contentDescription` to the correct value.\n* Active: default state is active and enabled. Use `Slider(enabled = true)` to specify explicitly\n* Disabled:  `Slider(enabled = false)` announces as disabled\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* Consider how focus should be managed between child elements and their parent views\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n**Android Views**\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n**Jetpack Compose**\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nvar sliderPosition by remember { mutableStateOf(0f) }\nColumn {\n    Slider(\n        modifier = Modifier.semantics { contentDescription = \"Regular Slider Description\" },\n        value = sliderPosition,\n        onValueChange = { sliderPosition = it })\n}\n```\n\n### Announcement examples\n\n* \"Value, name, slider, swipe up or swipe down to adjust\"",
          "iosDeveloperNotes": "### General Notes\n\n* A slider is a horizontal track with a control called a thumb, which you\\\n  can slide with your finger to move between a minimum and maximum value (without using AT)\n* If there are labels beneath the slider that adds more context than just the changing value, add this info to each value\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n* Since the slider has a native programmatic name, it is not necessary to group the slider with its visible text label (if it exists). It is fine to have the visible text label be read in a separate announcement from the slider's programmatic name.\n* If visible text label exists, the programmatic name should match the visible text label.\n\n**UIKit**\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The slider's title will overwrite the slider's `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the slider's `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n**SwiftUI**\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`.\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n**UIKit**\n\n* Use `UISlider`\n* If necessary, set `accessibilityTraits` to `.adjustable`.\n\n**SwiftUI**\n\n* Use native `Slider` view\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* N/A\n\n**UIKit**\n\n* As long as you set the `accessibilityLabel` of the slider itself, it is not necessary to group the visible text label and the slider. (This will cause duplicate announcement of the programmatic name)\n\n**SwiftUI**\n\n* As long as you set the `accessibilityLabel` of the slider itself, it is not necessary to group the visible text label and the slider. (This will cause duplicate announcement of the programmatic name)\n\n### State\n\n**UIKit**\n\n* By default, the value of the slider is announced. If not, set the `accessibilityValue` to the correct value.\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n  * If necessary, you may change the accessibility trait of the slider to `notEnabled`, but this may overwrite the current accessibility role of the slider.\n\n**SwiftUI**\n\n* By default, the value of the slider is announced. If not, set the `accessibilityValue` to the correct value.\n* For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n**UIKit**\n\n* Natively, the visible text label has a separate focus from the slider itself.\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n**SwiftUI**\n\n* Natively, the visible text label has a separate focus from the slider itself.\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* “name, value, adjustable, swipe one finger up or down to adjust the volume\"",
          "developerNotes": ""
        },
        {
          "label": "Step Indicator",
          "name": "step-indicator",
          "type": "file",
          "generalNotes": "How to test a step indicator",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a step indicator\n\nGIVEN THAT I am on a screen with a step indicator\n\n1. Scenario: Test keyboard actions\n\n   * WHEN  I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the interactive part of the step indicator\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the step indicator should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the step indicator should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the step indicator\n     * THEN the focus should move to the step indicator\n       * AND the step indicator's name, role, and state (if applicable) should be expressed\n   * WHEN I double-tap the step indicator\n     * THEN the step indicator should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the step indicator\n     * THEN its name should clearly describe its purpose (e.g., \"Step 6 of 7, Account\")\n       * AND its role should be identified as a button or dropdown\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/step-indicator>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a step indicator\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the part of the control that is interactive\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the control, expresses its name, role, state (if applicable)\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (ex: \"Step 6 of 7, Account\")\n   * Role: Identifies itself as a button or dropdown\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/step-indicator>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A control or graphic that shows the status of a process in real time\n* If the meaning of the step indicator graphic is visible in text near it, for example, 66% of 100% or step 2 of 3 underneath a progress bar, then the graphic should be ignored by the screen reader to avoid duplication of announcements.  Or group the graphic with the text in one swipe.  The visible text also helps users with various disabilities to interpret the graphic\n* If the step indicator is interactive, it is in the swipe order for the screen reader and its text description is announced\n* The graphic must meet color contrast ratios for the sections that are currently active\n\n### Name\n\n* **Android Views**\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate any visible label with the control\n\n* **Jetpack Compose**\n  * Compose uses semantics properties to pass information to accessibility services.\n  * The built-in Button composable will fill the semantics properties with information inferred from the composable by default.\n  * Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles may need to be manually coded.\n\n* **Android Views**\n  * `public class ProgressBar`\n\n* **Jetpack Compose**\n  * `LinearProgressIndicator` or `CircularProgressIndicator` composables\n\n### Groupings\n\n* Group visible label with button (if applicable) to provide a programmatic name for the button\n\n* **Android Views**\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements within the group\n\n### State\n\n* **Android Views**\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: disabled\n\n* **Jetpack Compose**\n  * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n  * Disabled:  `Button(enabled = false)` announces as disabled\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as disabled\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n\n* The Button class by default supplies all the necessary semantics to make it fully accessible.\n\n* **Android Views**\n  * step 1: Create an accessibility service\n  * step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an AccessibilityServiceInfo object's `android:accessibilityFlags` attribute\n  * step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n* **Jetpack Compose**\n  * List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n  * Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`\n\n### Announcements\n\n* \"Step 3 of 4”  (Text, non-interactive)\n* “Step 3 of 4, button, double tap to activate” (Label, role and hint)",
          "iosDeveloperNotes": "### General Notes\n\n* A control or graphic that shows the status or steps of a process in real time\n* If the meaning of the step indicator graphic is visible in text near it, for example, 66% of 100% or step 2 of 3 underneath a progress bar, then the graphic should be ignored by the screen reader to avoid duplication of announcements.  Or group the graphic with the text in one swipe.  The visible text also helps users with various disabilities to interpret the graphic\n* If the step indicator is interactive, it is in the swipe order for the screen reader and its text description is announced\n* The graphic must meet color contrast ratios for the sections that are currently active\n\n### Name\n\n* **UIKit**\n  * Programmatic name describes the purpose of the control.\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles may need to be manually coded.\n\n* **UIKit**\n  * Use `UIProgressView` or `UIActivityIndicatorView`\n\n* **SwiftUI**\n  * Use `ProgressView`\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button\n\n* **UIKit**\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* **UIKit**\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n  * For selected, use `accessibilityAddTraits(.isSelected)`.\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcements\n\n* \"Step 3 of 4”  (Text, non-interactive)\n* “Step 3 of 4, button” (Label and role of button)",
          "developerNotes": ""
        },
        {
          "label": "Stepper",
          "name": "stepper",
          "type": "file",
          "generalNotes": "How to test a stepper",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a stepper\n\nGIVEN THAT I am on a screen with a stepper\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"CTRL+TAB\" key, or an arrow key\n     * THEN the focus should visibly move to the button\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the button should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the button should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the button\n     * THEN the focus should move to the button\n       * AND the button's state should be expressed if applicable\n   * WHEN I double-tap the button\n     * THEN the button should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the button\n     * THEN its name should clearly describe its purpose (e.g., \"Increment,\" \"Increase,\" \"Decrement,\" or \"Decrease\")\n       * AND its role should be identified as \"button\" in iOS\n       * AND on Android, it should instruct \"double tap to activate\"\n       * AND its value should dynamically be expressed when the stepper value visibly changes and when the value is in focus\n       * AND its state (DISABLED or DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the text resize setting is increased up to 200%\n     * THEN the text within the stepper should remain readable without losing information or functionality\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/stepper>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a stepper\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, ctr+tab or arrow keys: Focus visibly moves to the button\n   * Spacebar: Activates the button on iOS and Android\n   * Enter: Activates the button on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state, if applicable\n   * Doubletap: Activates the button\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (example: Increment or Increase, Decrement or Decrease)\n   * Role: Identifies as a button in iOS and \"double tap to activate\" in Android\n   * Value: Express the stepper value dynamically when it has visibly changed and when value is in focus\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/stepper>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/stepper/stepper_IosVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/stepper/stepper_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* There is no native stepper element for Android. The notes below are suggestions and accessibility guidance.\n\n### Developer notes\n\n* A stepper is a two-segment control used to increase or decrease an incremental value\n* When new value changes, it gets announced dynamically without moving focus from the increment/decrement button\n* Announcing the label when appropriate with the value gives the screen reader users and users with memory challenges context\n\n### Name\n\n* Name includes the purpose and describes the item changing, matching any visible label and references the number shown between stepper (if visible).\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label.\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to connect the visible label to the control\n\n### Role\n\n* Extend the most relevant View subclass as is relevant to this control\n* `Button` or `ImageButton`\n\n### State\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus.\n* Consider how focus should be managed between child elements and their parent views.\n* `android:focusable=true`\n* `android=clickable=true`\n* Implement an `onClick( )` event handler for keyboard, not `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but announce new content: `accessibilityLiveRegion`\n* To hide controls: `Important_For` `_Accessibility_NO`\n\n### Announcements\n\n* Increment or Increase\n  * \"Label with value, Increment or Increase, Double tap to activate\"\n  * If button is activated new value will dynamically announce\n* Decrement or Decrease\n  * \"Label with value, Decrement or Decrease, Double tap to activate\"\n  * If button is activated new value will dynamically announce",
          "iosDeveloperNotes": "### General Notes\n\n* A stepper is a two-segment control used to increase or decrease an incremental value\n* When new value changes, it gets announced dynamically without moving focus from the increment/decrement button\n* Announcing the label when appropriate with the value gives the screen reader users and users with memory challenges context\n\n### Name\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The stepper's title will overwrite the segment’s `accessibilityLabel`.\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * By default, the programmatic name is the visible text label of the segment\n  * If necessary, use view modifier `accessibilityLabel(_:)`.\n  * If a segment has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* The presence of the stepper buttons implies an interactive stepper component.\n\n* The stepper buttons themselves should be announced as \"Button\".\n\n* **UIKit**\n\n  * Use `UIStepper`\n\n* **SwiftUI**\n\n  * Use native `Stepper` view\n\n### Groupings\n\n* N/A\n\n* **UIKit**\n\n  * Follow native grouping and order\n\n* **SwiftUI**\n\n  * Follow native grouping and order\n\n### State\n\n* The stepper button's state should be announced as \"Increment\" or \"Decrement\".\n\n* The new value should be announced when the user activates one of the buttons.\n\n* **UIKit**\n\n  * For disabled stepper: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the menu item to `notEnabled`, but this may overwrite the current accessibility role of the segmented control.\n\n* **SwiftUI**\n\n  * For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcements\n\n* Increment\n  * \"Label with current value, Increment, Button\"\n  * If button is activated new value will dynamically announce\n* Decrement\n  * \"Label with current value, Decrement, Button\"\n  * If button is activated new value will dynamically announce",
          "developerNotes": ""
        },
        {
          "label": "Table Row Button",
          "name": "table-row-button",
          "type": "file",
          "generalNotes": "How to test a table row button / list item",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a table row button / list item\n\nGIVEN THAT I am on a screen with a table row button / list item\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key\n     * THEN the focus should visibly move to the row or blade if it is interactive\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the row or blade should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the row or blade should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the row or blade\n     * THEN the focus should move to the row or blade\n       * AND its state should be expressed if applicable\n   * WHEN I double-tap the row or blade\n     * THEN the row or blade should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the row or blade\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as \"button\" in iOS\n       * AND on Android, it should instruct \"double tap to activate\"\n       * AND the visible label (if any) should be grouped or associated with the button in a single swipe\n       * AND its state (DISABLED or DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the text resize setting is increased up to 200%\n     * THEN the text within the row or blade should remain readable without losing information or functionality\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/table-row-button>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a table row button / list item\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab: Focus visibly moves to the row/blade, if interactive\n   * Spacebar: Activates the row/blade on iOS and Android\n   * Enter: Activates the row/blade on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its state, if applicable\n   * Doubletap: Activates the row/blade\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches the visible label\n   * Role: Identifies as a button in iOS and \"double tap to activate\" in Android\n   * Group: Visible label (if any) is grouped or associated with the button in a single swipe\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/table-row-button>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/table-row-button/table-row-button_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/table-row-button/table-row-button_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A table row/list item can be created by using different types of native components in Android, such as `RecyclerView`, `Column`, and `LazyColumn`.\n* In general, a table row/list item can be a single interactive row or an interactive item within a scrolling, single-column row or list of rows. The table row/list item can contain multiple elements inside it such as text, images, icons, form inputs, buttons, etc.\n* However, a table row/list item can also be a non-interactive element as well\n* Generally, all items in the row are grouped together, ie., the caret is not focused separately\n* If there are two interactive elements, there will be two focusable areas\n* Often, the first focus is around the whole row, but will activate only the first interactive element\n* You should use a native component rather than custom component, because it will have the correct name, role, and values associated with it for accessibility.\n\n#### Name\n\n* Name describes the purpose of the control and matches the visible label, which can all be grouped together in the table row in an accessibility label\n\n#### Role\n\n* Add header trait to table rows that describe a section if needed, usually not interactive\n\n* **Android View**\n\n  * Use an interactive [`RecyclerView`](https://developer.android.com/develop/ui/views/layout/recyclerview) which is used to display large datasets.\n  * Should be coded as a list, if more than one row\n\n* **Jetpack Compose**\n\n  * Use regular [`Column`](https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column\\(androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1\\)) for a table row with short list\n  * Use [`LazyColumn`](https://developer.android.com/jetpack/compose/lists#lazy) for a long list of items\n  * For the row to behave as button role, use `modifier.clickable` with role of `role.Button`\n\n#### Groupings\n\n* Group text label/ images/controls together in one swipe\n\n* Only one interactive control can be in the swipe\n\n* **Android View**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' content descriptions/names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * In `item` or `items` composable of the table, the `modifier.clickable` with the role of button will group the internal components automatically.\n\n#### State\n\n* **Android View**\n\n  * Active: `android:enabled=true`\n  * Disabled\" `android:enabled=false`\n\n* **Jetpack Compose**\n\n  * Active: `enabled=true`\n  * Disabled: `enabled=false`\n\n#### Focus\n\n* Use the device's default focus functionality.\n\n* Focus ring must surround the table row\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **Android View**\n\n  * `android:focusable=true`\n  * `android=clickable=true`\n  * Implement an `onClick()` event handler for keyboard, not `onTouch()`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but announce new content: `accessibilityLiveRegion`\n  * To hide controls: `Important_For _Accessibility_NO`\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * *Example:* To customize the focus events behaviour\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n#### Announcement examples\n\n* \"Label, double tap to activate\"\n* \"Label, (plus other content in cell), double tap to activate\" (grouping - all in one focusable area)\n* \"Selected, Label, double tap to activate\" (selected state or row with a checkmark)\n* \"Label, dimmed\" (disabled state)",
          "iosDeveloperNotes": "### General Notes\n\n* This entry describes the native app table row/list item component but does not address text-based ordered or unordered lists. Text-based ordered or unordered lists should not be identified as a defect found in native app platforms as there is not an equivalent component in the native app space.\n\n### Developer Notes\n\n* A table row/list item can be created by using different types of native components in iOS, such as iOS `List`, `Button`, `UITableView`\n* In general, a table row/list item can be a single interactive row or an interactive item within a scrolling, single-column row or list of rows. The table row/list item can contain multiple elements inside it such as text, images, icons, form inputs, buttons, etc.\n* However, a table row/list item can also be a non-interactive element as well.\n* Generally, all items in the row are grouped together, ie., the caret is not focused separately\n* If there are two interactive elements, there will be two focusable areas.\n* Often, the first focus is around the whole row, but will activate only the first interactive element\n* You should use a native component rather than custom component, because it will have the correct name, role, and values associated with it for accessibility.\n\n#### Name\n\nThe programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* The visible label is the programmatic name\n  * If there is a description following the visible label, it must be announced before the role.\n\n* **UIKit**\n\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n#### Role\n\nWhen using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n\n  * Implement a [`UITableView`](https://developer.apple.com/documentation/uikit/uitableview) which is defined as \"A view that presents data using rows in a single column.\"\n  * If `UITableView` does not fit the use case, please use a `UIButton` and style as appropriate.\n  * Set the specific `UITableViewCell` as interactive or capable of a tap gesture.\n  * If user is redirected away from the app, set `accessibilityTraits` to `.link`.\n  * If user is redirected to a screen within the app, set `accessibilityTraits` to `.button`.\n\n* **SwiftUI**\n\n  * Use native [`List`](https://developer.apple.com/documentation/swiftui/list) view, defined as \"A container that presents rows of data arranged in a single column, optionally providing the ability to select one or more members.\"\n    * If using the `List` view is not suitable for your use case, you may implement as a `Button` and stylize the component as an interactable table row. Or you may make a fully custom table row from scratch that is interactable and redirects the user to the correct destination.\n  * If user is redirected away from the app, use view modifier `accessibilityAddTraits(.isButton)` to assign the role as Link.\n  * If user is redirected away from the app, use view modifier `accessibilityAddTraits(.isLink)` to assign the role as Link.\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n#### Groupings\n\n* Group text label/ images/controls together in one swipe\n\n* Only one interactive control can be in the swipe\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom table row, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n#### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`.\n    * If necessary, you may change the accessibility trait of the table rows to `notEnabled`, but this may overwrite the current accessibility role of the table row.\n\n* **SwiftUI**\n\n  * For disabled, use view modifier `disabled()`\n\n#### Focus\n\n* Use the device's default focus functionality.\n\n* Focus ring must surround the table row\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n#### Announcement examples\n\n* \"Label, button\"\n* \"Label, (plus other content in cell), button\" (grouping - all in one focusable area)\n* \"Label, button, selected\" (selected state)\n* \"Label, dimmed, button\" (disabled state)",
          "developerNotes": ""
        },
        {
          "label": "Text Input",
          "name": "text-input",
          "type": "file",
          "generalNotes": "How to test a text input",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a text input\n\nGIVEN THAT I am on a screen with a text input\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\", \"ARROW KEYS\", or \"CTRL+TAB\"\n     * THEN the focus should visibly move to and from the text input\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the user should be placed in editing mode inside the text input\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the text input\n     * THEN the focus should move to the text input\n       * AND the text input's name, role, input value, and state (if disabled) should be expressed\n   * WHEN I double-tap the text input\n     * THEN the keyboard should appear to allow editing\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the text input\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as a text field on iOS and as an edit box on Android\n       * AND its visible label should be grouped or associated with the text input in a single swipe\n       * AND its state (DISABLED/DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I adjust the device text resize setting to 200%\n     * THEN the text within the text input should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/text-input>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a text input\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to and from the text input\n   * Space bar: Places the user in editing mode inside the input\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, input value and state - if disabled\n   * Doubletap: Keyboard appears to edit\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label\n   * Role: Identifies itself as text field on iOS, edit box on Android\n   * Group: Visible label is grouped or associated with the text input in a single swipe\n   * State: The input can be disabled/dimmed\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/text-input>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/text-input/text-input_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/text-input/text-input_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A text input field allows users to enter and edit text.\n* When a user enters \"edit mode\" in the text input, it will automatically bring up the native keyboard\n* Use a native text input control whenever possible versus programming a custom element.\n  * The native text input will automatically and correctly announce the role for a screen reader without additional development effort\n* For a screen reader, the Name, Role, and State of the text input must be announced when focus is on the control.\n  * Only announcing the label for the text input in the swipe before the input field does not meet this requirement\n* Beware of \"On Focus\" Level A Violation\n  * Focus should never be sent to a text input field automatically from another component\n  * The user must control navigating to and from a text input, or any other form input (radio button, dropdown, etc)\n* Label\n  * Describes the purpose of the control\n  * The label should be visible at all times\n  * The programmatic or accessible name for the text input must match or include the same text as the visible text label\n  * For text input fields that are required (not optional), the programmatic label must include that information, for example: \"First name (required).\n\n#### Placeholder Text\n\n* Placeholder cannot be considered the visible label if it disappears at any point\n* Placeholder text must also meet color contrast minimum ratios\n* Placeholder text should not be considered the programmatic name, as it is considered as mostly instructions and not the purpose of the text field\n\n### Name\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label.\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label to the control\n\n* **Jetpack Compose**\n\n  * Compose Material Component `TextField` has a default `label` parameter built for displaying as both hint (placeholder) and floating label when the user taps on the `TextField`, the semantics uses this label value for programmatic name.\n  * If no `label` parameter is designed in your `TextField`, like a search `TextField` with a search icon as the placeholder, in this case, use modifier semantics to setup `contentdescription` value for programmatic name\n\n### Role\n\nWhen not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android View**\n\n  * `EditBox`\n\n* **Jetpack Compose**\n\n  * Standard `TextField` Composable\n\n### Groupings\n\nGroup text field and persistent visible text label together in one swipe, if not associated with it programmatically.\n\n* **Android View**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' content descriptions/names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views.\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android View**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`\n\n* **Jetpack Compose**\n\n  * Active: Set `enabled = true` in `TextField` composable\n  * Disabled: Set `enabled = false` in `TextField` composable\n\n### Focus\n\n* Focus must return back to the edit box after the user is done editing the field and dismissing the keyboard\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android View**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * FocusRequester\\` allows to request focus to individual elements with in a group of merged descendant views\n  * *Example:* To customize the focus events behaviour\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n#### Announcement Examples\n\n* “Edit box, Label, double tap to edit text” (no value)\n* “Value, Edit box, Label, double tap to edit text” (value entered)\n* \"Disabled\" (disabled state)",
          "iosDeveloperNotes": "### General Notes\n\n* A text input field allows users to enter and edit text.\n* When a user enters \"edit mode\" in the text input, it will automatically bring up the native keyboard\n* Use a native text input control whenever possible versus programming a custom element.\n  * The native text input will automatically and correctly announce the role for a screen reader without additional development effort\n* For a screen reader, the Name, Role, and State of the text input must be announced when focus is on the control.\n  * Only announcing the label for the text input in the swipe before the input field does not meet this requirement\n* Beware of \"On Focus\" Level A Violation\n  * Focus should never be sent to a text input field automatically from another component\n  * The user must control navigating to and from a text input, or any other form input (radio button, dropdown, etc)\n* Label\n  * Describes the purpose of the control\n  * The label should be visible at all times\n  * The programmatic or accessible name for the text input must match or include the same text as the visible text label\n  * For text input fields that are required (not optional), the programmatic label must include that information, for example: \"First name (required).\"\n\n#### Placeholder Text\n\n* Placeholder cannot be considered the visible label if it disappears at any point\n* Placeholder text must also meet color contrast minimum ratios\n* Placeholder text should not be considered the programmatic name, as it is considered as mostly instructions and not the purpose of the text field\n\n### Name\n\nSetting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name for the text input. If this happens, hide the visible text label from VoiceOver.\n\n* **UIKit**\n\n  * Set the visible label with `setTitle()`. Note: this will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector.\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`.\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * `TextField` has a built-in label parameter, but it is inside the field itself, which may not be ideal for some use cases. In this case, you may create a separate label and combine it with the `TextField` to create a new accessibility element. Then, apply the programmatic name with `accessibilityLabel(_:)`.\n  * If there is no built-in label parameter, such as with `TextEditor`, combine the separate label with the `TextEditor` into a new accessibility element, and apply the programmatic name with `accessibilityLabel(_:)` to the entire element as a whole.\n\n### Role\n\nWhen using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n\n  * Use `UITextField`\n  * If necessary, for a custom control, append the role to the programmatic name or accessibility value\n\n* **SwiftUI**\n\n  * Use native `TextField` or `TextEditor` view\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\nGroup the visible label with the text input field, if applicable, to provide a programmatic name for the field.\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group has their `isAccessibilityElement` properties set to `false`.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If the frame does not exist due to implmenting a custom text input field, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge label and field into a new `accessibilityElement`.\n\n### State\n\n* **UIKit**\n\n  * Active: use `isEnabled` to `true`.\n  * Disabled: use `isEnabled` to `false`.\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * Active: use `accessibilityAddTraits(.isSelected)`\n  * Disabled: use view modifier `disabled()`\n\n### Focus\n\n* Focus must return back to the text input field after the user is done editing the field and dismissing the keyboard\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * Note: You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n#### Announcement Examples\n\n* “Label, value, text field, double tap to edit” (value entered)\n* “Label, placeholder, text field, double tap to edit” (placeholder)\n* “Label, text field, double tap to edit” (no placeholder or value)\n* \"text field\" or \"editbox\" is sometimes announced prior to \"adjustable\", picker item or other controls.\n* Announcement for disabled is \"dimmed\"",
          "developerNotes": ""
        },
        {
          "label": "Time Picker",
          "name": "time-picker",
          "type": "file",
          "generalNotes": "How to test a time picker",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a time picker\n\nGIVEN THAT I am on a screen with a time picker\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, an arrow key, or \"CTRL+TAB\" key\n     * THEN the focus should visibly move to the time picker\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the time picker should be selected and opened on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the time picker should be selected and opened on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the time picker\n     * THEN the focus should move to the time picker\n       * AND its name, role, and current value should be expressed\n   * WHEN I double-tap the time picker\n     * THEN the time picker should be selected and opened\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the time picker\n     * THEN its name should clearly describe its purpose and match any visible label\n       * AND its role should be identified as \"button\" or \"adjustable\" in iOS\n       * AND on Android, it should instruct \"double tap to activate\"\n       * AND its state (DISABLED or DIMMED) should be expressed if applicable\n       * AND group-related functionality is not applicable (N/A)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the text resize setting is increased up to 200%\n     * THEN the text within the time picker should remain readable without losing information or functionality\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/time-picker>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a time picker\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the picker\n   * Spacebar: Selects and opens the picker on iOS and Android\n   * Enter: Selects and opens the picker on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, value\n   * Doubletap: Selects and opens picker\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a button/adjustable in iOS and \"double tap to activate\" in Android\n   * Group: n/a\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/time-picker>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/time-picker/time-picker_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/time-picker/time-picker_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* Time pickers are modal and cover the main content\n* Users can select hours, minutes, or periods of time\n* The clock or time picker toggles between two displays, the clock and a text input\n* The TalkBack user should be confined in the modal\n* The native component supplies all the announcements for conformance\n* Done button closes picker and screen reader focus should return to the button that opened the picker\n\n### Name\n\n* Name describes the purpose of the control\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Use `contentDescription`, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * By default, the programmatic name is the visible text label of the segment\n  * Compose uses semantics properties to pass information to accessibility services\n  * Optional: use `contentDescription` for a more descriptive name to override the default text label\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Follow native component role\n\n* **Android Views**\n\n  * `TimePickerDialog`\n\n* **Jetpack Compose**\n\n  * `TimePicker`\n  * `TimePickerDialog`\n\n### Groupings\n\n* N/A\n\n* **Android Views**\n\n  * Follow native component grouping\n\n* **Jetpack Compose**\n\n  * Follow native component grouping\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Tab(enabled = true)` to specify explicitly\n  * Disabled: `Tab(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* When the time picker is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nvar showTimePicker by remember { mutableStateOf(false) }\nval state = rememberTimePickerState()\nTimePickerDialog(\n    onCancel = { showTimePicker = false },\n    onConfirm = {\n        val cal = Calendar.getInstance()\n        cal.set(Calendar.HOUR_OF_DAY, state.hour)\n        cal.set(Calendar.MINUTE, state.minute)\n        cal.isLenient = false\n        showTimePicker = false\n    },\n) {\n    TimePicker(state = state)\n}\n```\n\n### Announcement examples\n\n* “Hour, Minutes and Period, Select Hours, Hour displayed, Double tap to select hours” Then swipe to the hours on the clock. Double tap on your selection. Swipe back to the minutes display\n* “Minute, Double tap to select minutes” Then swipe to the clock. Swipe around the clock to select the minute. Swipe back to the AM/PM display\n* “Selected, PM, Radio button, 2 of 2, Double tap to select” Selected PM option\n* “Not selected, AM, Radio button, 1 of 2, Double tap to select”\n* “Switch to text input mode for the time input, button, Double tap to activate” Set time modal is displayed (Toggled option is “clock mode”)\n* “Set time” Heading for the text input modal\n* “Type in time” Visible text label for hour/minute text input\n* “Hour, Edit box for hour, Double tap to edit text” Hour input. User explores by touch until the keyboard is found and enters the text for the minutes and hours\n* “Colon” Colon is announced to communicate a visible time display\n* “Minutes, Edit box for minute, Double tap to edit text\" “Hour” and “Minute” are announced because it is visually displayed\n* “Dropdown list, PM, Double tap to change”\n  * “Pop up window, checked, AM, In list, Double tap to select” Pop up list\n* “Cancel, button, double tap to activate” CTA (OK is other option)",
          "iosDeveloperNotes": "### General Notes\n\n* Screen reader focus moves to the picker when it opens\n* \"Picker item, adjustable\" \"swipe up or down to adjust the value\" for custom actions on the picker are the common announcements\n* Swipe right or left navigates to other columns in picker\n* Done button closes picker and screen reader focus should return to the button that opened the picker\n\n### Name\n\n* Programmatic name describes the purpose of the control that opens the picker.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* Placeholder text or value is not the programmatic name\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The date picker's title will overwrite the date picker's `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the date picker's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Role\n\n* **UIKit**\n\n  * Use `UIPickerView`\n\n* **SwiftUI**\n\n  * Use native `Picker` view with `WheelPickerStyle`\n  * If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* **UIKit**\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new `accessibilityElement`.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`.\n    * Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* When the date picker is closed, the focus should return to the triggering element.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples (Contacts - date)\n\n* “Add birthday, button\" (button name and role that opens picker)\n* Often, \"collapsed or expanded\" states are added to the button that opens the picker\n* \"February, picker item, adjustable, swipe up or down with one finger to adjust the value\" (focus is on first picker item or previously selected item)\n  * Native pickers do not always show a \"Done\" button on the keyboard. So, swiping backwards to edit another field closes the picker",
          "developerNotes": ""
        },
        {
          "label": "Timer",
          "name": "timer",
          "type": "file",
          "generalNotes": "How to test a timer",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a timer\n\nGIVEN THAT I am on a screen with a timer\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses \"TAB\", Arrow Keys, or \"CTRL+TAB\"\n     * THEN the focus must visibly move to a part of the timer control that is interactive\n   * WHEN the user presses \"SPACEBAR\" on iOS or Android\n     * THEN the timer control must activate\n   * WHEN the user presses \"ENTER\" on Android\n     * THEN the timer control must activate\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to the timer\n     * THEN the screen reader must announce the control’s Name, Role, and State (if applicable)\n   * WHEN the user performs a double-tap gesture\n     * THEN the timer control must activate\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the user navigates to the timer\n     * THEN the timer control must be announced with the following attributes:\n       * AND the Name must clearly describe the purpose (e.g., \"Start/Pause\")\n       * AND the Role must be identified as a \"Button\"\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN a user adjusts text resizing settings up to 200%\n     * THEN all text must remain readable without loss of information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/timer>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a timer\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to a part of the control that is interactive\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the interactive control, expresses its name, role, state (if applicable)\n   * Doubletap: Activates the control\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear (ex: \"Start/Pause\")\n   * Role: Identifies itself as a button\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/timer>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A timer that fires after a certain time interval has elapsed, sending a specified message to a target object\n* A visible label ensures the purpose of the timer is understood\n* Screen reader may focus on only parts of the component that are interactive, to minimize swipes, but should announce the changes dynamically in other parts as they occur (if applicable)\n* A timer is not a real-time mechanism, but is subject to the firing time of a thread\n\n### Name\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate any visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * The built-in `Button` composable will fill the semantics properties with information inferred from the composable by default.\n  * Optional: use `contentDescription` for a more descriptive name to override the default visible label of the button text.\n  * Example specification of `contentDescription` in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* When not using native controls (custom controls), roles may need to be manually coded.\n\n* **Android Views**\n\n  * `public class Timer`\n  * `extends Object`\n\n* **Jetpack Compose**\n\n  * `Timer`\n\n### Groupings\n\n* Group visible label with button (if applicable) to provide a programmatic name for the button\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* **Android Views**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n* **Jetpack Compose**\n\n  * Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n  * Disabled: `Button(enabled = false)` announces as \"disabled\"\n  * Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n  * Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Custom Accessibility Action\n\n* When UI elements are customized and coded to look like a specific component say button, to ensure that name, role, state and action are all intact might need to update accessibility service and semantics.\n\n* Disclaimer: This customization would not be needed unless it is required to modify/add gestures or actions.\n\n* The `Button` class by default supplies all the necessary semantics to make it fully accessible.\n\n* **Android Views**\n\n  * step 1: Create an accessibility service\n  * step 2: Add the `FLAG_REQUEST_ACCESSIBILITY_BUTTON` flag in an `AccessibilityServiceInfo` object's `android:accessibilityFlags` attribute\n  * step 3: To have a custom service register for the button's custom action callbacks, use `registerAccessibilityButtonCallback()`\n\n* **Jetpack Compose**\n\n  * List of custom accessibility actions can be defined relatively easily in compose compared to Views using customActions.\n  * Example: `modifier = Modifier.semantics { customActions = listOf(CustomAccessibilityAction(label = \"\", action = { true }))}`",
          "iosDeveloperNotes": "### General Notes\n\n* A timer that fires after a certain time interval has elapsed, sending a specified message to a target object\n* A visible label ensures the purpose of the timer is understood\n* Screen reader may focus on only parts of the component that are interactive, to minimize swipes, but should announce the changes dynamically in other parts as they occur (if applicable)\n* A timer is not a real-time mechanism, but is subject to the firing time of a run loop (iOS)\n\n### Name\n\n* **UIKit**\n\n  * Programmatic name describes the purpose of the control.\n  * You can programmatically set the visible label with `setTitle()`.\n    * The button’s title will overwrite the button’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the button's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles may need to be manually coded.\n\n* **UIKit**\n\n  * Use NSTimer\n\n* **SwiftUI**\n\n  * Use Timer\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new `accessibilityElement`.\n\n### State\n\n* **UIKit**\n\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * For selected, use `accessibilityAddTraits(.isSelected)`\n  * For disabled, use view modifier `disabled()`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* When a menu, picker, or modal is closed, the focus should return to the triggering element.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Toggle Switch",
          "name": "toggle-switch",
          "type": "file",
          "generalNotes": "How to test a toggle switch",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a toggle switch\n\nGIVEN THAT I am on a screen with a toggle switch\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the toggle switch or table row with a toggle switch\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the toggle switch or table row with a toggle switch should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the toggle switch or table row with a toggle switch should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate to the toggle switch or table row with a toggle switch\n     * THEN the focus should move to the toggle switch or table row with a toggle switch\n       * AND its state should be expressed\n   * WHEN I double-tap the toggle switch or table row with a toggle switch\n     * THEN the toggle switch or table row with a toggle switch should toggle between the two states (OFF/ON, DISABLED/DIMMED, ENABLED/DISABLED, CHECKED/NOT CHECKED)\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the toggle switch or table row with a toggle switch\n     * THEN its name should clearly describe its purpose and match the visible label\n       * AND its role should be identified as \"switch button\" on iOS, it should instruct \"double tap to toggle/activate setting\"\n       * AND its role should be identified as \"switch\" on Android, it should instruct \"double tap to activate/toggle\"\n       * AND the visible label should be grouped or associated with the toggle switch in a single swipe\n       * AND its state (OFF/ON, DISABLED/DIMMED, ENABLED/DISABLED, CHECKED/NOT CHECKED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the text resize setting is increased up to 200%\n     * THEN the text within the toggle switch or table row with a toggle switch should remain readable without losing information or functionality\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/toggle-switch>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a toggle switch\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the switch or table row with switch\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role, state\n   * Doubletap: Element toggles between states\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches any visible label\n   * Role: Identifies itself as a switch button in iOS and switch in Android\n   * Group: Visible label is grouped or associated with the switch in a single swipe\n   * State: Express its state (disabled/dimmed, on/off)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/toggle-switch>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/toggle-switch/toggle-switch_IosVoiceover.mp4\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/toggle-switch/toggle-switch_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A switch, or toggle, has two mutually exclusive states — on and off\n* You should implement a native switch when at all possible vs a custom switch, as it will automatically and correctly announce the role without additional development effort\n* Name, Role, State must be announced by the screen reader when focus is on the control, if it is isolated in the table row. Announcing the label in the swipe before the switch and not on the switch does not meet this requirement\n* In a table row, the label, any images, and switch are grouped together in one swipe\n\n### Name\n\n* Name describes purpose while focus is on the control (or on the whole table row)\n\n* Name should match the visible label, if any, or text in the table row\n\n* **Android View**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control (Best practice)\n\n* **Jetpack Compose**\n\n  * Use material3 `Switch` composable for the toggle switch and add the modifier `contentDescription` value for providing the content description if no separate text view for the switch.\n  * When there is a text view in the row for the toggle switch, then group them as single composable, use the modifier `toggleable` with the role of `Switch`, then the accessibility focus can focus on the whole table row and pronounce the correct programmatic name and content description.\n\n### Role\n\n* Role is automatically announced if a native component is used\n\n* When not using native controls (custom controls), roles will need to be manually coded.\n\n* **Android View**\n\n  * Standard Switch widget when applicable\n  * \"double tap to activate\" or \"double tap to toggle\" is expected announcement\n\n* **Jetpack Compose**\n\n  * Standart material `Switch` composable\n  * Row with Switch and text view, use `Modifier.toggleable()` with role of `Switch`\n\n### Groupings\n\n* Group visible label/text with switch (label and switch can be grouped together in a tableview/row/blade - all in one swipe)\n\n* **Android View**\n\n  * `ViewGroup`\n  * Set the container objects `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement\n\n* **Jetpack Compose**\n\n  * Use with `Modifier.toggleable()` in the container will perform the grouping for the inside components automatically\n\n### State\n\n* States can be selected, dimmed/disabled, on/off, checked/unchecked\n\n* **Android View**\n\n  * Active: `android:enabled=true`\n  * Disabled: `android:enabled=false`\n  * on/off: `isChecked`, `setChecked`\n  * Announcement: \"disabled\", \"on\"/\"off\", \"double tap to activate\" or \"double tap to toggle\"\n\n* **Jetpack Compose**\n\n  * Active: `enabled=true`\n  * Disabled: `enabled=false`\n  * on: `checked=true`\n  * off: `checked=false`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus order\n\n* Screen reader focus should be around the entire tablerow/blade when there is one interactive element (switch)\n\n* Consider how focus should be managed between child elements and their parent views or containers\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android View**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `Important_For_Accessibility_false`\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * *Example:* To customize the focus events behaviour\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Examples\n\n* **Jetpack Compose**\n\n```java\n@Composable\nRow(\n    modifier = Modifier .toggleable(\n        value = <Switch On-Off>,\n        role = Role.Switch,\n        onValueChange = <onValueChange>\n    )\n) {\n    Switch(\n        checked = <Switch On-Off>,\n        onCheckedChange = null\n    )\n    Text(text = <Switch Content Text>)\n}\n```\n\n### Announcement examples\n\n* “On, label, Switch, double tap to toggle” (On or Off)\n* “Off, label, Switch, disabled” (Disabled state)",
          "iosDeveloperNotes": "### General Notes\n\n* A switch, or toggle, has two mutually exclusive states — on and off\n* You should implement a native switch when at all possible vs a custom switch, as it will automatically and correctly announce the role without additional development effort\n* Name, Role, State must be announced by the screen reader when focus is on the control, if it is isolated in the table row. Announcing the label in the swipe before the switch and not on the switch does not meet this requirement\n* In a table row, the label, any images, and switch are grouped together in one swipe\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n* When naming a switch, do not add \"switch\" or \"button\" to the programmatic name.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The switch's title will overwrite its `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the switch's `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n  * If table row of switch has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* When using non-native controls (custom controls), roles will need to be manually coded.\n\n* **UIKit**\n\n  * Use `UIButton` or `UISwitch`\n  * If necessary, set `accessibilityTraits` to `.button`\n\n* **SwiftUI**\n\n  * Use native `Toggle` view\n  * Native behavior does not announce role, but the role is implied by announcing the current state\n\n### Groupings\n\n* Group visible label with switch, if applicable, to provide a programmatic name for the switch.\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* **UIKit**\n\n  * For checked state: Set `accessibilityValue` to \"On\"\n    * For unchecked state: Optionally, set `accessibilityValue` to \"Off\"\n  * For enabled: Set `isEnabled` to `true`.\n  * For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n    * If necessary, you may change the accessibility trait of the button to `notEnabled`, but this may overwrite the current accessibility role of the button.\n\n* **SwiftUI**\n\n  * By default, the `Toggle` view announces \"On\" or \"Off\"\n  * For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Screen reader focus should be around the entire tablerow/blade when there is one interactive element (switch)\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n\n  * Focus should be around the entire row that has the switch\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * Focus should be around the entire row that has the switch\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* “Label, off, double tap to toggle setting” (On or off)\n* “Label, off, switch button, double tap to toggle setting” (On or off)\n* “Label, dimmed, switch button, off” (Disabled state)",
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Notifications",
      "name": "notifications",
      "children": [
        {
          "label": "Alert Dialog",
          "name": "alert-dialog",
          "type": "file",
          "generalNotes": "How to test an alert dialog",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an alert dialog\n\nGIVEN THAT I am on a screen with an alert dialog\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, an arrow key, or \"CTRL+TAB\" key\n     * THEN the focus should visibly move and remain confined within the alert dialog\n   * WHEN I press the \"ESCAPE\" key\n     * THEN the alert should close and the focus should return to the element that launched it or to a logical place\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN any buttons or links within the alert should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN any buttons or links within the alert should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate within the alert\n     * THEN the focus should move and remain confined within the alert\n   * WHEN I double-tap an interactive element within the alert\n     * THEN that element should be activated\n       * AND group-related functionality is not applicable (n/a)\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the alert dialog and its elements\n     * THEN the names of interactive elements (such as buttons) should follow button guidance and match their visible text\n       * AND the alert should identify its role as a \"modal,\" \"dialog,\" or \"alert\" as applicable\n       * AND confining the user within the alert should communicate its modal context to the screen reader\n       * AND state-related functionality is not applicable (n/a)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the text resize setting is increased up to 200%\n     * THEN the text within the alert should remain readable without losing information or functionality\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/notifications/alert-dialog>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an alert dialog\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves, confined within the alert\n   * Escape: The alert closes and returns focus to the element that launched it or to a logical place\n   * Space: Any buttons or links are activated on iOS and Android\n   * Enter: Any buttons or links are activated on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves, confined within the alert\n   * Doubletap: This typically activates most elements\n   * Group: n/a\n\n3. Listen to screenreader output on all devices\n\n   * Name: Interactive elements within the alert should follow button guidance. The name should match the visible text for those buttons\n   * Role: May identify itself as a modal, dialog or alert. Confining the user within the alert communicates the context to the screen reader user that there is a modal present\n   * State: n/a\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/notifications/alert-dialog>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/alert-dialog/alert-dialog_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/alert-dialog/alert-dialog_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* An alert gives users ciritcal information they need right away, usually appearing over an existing screen\n* Use native alerts when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Options to close the modal for the screen reader user:\n  * Two/three finger swipe\n  * A close button\n  * Call To Action (CTA)\n  * Tapping outside the alert to close **cannot** be the only option for screen reader users\n\n### Name\n\n* Programmatic name describes the purpose of the alert dialog\n* For alerts, the programmatic name is the title of the alert\n\n#### Android Views\n\n* Use Android view component `AlertDialog` for the alert, its default accessibility behavior will cover the programmatic name by using the title text.\n\n#### Jetpack Compose\n\n* Use composable `AlertDialog` which uses the title as the programmatic name\n\n### Role\n\n* Required: Screen reader user is confined inside an alert, communicating an alert is present.\n\n#### Android Views\n\n* Android view component `AlertDialog` has the dialog role defined\n\n#### Jetpack Compose\n\n* Composable `AlertDialog` has dialog role defined\n\n### Groupings\n\n* If you are implementing a native app alert, do not modify native grouping logic\n* If you require a custom alert, follow the steps below.\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` for the child elements grouping/merging\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Follow button state guidance if applicable\n\n#### Android View\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled: `Button(enabled = false)` announces as \"disabled\"\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n\n### Focus\n\n* Use the default focus functionality of the native app alert\n* The screen reader focus **must** be confined within the alert. When the alert appears, the initial focus should be to a logical place or to where the default focus is for the device within the alert\n\n#### Android View\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n#### Jetpack Compose\n\n```java\n// Alert should not allow auto-dismiss on touching outside of the dialog view, a user action is required by displaying the Alert.\nAlertDialog(\n    onDismissRequest = {},\n    title = { Text(text = \"Title\") },\n    text = { Text(text = \"Message\") },\n    confirmButton = { Button(onClick = { }) { Text(text = \"Confirm\") } },\n    dismissButton = { Button(onClick = { }) { Text(text = \"Cancel\") } }\n)\n```\n\n### Announcement examples - Announcements vary by device and version\n\n* TalkBack sometimes announces the entire alert altogether in one announcement while focus is on the CTA.\n* \"Title, body copy, CTA button, double tap to activate\"\n* Alerts can also be announced in several swipes, separating content:\n  * Initial focus can be on the first element\n  * \"Title\" (if any)\n  * \"Body copy\"\n  * \"CTA button, double tap to activate\"",
          "iosDeveloperNotes": "### General Notes\n\n* An alert gives users critcal information they need right away, usually appearing over an existing screen\n* Use native alerts when at all possible vs a custom element, as it will handle expected behavior without additional development effort\n* Options to close the alert for the screen reader user:\n  * A close button\n  * Call To Action (CTA)\n  * Tapping outside the alert to close **cannot** be the only option for screen reader users\n\n### Name\n\n* Programmatic name describes the purpose of the alert.\n* For alerts and modals, the programmatic name is the title of the alert/modal.\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognization.\n\n#### UIKit\n\n* The visible label is the programmatic name of the alert.\n* If a visible label is not applicable in your case, set the alert's `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* The visible label is the programmatic name of the alert.\n* If no visible label, use view modifier `accessibilityLabel(_:)`.\n* If button has icon(s), hide the icon(s) from VoiceOver by using view modifier `accessibilityHidden(true)`.\n\n### Role\n\n* Required: Screen reader user is confined inside the alert, communicating an alert is present\n\n#### UIKit\n\n* Use `UIAlertController` and add actions per your use case\n\n#### SwiftUI\n\n* Use view modifier `alert(_:isPresented:presenting:actions:message:)`\n* If applicable, use view modifier `accessibilityRemoveTraits(:)` to remove unwanted traits.\n\n### Groupings\n\n* For a native app alert, do not modify native grouping logic\n\n#### UIKit\n\n* Use `UIAlertController` grouping and ordering as is\n\n#### SwiftUI\n\n* Use the native alert's grouping and ordering as is\n\n### State\n\n* Alerts that have an open/close state must be announced. Add logic and announcement to the programmatic name for the state\n* Usually no one button is disabled in native alerts.\n\n#### UIKit\n\n* When the focus lands on the alert's title, it is implied to the user that the alert is open.\n\n#### SwiftUI\n\n* When the focus lands on the alert's title, it is implied to the user that the alert is open.\n\n### Focus\n\n* Use the default focus functionality of the alert\n* The screen reader focus **must** be confined within the alert. When the alert appears, the initial focus should be to a logical place or to where the default focus is for the device within the alert.\n\n#### UIKit\n\n* If needed, follow the below for focus management.\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### SwiftUI\n\n* If needed, follow the below for focus management.\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* Three separate focus areas\n  * \"Alert, title\" (When alert appears with an audible ping)\n  * \"Body content\"\n  * \"CTA, button\"",
          "developerNotes": ""
        },
        {
          "label": "Modal",
          "name": "modal",
          "type": "file",
          "generalNotes": "How to test a modal",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a modal\n\nGIVEN THAT I am on a screen with a modal\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to any interactive element within the modal\n   * WHEN I press the \"ESCAPE\" key\n     * THEN the modal should close\n       * AND focus should return to the button that launched it\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN any buttons or links should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN any buttons or links should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN focus should move into the modal and remain confined within it\n   * WHEN I double-tap an element\n     * THEN it should be activated unless an alternative custom action is implemented\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the modal itself should not be announced as interactive\n       * AND any close button label should clearly describe the close action\n       * AND any call-to-action (CTA) elements within the modal should be announced as a button\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/segmented-control>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a modal\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to any interactive element\n   * Escape: The modal closes and returns focus to the button that launched it\n   * Space: Any buttons or links are activated on iOS and Android\n   * Enter: Any buttons or links are activated on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves into the modal, confined within the modal\n   * Doubletap: This typically activates most elements (alternative custom actions may be implemented)\n   * Group: n/a\n\n3. Listen to screenreader output on all devices\n\n   * Name: The modal itself is not interactive. Any close button label should describe the close action\n   * Role: Any CTA in the modal announces as a button\n   * State: n/a\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/controls/segmented-control>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/modal/modal_IosVoiceOver.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/modal/modal_AndroidTalkback.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* Modal dialogs draw attention to an important, narrowly scoped task, usually appearing over an existing screen\n* Options to close the modal for the screen reader user:\n  * An invisible close button announced for the screen reader only\n  * Two/three finger swipe\n  * A close button\n  * A Call To Action (CTA) that navigates the user and closes the modal\n* Tapping outside the modal to close can not be the only option for screen reader users when the modal covers other content\n\n### Name\n\n* Programmatic name describes the purpose of the modal or any interactive element\n\n#### Android Views\n\n* Use Android view component `AlertDialog` for the modal, its default accessibility behavior will cover the programmatic name by using the title text.\n\n#### Jetpack Compose\n\n* Use composable `AlertDialog`, `ModalBottomSheet` or other native composable as modal. A title view need to used as the programmatic name.\n\n### Role\n\n* Required: Screen reader user is confined inside a modal, communicating an modal is present.\n\n#### Android Views\n\n* Android view component `AlertDialog` has the dialog role defined for using as modal\n\n#### Jetpack Compose\n\n* Composable `AlertDialog` has default role defined\n* Composable `ModalBottomSheet` has default role defined\n\n### Groupings\n\n* If you are implementing a native app modal, do not modify native grouping logic\n* If you require a custom modal, follow the steps below.\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` for the child elements grouping/merging\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n* Follow button state guidance if applicable\n* Modals that have an open/close or expands/collapses state must be announced. Add logic and announcement to the programmatic name for the state\n\n#### Android Views\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled: `Button(enabled = false)` announces as \"disabled\"\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n\n### Focus\n\n* Use the default focus functionality of the modal\n* The screen reader focus **must** be confined within the modal. When the modal appears, the initial focus should be to a logical place or to where the default focus is for the device within the modal\n* Android initially focuses on the CTA (\"Close\" button) in the modal, not the text or title unless the close CTA is not designed at the first focus order in modal\n* Android often takes one swipe to bring focus inside the modal\n\n#### Android View\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `Important_For_Accessibility_false`\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* *Example:* To customize the focus events behaviour\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n#### Jetpack Compose\n\n```java\n// Use AlerDialog as Modal with onDismissRequest action that enable dialog dismiss when user touch outside the dialog modal\nAlertDialog(\n    onDismissRequest = { onDismiss(true) },\n    title = { Text(text = \"Title\") },\n    text = { Text(text = \"Message\") },\n    confirmButton = { Button(onClick = { }) { Text(text = \"Confirm\") } },\n    dismissButton = { Button(onClick = { }) { Text(text = \"Cancel\") } }\n)\n// Example on using ModalBottomSheet as Modal\nModalBottomSheet(\n    onDismissRequest = { openBottomSheet = false },\n    sheetState = bottomSheetState,\n    windowInsets = windowInsets\n) {\n    Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {\n        Button(\n          onClick = {\n              scope.launch { bottomSheetState.hide() }.invokeOnCompletion {\n                  if (!bottomSheetState.isVisible) {\n                      openBottomSheet = false\n                  }\n              }\n            }\n        ) {\n            Text(\"Close\")\n        }\n    }\n}\n```\n\n### Modal announcements\n\nInitial focus area example:\n\n* Close button \"Close, button, double tap to activate\"",
          "iosDeveloperNotes": "### General Notes\n\n* Modal dialogs draw attention to an important, narrowly scoped task, usually appearing over an existing screen\n* Options to close the modal for the screen reader user:\n  * An invisible close button announced for the screen reader only\n  * A close button\n  * A Call To Action (CTA) that navigates the user and closes the modal\n* Tapping outside the modal to close **cannot** be the only option for screen reader users when the modal covers other content\n\n### Name\n\n* Programmatic name describes the purpose of any interactive element in the modal or the title of the modal\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition\n\n#### UIKit\n\n* The visible label for any interactive element is the programmatic name for it.\n* If a visible label is not applicable in your case, set the modal's `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* The visible label for any interactive element is the programmatic name for it\n* If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Role\n\n* Required: Screen reader user is confined inside the modal, communicating a modal is present\n\n#### UIKit\n\n* Set the `modalPresentationStyle` of the `UIViewController` to a `UIModalPresentationStyle` of your choice\n\n#### SwiftUI\n\n* Use view modifier for modal, such as `.sheet`, `.fullScreenCover`, `.popover`. Apply view modifiers to adjust the size of the modal accordingly.\n\n### Groupings\n\n* Group content to minimize swipes and give context to the user\n\n#### UIKit\n\n* Since a modal is a presentation of another view, follow logical grouping and reading order within the view.\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n* If frame does not exist due to custom alert, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n  * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n* Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n* Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### SwiftUI\n\n* Since a modal is a presentation of another view, follow logical grouping and reading order within the view.\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### State\n\n* Modals that may have an open/close or expands/collapses state must be announced. Add logic and announcement to the programmatic name for the state\n\n#### UIKit\n\n* When the modal appears, the initial focus on the Close button will imply to the user that they are in a modal.\n* For disabled content within the modal: Set the content's `isEnabled` to `false`. Announcement for disabled is \"Dimmed\".\n\n#### SwiftUI\n\n* When the modal appears, the initial focus on the Close button will imply to the user that they are in a modal.\n* For disabled content, use view modifier `disabled()`.\n\n### Focus\n\n* Use the default focus functionality of the modal\n* The screen reader focus **must** be confined within the alert or modal. When the modal appears, the initial focus should be to a logical place or to where the default focus is for the device within the modal.\n* Within the modal, ensure the content is following logical reading order. Follow suggested accessibility guidance for content containing buttons, links, etc.\n\n#### UIKit\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n#### SwiftUI\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Modal announcements\n\nInitial focus areas:\n\n* Close button \"Close, button\" or\n* Invisible button at the top of the screen default announcement: \"Double tap to close modal\"",
          "developerNotes": ""
        },
        {
          "label": "Snackbar Toast",
          "name": "snackbar-toast",
          "type": "file",
          "generalNotes": "How to test a snackbar/toast",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a snackbar/toast\n\nGIVEN THAT I am on a screen with a snackbar/toast\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, an arrow key, or \"CTRL+TAB\" key\n     * THEN the focus should visibly move in logical order to the snackbar if there is an interactive element inside\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN any interactive element inside the snackbar should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN any interactive element inside the snackbar should be activated on Android\n   * WHEN there is no interactive element in the snackbar\n     * THEN the snackbar/toast should be dynamically announced without moving the focus to it\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate within the snackbar\n     * THEN the focus should move to any interactive elements inside the snackbar\n   * WHEN I double-tap an interactive element\n     * THEN the element should be activated\n   * WHEN there is no interactive element in the snackbar\n     * THEN the snackbar/toast should be dynamically announced without moving the focus to it\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads any interactive elements inside the snackbar\n     * THEN their purpose or title should be announced\n       * AND their role should be identified as \"button\" in iOS\n       * AND on Android, they should instruct \"double tap to activate\"\n       * AND the elements within the snackbar should be grouped in a way that ensures the content is understandable\n       * AND state-related functionality is not applicable (N/A)\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN the user increases the text size setting up to 200%\n     * THEN all text within the snackbar should remain fully readable\n       * AND no content or functionality should be lost or cut off\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/notifications/snackbar-toast>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a snackbar/toast\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves in logical order to the snackbar, if there is an interactive element in the snackbar\n   * Space: Any elements inside are activated on iOS and Android\n   * Enter: Any elements inside are activated on Android\n   * When no interactive element is in the snackbar: The snackbar/toast is dynamically announced, without moving focus to it\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves within the snackbar\n   * Doubletap: Activates any interactive elements within the snackbar\n   * When no interactive element is in the snackbar: The snackbar/toast is dynamically announced, without moving focus to it\n\n3. Listen to screenreader output on all devices\n\n   * Name: Any interactive element announces its purpose or title\n   * Role: Any interactive element identifies itself as a button in iOS and \"double tap to activate\" in Android\n   * Group: Group elements needed to ensure the content is understandable\n   * State: n/a\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/notifications/snackbar-toast>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* Snackbars and Toasts provide lightweight feedback about an operation\n* They show a brief non-critical message at the bottom of the screen on mobile\n* Snackbar or Toast must be dynamically announced by the screen reader without moving focus to it\n* Display only one Snackbar or Toast at a time\n* A Snackbar or Ttoast can be timed to disappear, since the message is not critical information\n* If the Snackbar persists, it should be in the swipe order for the screen reader user and tab order for the keyboard user\n* All text in the Snackbar and Toast must be announced by the screen reader\n* A Snackbar may contain an interactive element. Please follow the Native Button guidance for the accessibility needs of a Call To Action (CTA).\n* Toasts do not contain an interactive element\n\n### Focus\n\n* For Jetpack Compose Snackbar, when there is an action available, the default accessibility behavior allows screen reader to dynamically read the message and the action\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Code Example\n\n* **Jetpack Compose**\n\n```java\nval snackbarHostState = remember { SnackbarHostState() }\nval scope = rememberCoroutineScope()\nScaffold(\n    snackbarHost = { SnackbarHost(snackbarHostState) },\n    content = { innerPadding ->\n        Button(\n          modifier = Modifier.padding(innerPadding),\n          onClick = {\n            // show snackbar as a suspend function\n            scope.launch {\n                snackbarHostState.showSnackbar(\"Snackbar Message\")\n            }\n          }) {\n              Text(text = \"Snackbar\")\n          }\n    }\n)\n```\n\n### Dynamic Announcement example\n\n* \"Copied to clipboard\" (Non-critical information in timed-to-disappear snackbar)",
          "iosDeveloperNotes": "* There is no native snackbar or toast element for iOS. The notes below are suggestions and accessibility guidance.\n\n### Developer notes\n\n* Snackbars and Toasts provide lightweight feedback about an operation\n* They show a brief, non-critical message at the bottom of the screen on mobile\n* Snackbar or Toast must be dynamically announced by the screen reader without moving focus to it\n* Display only one Snackbar or Toast at a time\n* A Snackbar or toast can be timed to disappear, since the message is not critical information\n* If the Snackbar persists, it should be in the swipe order for the screen reader user and tab order for the keyboard user\n* All text in the Snackbar and Toast must be announced by the screen reader\n* A Snackbar may contain an interactive element. Please follow the Native Button guidance for the accessibility needs of a Call To Action (CTA).\n* Toasts do not contain an interactive element\n\n### Dynamic Announcement example\n\n* \"Copied to clipboard\" (Non-critical information in timed-to-disappear snackbar)",
          "developerNotes": ""
        }
      ]
    },
    {
      "label": "Patterns",
      "name": "patterns",
      "children": [
        {
          "label": "Animation",
          "name": "animation",
          "type": "file",
          "generalNotes": "How to test an animation",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an animation\n\nGIVEN THAT I am on a screen with an animation\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I am using keyboard navigation\n     * THEN keyboard interaction is N/A\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN focus should move to and from the animation, if it is in the swipe order\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN if the animation is meaningful, it should receive focus\n       * AND its meaning should be announced via alt text\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text resize interaction is N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/animation>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test an animation\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to and from the animation if in the swipe order\n\n3. Listen to screenreader output on all devices\n\n   * Focus: If meaningful, animation is focused and its meaning announced via alt text\n\n4. Test device settings\n\n   * Text resize: N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/animation>",
          "criteria": null,
          "videos": "<!-- TODO: add in an iOS example! -->\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/animation/animation_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A non-interactive animation is a technique by which still images are manipulated to create moving images\n* Animations can affect users with motion disabilities. Guidance is to keep animations to 5 seconds or less\n* Animations that flash can also have a deadly affect to users with epilepsy. Guidance is to keep flashing to no more than 3 times per second\n* Ensure animations that are meaningful have alt text assigned\n* Animations cannot stop and start again unless screen is refreshed or similar\n* If a stop/pause button next to the animation is provided, the animation can run more than 5 seconds\n* Loading icon animation is exempt from the 5 second guidance\n\n### Name\n\n* Name describes the meaning of the animation\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the element\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus",
          "iosDeveloperNotes": "### General Notes\n\n* A non-interactive animation is a technique by which still images are manipulated to create moving images\n* Animations can affect users with motion disabilities. Guidance is to keep animations to 5 seconds or less\n* Animations that flash can also have a deadly affect to users with epilepsy. Guidance is to keep flashing to no more than 3 times per second\n* Ensure animations that are meaningful have alt text assigned\n* Animations cannot stop and start again unless screen is refreshed or similar\n* If a stop/pause button next to the animation is provided, the animation can run more than 5 seconds\n* Loading icon animation is exempt from the 5 second guidance\n\n### Name\n\n* Programmatic name describes the meaning of the animation.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The `_component` title will overwrite the `_component` `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the `_component` `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Field Errors",
          "name": "field-errors",
          "type": "file",
          "generalNotes": "How to test a field error",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a field error\n\nGIVEN THAT I am on a screen with a field error\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\" keys\n     * THEN the error message should not receive focus\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the error message should not receive focus\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the error\n     * THEN \"ERROR\" should be announced as alt text for an error icon\n       * AND the error message should be announced immediately after\n   * WHEN I navigate into the text field with the error\n     * THEN the error message should be announced\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size up to 200% in the device settings\n     * THEN the text should resize without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/field-errors>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a field error\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Error message are not usually focusable and will not receive focus when using the keyboard\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Error message are not usually focusable and will not receive focus when navigating via swipe\n\n3. Listen to screenreader output on all devices\n\n   * Error message: “Error” is usually announced as alt text for an error icon and the error message announcement follows it. Error message will be announced when user enters the text field with the error.\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/field-errors>",
          "criteria": null,
          "videos": "### iOS Voiceover\n\n<video controls>\n  <source src=\"media/video/native/field-errors/field-errors-iOS-Voiceover.mp4\" type=\"video/mp4\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* An error message tells the user what and how they need to fix to finish the screen’s action\n* Validation for a user input field can be in various ways.  So, the focus on the error field and timing of the announcement can vary.\n* The error message that appears on the screen must be communicated to the screen reader user\n* Screen reader focus can move to the field in error upon validation or when CTA is activated, or upon leaving field\n* If the field in error is not in focus upon validation, the error message must be next in the swipe order to announced\n* Announcement should include “Error” or similar language, the name of the field in error, data entered and error message\n* If multiple errors appear on the screen when CTA triggers validation, the focus should move to the first field in error\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* Order and content will vary with device and OS\n* \"Editing, yyyzzz, edit box, Password, error, password is not correct, actions available”  (edit mode, data entered, role, field name, icon description, error message, extra actions)",
          "iosDeveloperNotes": "### General Notes\n\n* An error message tells the user what and how they need to fix to finish the screen’s action\n* Validation for a user input field can be in various ways.  So, the focus on the error field and timing of the announcement can vary.\n* The error message that appears on the screen must be communicated to the screen reader user\n* Screen reader focus can move to the field in error upon validation or when CTA is activated, or upon leaving field\n* If the field in error is not in focus upon validation, the error message must be next in the swipe order to announced\n* Announcement should include “Error” or similar language, the name of the field in error, data entered and error message\n* If multiple errors appear on the screen when CTA triggers validation, the focus should move to the first field in error\n\n### Focus\n\n* Use the device's default focus functionality\n\n* Consider how focus should be managed between child elements and their parent views\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Error. Password, Password is not correct, text field, required, yyyzzz”  (Icon description, field name, error message, role, asterisk, data entered)",
          "developerNotes": ""
        },
        {
          "label": "Focus",
          "name": "focus",
          "type": "file",
          "generalNotes": "How to test focus",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test focus\n\nGIVEN THAT I am on a screen with focus\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to all controls\n       * AND a visible focus indicator should be clearly shown around controls in a logical order\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the initial focus should move to a logical place on the screen\n       * AND focus should then move to all meaningful images, text, and controls\n   * WHEN I double-tap a control\n     * THEN the control should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN the screen reader starts\n     * THEN the initial focus should start in a logical place (e.g., back button, close button, or top of the screen)\n   * WHEN I navigate through the content\n     * THEN the focus should move left to right, top to bottom in a logical order\n       * AND a visible focus indicator should be clearly shown around content when tapped or navigated using gestures\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size up to 200% in the device settings\n     * THEN the focus should visibly move to all controls without losing information\n       * AND a visible focus indicator should be clearly shown around controls in a logical order without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/focus>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test focus\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to all controls\n   * Visible focus indicator: Is clearly shown around controls in a logical order\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Initial focus moves to a logical place on screen, then to all meaningful images, text and controls\n   * Doubletap: Activates controls\n\n3. Listen to screenreader output on all devices\n\n   * Initial focus: Starts in a logical place (ex: back button, close button, top of screen)\n   * Navigate: Focus moves left to right, top to bottom in a logical order\n   * Visible focus indicator: Is clearly shown around content when tapped or with navigation gestures\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/focus>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* On most devices, the screen reader focus indicator color can be changed to pass color contrast ratios against its background\n* Keep focused components from being obscured by other content, like Cookies and Chat buttons\n* Focus should move into a picker, modal or alert when it appears\n* When a modal or alert is closed, focus should go back to triggering element, or to a logical place\n* Focus should be contained in a modal when content underneath is hidden\n* Let the device manage focus, for the most part\n* Do not move focus automatically when on a user-input component (radio button, text field, etc)\n* Keyboard focus should be visible and if possible, pass color contrast ratio of 3:1\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* **Android Views**\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with FocusRequesters to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus",
          "iosDeveloperNotes": "### General Notes\n\n* On most devices, the screen reader focus indicator color can be changed to pass color contrast ratios against its background\n* Keep focused components from being obscured by other content, like Cookies and Chat buttons\n* Focus should move into a picker, modal or alert when it appears\n* When a modal or alert is closed, focus should go back to triggering element, or to a logical place\n* Focus should be contained in a modal when content underneath is hidden\n* Let the device manage focus, for the most part\n* Do not move focus automatically when on a user-input component (radio button, text field, etc)\n* Keyboard focus should be visible and if possible, pass color contrast ratio of 3:1\n\n### Focus\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* **UIKit**\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Graphics Visual Elements",
          "name": "graphics-visual-elements",
          "type": "file",
          "generalNotes": "How to test a graphic/visual element",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a graphic/visual element\n\nGIVEN THAT I am on a screen with a graphic/visual element\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\"\n     * THEN the focus should visibly move to any interactive controls\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the control should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the control should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the focus should move to any interactive control and express its name and role\n       * AND if the focus moves to a graphic, it should express its name\n   * WHEN I double-tap a control\n     * THEN the control should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the purpose should be clear and match the visible label for controls\n       * AND all text and meaningful images should be announced\n       * AND call-to-action (CTA) elements should be identified as a button in iOS\n       * AND CTA elements should be identified as a button or \"double tap to activate\" in Android\n       * AND only meaningful, non-decorative images and graphics should receive focus and be announced\n       * AND the control's state (DISABLED/DIMMED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text should resize up to 200% without losing information\n       * AND text within images should not resize\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/graphics-visual-elements>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a graphic/visual element\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to any interactive controls\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to any interactive control, expresses its name, role, or to graphic and expresses name\n   * Doubletap: Activates most controls\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label for controls and announces all text and meaningful images\n   * Role: CTA identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Graphics: Only meaningful, non-decorative images and graphics should be focused and announced\n   * State: Expresses the controls state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information. Text in images do not resize\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/graphics-visual-elements>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/graphics-visual-elements/graphics-visual-elements_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/graphics-visual-elements/graphics-visual-elements_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* Maps, charts and other graphics must have a text equivalent, if the graphic is not interactive for the screen reader. All information in the graphic must be conveyed to the screen reader user\n* Even if it is not interactive, it is suggested to put the map in the swipe order and add a label/name to identify it to the screen reader user. For some screen reader users, identifying the graphic adds context and meaningful information\n* If the graphic is interactive to the screen reader user, consider the grouping of information and swipe order to make it understandable and logical\n* If an image does not convey meaning or is used for styling purposes, like a line separator, do not add alt text and skip it in the swipe order for the screen reader user.\n* Custom actions may be applicable in navigating a graphic\n* All interactive elements in a map or chart must be navigable by the external keyboard\n* Consider color contrast ratios between chart elements and their background as well as to each other\n\n### Name\n\n* Name describes the purpose of the control\n\n* Programmatic name matches the visible text label (if any)\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of contentDescription in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus",
          "iosDeveloperNotes": "### General Notes\n\n* Maps, charts and other graphics must have a text equivalent, if the graphic is not interactive for the screen reader. All information in the graphic must be conveyed to the screen reader user. This is often done with a list view. Adding a toggle between map and list view is a common text alternative for a graphic.\n* Even if it is not interactive, it is suggested to put the map in the swipe order and add a label/name to identify it to the screen reader user. For some screen reader users, identifying the graphic adds context and meaningful information\n* If the graphic is interactive to the screen reader user, consider the grouping of information and swipe order to make it understandable and logical\n* If an image does not convey meaning or is used for styling purposes, like a line separator, do not add alt text and skip it in the swipe order for the screen reader user.\n* Custom actions may be applicable in navigating a graphic\n* All interactive elements in a map or chart must be navigable by the external keyboard\n* Consider color contrast ratios between chart elements and their background as well as to each other\n\n### Name\n\n* Programmatic name describes the purpose of the control.\n\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The map title will overwrite the map’s `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the map’s`accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Headings",
          "name": "headings",
          "type": "file",
          "generalNotes": "How to test a heading",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a heading\n\nGIVEN THAT I am on a screen with a heading\n\n1. Scenario: Test keyboard actions\n\n   * WHEN the user presses Tab, Arrow Keys, or Ctrl+Tab\n     * THEN keyboard navigation does not apply to headings as they are not interactive elements which receive focus (N/A)\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN the user swipes to a heading\n     * THEN focus moves sequentially to the heading\n       * AND the screen reader must announce the text as a heading\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the heading\n     * THEN its text should clearly announce as a heading\n       * AND when the user navigates by swiping up or down, which focuses on headings through the rotor or controls,\n     * THEN its focus should move from heading to heading and announce each text as such\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN text resizing settings are adjusted on the device\n     * THEN all previously noted functionality must be focusable and announced\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/headings>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a heading\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to and from the heading\n\n3. Listen to screenreader output on all devices\n\n   * Text heading: “Heading” is announced following the heading text\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/headings>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/headings/headings_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/headings/headings_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* Headings give the screen reader user context of the sections on the screen at a glance. By using the TalkBack Menu, the screen reader user can navigate just by headings for this quick glance, if it is coded correctly.\n* A heading should describe a section, not just look like a heading because it is large or bold font.\n* Text can announce as a heading as well as a button\n\n### Accessibility Trait\n\n* **Android Views**\n\n  * `android:accessibilityHeading`\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics { heading() }`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Categories, heading”",
          "iosDeveloperNotes": "### General Notes\n\n* Headings give the screen reader user context of the sections on the screen at a glance. By using the Rotor, the screen reader user can navigate just by headings for this quick glance, if it is coded correctly.\n* A heading should describe a section, not just look like a heading because it is large or bold font.\n* The title of a screen should announce as a heading by default\n* Text can announce as a heading as well as a button\n* Following Apple's guidelines for font sizes for headings, the maximum size for the larger size heading may be less than 200%\n* iOS supports multiple heading levels through the [accessibility API](https://developer.apple.com/documentation/swiftui/view/accessibilityheading\\(_:\\)); however, we recommend continuing to use the default heading level as noted below.\n\n### Accessibility Trait\n\n* **UIKit**\n\n  * Use `isHeader: AccessibilityTraits`\n\n* **SwiftUI**\n\n  * Use `.accessibilityAddTraits(.isHeader)`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * To move screen reader focus to open or close custom dialogs, use `.accessibilityFocused`\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Categories, heading”",
          "developerNotes": ""
        },
        {
          "label": "Image Decorative",
          "name": "image-decorative",
          "type": "file",
          "generalNotes": "How to test a decorative image or icon",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a decorative image or icon\n\nGIVEN THAT I am on a screen with a decorative image or icon\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I use keyboard navigation\n     * THEN the image or icon is ignored, N/A\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN focus moves to the image or icon\n       * I HEAR that the image or icon is ignored, N/A\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN I use a screenreader (Talkback, VoiceOver)\n     * AND I swipe to browse to an image or icon\n       * I HEAR the image or icon is ignored, N/A\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * AND I swipe to browse to an image or icon\n       * I HEAR the image or icon is ignored, N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/image-decorative>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a decorative image or icon\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Image does not receive focus, N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: The screenreader ignores the image completely, N/A\n\n3. Listen to screenreader output on all devices\n\n   * Role: The image is not annoucned and is ignored completely, N/A\n\n4. Test device settings\n\n   * Text resize: N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/image-decorative>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\nIf images are only decorative, or if the information they convey is already provided by nearby text, they should be ignored by screen readers and removed from the swipe order. This helps people who use screen readers and have low vision or are blind.\n\n### Examples of Decorative Icons and Images\n\n* A caret icon is included within a table row/list item/blade. This icon should not be read by a screen reader or be in the swipe order. Instead it should be grouped with the relevant, adjacent text. In this case the text before it acts as a label. The caret icon is simply there for visual reinforcement.\n* A battery icon is next to the text string of \"Battery\". This icon should not be read by a screen reader or be in the swipe order. Instead it should be grouped with the relevant, adjacent, text.\n* An image is used as a decorative design element to break up a page or visually introduce a new section and is not crucial to understanding the purpose or content of the page. This image probably does not need to be read by a screen reader, be in the swipe order, or be grouped with adjacent text.\n\n### Focus\n\nImages and icons that are strictly decorative should not receive focus but should be skipped in the swipe and tab (with an external keyboard) order.\n\n### Android Views\n\n* Use `android:importantForAccessibility=\"no\"` to ensure that the image is not considered for accessibility purposes. This will prevent TalkBack from announcing the image.\n\n### Jetpack Compose\n\n* Set `contentDescription = null` for decorative elements to ensure that the content description is not announced by TalkBack.\n  Example: `Image(painter = painterResource(id = R.drawable.decorative_image), contentDescription = null)`",
          "iosDeveloperNotes": "### General Notes\n\nIf images are only decorative, or if the information they convey is already provided by nearby text, they should be ignored by screen readers and removed from the swipe order. This helps people who use screen readers and have low vision or are blind.\n\n### Examples of Decorative Icons and Images\n\n* A caret icon is included within a table row/list item/blade. This icon should not be read by a screen reader or be in the swipe order. Instead it should be grouped with the relevant, adjacent text. In this case the text before it acts as a label. The caret icon is simply there for visual reinforcement.\n* A battery icon is next to the text string of \"Battery\". This icon should not be read by a screen reader or be in the swipe order. Instead it should be grouped with the relevant, adjacent, text.\n* An image is used as a decorative design element to break up a page or visually introduce a new section and is not crucial to understanding the purpose or content of the page. This image probably does not need to be read by a screen reader, be in the swipe order, or be grouped with adjacent text.\n\n### Focus\n\nImages and icons that are strictly decorative should not receive focus but should be skipped in the swipe and tab (with an external keyboard) order.\n\n### SwiftUI\n\n* Use the modifier `.accessibilityHidden(true)` to hide an icon or image from VoiceOver, Full Keyboard Access, and switch control.\n* Use the `Image(decorative:)` initializer to mark an image as purely decorative. This ensures the image is not announced by VoiceOver, not focusable by Full Keyboard Access or Switch Control, and not included in the accessibility tree.\n\n### UIKit\n\n* Use `imageView.isAccessibilityElement = false` to ensure the image view is ignored by VoiceOver, meaning it won't be announced or focusable.",
          "developerNotes": ""
        },
        {
          "label": "Loading Icon",
          "name": "loading-icon",
          "type": "file",
          "generalNotes": "How to test a loading icon",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a loading icon\n\nGIVEN THAT I am on a screen with a loading icon\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I am using keyboard navigation\n     * THEN keyboard interaction is N/A\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN focus moves to the loading icon\n       * BUT it should not be necessary because \"Loading\" is announced dynamically\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN \"Loading\" should be announced dynamically\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text resize interaction is N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/loading-icon>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a loading icon\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus can move to the loading icon, but it should not be necessary because “loading” is announced dynamically\n\n3. Listen to screenreader output on all devices\n\n   * Name: “Loading” is announced dynamically\n\n4. Test device settings\n\n   * Text resize: N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/loading-icon>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/loading-icon/loading-icon_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A loading icon communicates that a screen or page is loading. The screen reader is informed by hearing “loading” or anything similar, to understand that they should wait to continue\n* The screen reader user should not have to swipe to the icon. It should be dynamically announced\n* Screen reader focus on the icon is optional\n* If the screen takes a long time to load, the announcement for loading may happen again\n\n### Name\n\n* Name describes the purpose of the icon\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the control\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of `contentDescription` in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Focus\n\n* The screen reader user should not have to swipe to the icon to announce “Loading”\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Loading”",
          "iosDeveloperNotes": "### General Notes\n\n* A loading icon communicates that a screen or page is loading. The screen reader is informed by hearing “loading” or anything similar, to understand that they should wait to continue\n* The screen reader user should not have to swipe to the icon. It should be dynamically announced\n* Screen reader focus on the icon is optional\n* If the screen takes a long time to load, the announcement for loading may happen again\n\n### Name\n\n* Programmatic name describes the purpose of the icon\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The loading icon title will overwrite the loading icon `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the loading icon `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Focus\n\n* The screen reader user should not have to swipe to the icon to announce “Loading”\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Loading”",
          "developerNotes": ""
        },
        {
          "label": "Loading Spinner",
          "name": "loading-spinner",
          "type": "file",
          "generalNotes": "How to test a loading spinner",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a loading spinner\n\nGIVEN THAT I am on a screen with a loading spinner\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I am using keyboard navigation\n     * THEN keyboard interaction is N/A\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN focus can move to the loading spinner\n       * BUT it should not be necessary because \"loading\" is announced dynamically\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN \"loading\" should be announced dynamically\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text resize interaction is N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/loading-spinner>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a loading spinner\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus can move to the loading spinner, but it should not be necessary because “loading” is announced dynamically\n\n3. Listen to screenreader output on all devices\n\n   * Name: “Loading” is announced dynamically\n\n4. Test device settings\n\n   * Text resize: N/A\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/loading-spinner>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A loading spinner communicates that a screen or page is loading. The screen reader is informed by hearing “loading” or anything similar, to understand that they should wait to continue\n* The screen reader user should not have to swipe to the loading spinner. It should be dynamically or programmatically announced\n* Screen reader focus on the loading spinner is optional\n* If the screen takes a long time to load, the announcement for loading may happen again\n\n### Name\n\n* Name describes the purpose of the loading spinner\n\n* **Android Views**\n\n  * `android:text` XML attribute\n  * Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n  * `contentDescription` overrides `android:text`\n  * Use `labelFor` attribute to associate the visible label with the element\n\n* **Jetpack Compose**\n\n  * Compose uses semantics properties to pass information to accessibility services.\n  * Example specification of `contentDescription` in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Focus\n\n* The screen reader user should not have to swipe to the loading spinner to announce “Loading”\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Loading”",
          "iosDeveloperNotes": "### General Notes\n\n* A loading spinner communicates that a screen or page is loading. The screen reader is informed by hearing “loading” or anything similar, to understand that they should wait to continue\n* The screen reader user should not have to swipe to the loading spinner. It should be dynamically or programmatically announced\n* Screen reader focus on the loading spinner is optional\n* If the screen takes a long time to load, the announcement for loading may happen again\n\n### Name\n\n* Programmatic name describes the purpose of the loading spinner\n\n* **UIKit**\n\n  * You can programmatically set the visible label with `setTitle()`.\n    * The loading spinner title will overwrite the loading spinner `accessibilityLabel`.\n  * If a visible label is not applicable in this case, set the loading spinner `accessibilityLabel` to the label of your choice.\n    * To do this in Interface Builder, set the label using the Identity Inspector\n  * To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n  * To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n* **SwiftUI**\n\n  * If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Focus\n\n* The screen reader user should not have to swipe to the loading spinenr to announce “Loading”\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Loading”",
          "developerNotes": ""
        },
        {
          "label": "Strike Through",
          "name": "strike-through",
          "type": "file",
          "generalNotes": "How to test a strike-through text",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a strike-through text\n\nGIVEN THAT I am on a screen with a strike-through text\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I am using keyboard navigation\n     * THEN keyboard interaction is N/A\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the focus should move to the strike-through text\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the previous and current data should be expressed\n       * AND the previous and current data should be grouped together for context\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/strike-through>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a strike-through text\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Keyboard interaction: N/A\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the strike-through text\n\n3. Listen to screenreader output on all devices\n\n   * Strike though text: Expresses the previous and current data\n   * Group: Group the previous and current data together for context\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/strike-through>",
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": "### General Notes\n\n* A strike-through is a style that indicates something is removed, deleted, unavailable or canceled, but the original text is meaningful enough and remains visible\n* The strike-through must not be ignored by the screen reader. Adding an accessibility label to the strike-through text will convey its meaning. This can be done by grouping the new price with the strike-through price and strike-through accessibility label and announce together for context\n\n### Groupings\n\n* **Android Views**\n\n  * `ViewGroup`\n  * Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n* **Jetpack Compose**\n\n  * `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n  * `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant    - Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Amount was $57 and is now $27\" (Strike-through on $57 grouped with updated price of $27)\"",
          "iosDeveloperNotes": "### General Notes\n\n* A strike-through is a style that indicates something is removed, deleted, unavailable or canceled, but the original text is meaningful enough and remains visible\n* The strike-through must not be ignored by the screen reader. Adding an accessibility label to the strike-through text will convey its meaning. This can be done by grouping the new price with the strike-through price and strike-through accessibility label and announce together.\n\n### Groupings\n\n* Group strike-through text with the strike-through accessibility label and updated text\n\n* **UIKit**\n\n  * Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n  * Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n    * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n      * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n    * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n    * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n* **SwiftUI**\n\n  * Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new accessibilityElement.\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screenreader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Amount was $57 and is now $27\" (Strike-through on $57 grouped with updated price of $27)\"",
          "developerNotes": ""
        },
        {
          "label": "Table",
          "name": "table",
          "type": "file",
          "generalNotes": "How to test a table",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a table\n\nGIVEN THAT I am on a screen with a table\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\" keys\n     * THEN the focus should visibly move to the first interactive element in the table\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the focus should move to the first element in the table\n   * WHEN I double-tap an interactive element\n     * THEN the element should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader reads the table\n     * THEN the visible table title that describes the table’s purpose should be announced\n       * AND each column header should be announced with each row cell beneath it, along with cell data\n       * AND if applicable, each row header should be announced with each cell in the row, along with cell data\n       * AND the purpose of any interactive element should be clear and match its visible label\n       * AND most interactive elements should identify as a \"BUTTON\" in iOS and announce \"DOUBLE TAP TO ACTIVATE\" in Android\n       * AND the state of interactive elements (DISABLED or DIMMED) should be expressed if applicable\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size up to 200% in the device settings\n     * THEN all text should resize without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/table>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a table\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the first interactive element in table\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the first element in table\n   * Doubletap: Activates any interactive element\n\n3. Listen to screenreader output on all devices\n\n   * Label: Visible table title that describes table’s purpose is announced\n   * Column header: Each column header is announced with each row cell beneath it, along with cell data\n   * Row header: If applicable, each row header is announced with each cell in row, along with cell data\n   * Name: Purpose of any interactive element is clear and matches visible label\n   * Role: Most interactive elements identify as a button in iOS and \"double tap to activate\" in Android\n   * State: Expresses its state (disabled/dimmed)\n\n4. Test device settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/table>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/table/table_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A container that presents rows of data arranged in one or more columns that may include interactive elements\n* A table is composed of table rows (see table row button component)\n* A table with columns and rows is not common in mobile because of the small viewport.\n* Table headers can be announced left to right in the heading row along with “heading”. This is optional and duplicative, as each column header will be announced with each cell in every column.\n* If there is no content in the data cell, announce anything that gives the user this information, such as “not applicable” or “empty cell” along with the column header.\n* Generally, all content in cell is announced together, including an interactive element, if any.\n* If a table row is deleted, screen reader focus should be managed to the most logical place\n* All column headers must have a visible label that describes column (text or icon)\n* If rows have multiple identical buttons like delete or edit, the programmatic name must be unique for each row (Delete address, Delete phone, etc)\n* Ensure scrolling is supported, if needed\n* Text must enlarge to 200% in each cell\n\n### See the Details section for a specific control for interactive guidance\n\n* **Android Views**\n\n  * `TableLayout` and `TableRow`\n\n* **Jetpack Compose**\n\n  * Use `Column` and `Row`\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus",
          "iosDeveloperNotes": "### General Notes\n\n* A container that presents rows of data arranged in one or more columns that may include interactive elements\n* A table is composed of table rows (see table row button component)\n* A table with columns and rows is not common in mobile because of the small viewport.\n* Table headers can be announced left to right in the heading row along with “heading”. This is optional and duplicative, as each column header will be announced with each cell in every column.\n* If there is no content in the data cell, announce anything that gives the user this information, such as “not applicable” or “empty cell” along with the column header.\n* Generally, all content in cell is announced together, including an interactive element, if any.\n* If a table row is deleted, screen reader focus should be managed to the most logical place\n* All column headers must have a visible label that describes column (text or icon)\n* If rows have multiple identical buttons like delete or edit, the programmatic name must be unique for each row (Delete address, Delete phone, etc)\n* Ensure scrolling is supported, if needed\n* Text must enlarge to 200% in each cell\n\n### See the Details section for a specific control for interactive guidance\n\n* **UIKit**\n\n  * Use `UITableViewController` object to manage a table view\n  * Use `TableColumn` for tables with more than one column\n\n* **SwiftUI**\n\n  * Use `List` as a container for a one column table of data rows\n  * Use `Table` - for multiple columns, but only supports iPad\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* Initial focus on a screen should land in a logical place, such as back button, screen title, first text field, or first heading.\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        },
        {
          "label": "Tidbit",
          "name": "tidbit",
          "type": "file",
          "generalNotes": "How to test a tidbit",
          "gherkin": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a tidbit\n\nGIVEN THAT I am on a screen with a tidbit\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\"\n     * THEN the focus should visibly move to the tidbit if there is a call-to-action (CTA)\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the CTA should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the CTA should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the focus should move to the tidbit or tidbit CTA\n       * AND the name and role should be expressed\n   * WHEN I double-tap the tidbit CTA\n     * THEN the CTA should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the purpose should be clear and match the visible label for the CTA\n       * AND all text and meaningful images should be announced\n       * AND the CTA should be identified as a button in iOS\n       * AND the CTA should be identified as a button or \"double tap to activate\" in Android\n       * AND the CTA’s state (DISABLED/DIMMED) should be expressed\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size up to 200% in the device settings\n     * THEN text should resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/tidbit>",
          "condensed": "### #a11y - Native App Accessibility Acceptance Criteria\n\nHow to test a tidbit\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Focus visibly moves to the tidbit if there is a Call To Action (CTA)\n   * Spacebar: Activates CTA on iOS and Android\n   * Enter: Activates CTA on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the tidbit or tidbit CTA, expresses its name, role\n   * Doubletap: Activates the tidbit CTA\n\n3. Listen to screenreader output on all devices\n\n   * Name: Purpose is clear and matches visible label for CTA and announces all text and meaningful images\n   * Role: CTA identifies as a button in iOS and button or \"double tap to activate\" in Android\n   * Group: n/a\n   * State: Expresses the CTA's state (disabled/dimmed)\n\n4. Device OS Settings\n\n   * Text resize: Text can resize up to 200% without losing information\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/tidbit>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/tidbit/tidbit_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/tidbit/tidbit_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "* Initial screen reader focus can be on the entire tidbit and announce everything with or without a Call To Action (CTA). Or, the text and CTA can have separate focus.\n* Meaningful images should have an accessibility label\n\n### Name\n\n* Name describes the purpose of the control\n* Programmatic name matches the visible text label (if any)\n\n#### Android Views\n\n* `android:text` XML attribute\n* Optional: use `contentDescription` for a more descriptive name, depending on type of view and for elements (icons) without a visible label\n* `contentDescription` overrides `android:text`\n* Use `labelFor` attribute to associate the visible label with the control\n\n#### Jetpack Compose\n\n* Compose uses semantics properties to pass information to accessibility services.\n* Example specification of `contentDescription` in compose: `modifier = Modifier.semantics { contentDescription = \"\" }`\n\n### Role\n\n* Please use guidance for the [Button control](https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/control/button) if a CTA is applicable\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button.\n\n#### Android Views\n\n* `ViewGroup`\n* Set the container object's `android:screenReaderFocusable` attribute to true, and each inner object's `android:focusable` attribute to false. In doing so, accessibility services can present the inner elements' `contentDescription` or names, one after the other, in a single announcement.\n\n#### Jetpack Compose\n\n* `Modifier.semantics(mergeDescendants = true) {}` is equivalent to `importantForAccessibility` when compared to android views\n* `FocusRequester.createRefs()` helps to request focus to inner elements with in the group\n\n### State\n\n#### Android Views\n\n* Active: `android:enabled=true`\n* Disabled: `android:enabled=false`. Announcement: \"disabled\"\n\n#### Jetpack Compose\n\n* Active: default state is active and enabled. Use `Button(enabled = true)` to specify explicitly\n* Disabled: `Button(enabled = false)` announces as \"disabled\"\n* Alternatively can use `modifier = Modifier.semantics { disabled() }` to announce as \"disabled\"\n* Use `modifier = Modifier.semantics { stateDescription = \"\" }` to have a customized state announcement\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n#### Android Views\n\n* `importantForAccessibility` makes the element visible to the Accessibility API\n* `android:focusable`\n* `android=clickable`\n* Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n* `nextFocusDown`\n* `nextFocusUp`\n* `nextFocusRight`\n* `nextFocusLeft`\n* `accessibilityTraversalBefore` (or after)\n* To move screen reader focus to newly revealed content: `Type_View_Focused`\n* To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n* To hide controls: `importantForAccessibility=false`\n* For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n#### Jetpack Compose\n\n* `Modifier.focusTarget()` makes the component focusable\n* `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n* `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n* `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n* Example: To customize the focus events\n  * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n  * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n  * focus order accepts following values: up, down, left, right, previous, next, start, end\n  * step 3: use `second.requestFocus()` to gain focus\n\n### Announcement examples\n\n* \"Important\" (Exclamation point image) (grouped with text)\n* All text is announced\n* \"Learn more, button, double tap to activate\" (Learn more CTA)",
          "iosDeveloperNotes": "* Initial screen reader focus can be on the entire tidbit and announce everything with or without a Call To Action (CTA). Or, the text and CTA can have separate focus.\n* Meaningful images should have an accessibility label\n\n### Name\n\n* Programmatic name describes the purpose of the control (if CTA is available)\n* If visible text label exists, the programmatic name should match the visible text label.\n  * **Note:** Setting a programmatic name while a visible text label exists may cause VoiceOver to duplicate the announcement of the name. If this happens, hide the visible text label from VoiceOver recognition.\n\n#### UIKit\n\n* You can programmatically set the visible label with `setTitle()`.\n  * The \\_component title will overwrite the \\_component `accessibilityLabel`.\n* If a visible label is not applicable in this case, set the \\_component `accessibilityLabel` to the label of your choice.\n  * To do this in Interface Builder, set the label using the Identity Inspector\n* To hide labels from VoiceOver programmatically, set the label's `isAccessibilityElement` property to `false`\n* To hide labels from VoiceOver using Interface Builder, uncheck `Accessibility Enabled` in the Identity Inspector.\n\n#### SwiftUI\n\n* If no visible label, use view modifier `accessibilityLabel(_:)`\n\n### Role\n\n* Please use guidance for the [Button control](https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/control/button) if a CTA is applicable\n\n### Groupings\n\n* Group visible label with button, if applicable, to provide a programmatic name for the button.\n\n#### UIKit\n\n* Ensure that the child elements of the overarching view you want to group in has their `isAccessibilityElement` properties set to false.\n* Set `isAccessibilityElement` to `true` for the parent view. Then, adjust `accessibilityLabel` and `accessibilityTraits` accordingly.\n  * If frame does not exist due to custom button, use `accessibilityFrameInContainer` to set the custom control’s frame to the parent view’s container or view of your choice.\n    * You can also unionize two frames with `frame.union` (i.e. `titleLabel.frame.union(subtitleLabel.frame)`).\n  * Use `shouldGroupAccessibilityElement` for a precise order if the native order should be disrupted.\n  * Use `shouldGroupAccessibilityChildren` to indicate whether VoiceOver must group its children views. This allows making unique vocalizations or define a particular reading order for a part of the page.\n\n#### SwiftUI\n\n* Use view modifier `accessibilityElement(children: .combine)` to merge the child accessibility element’s properties into the new `accessibilityElement`\n\n### State\n\n#### UIKit\n\n* For enabled: Set `isEnabled` to `true`.\n* For disabled: Set `isEnabled` to `false`. Announcement for disabled is \"Dimmed\"\n  * If necessary, you may change the accessibility trait of the \\_component to `notEnabled`, but this may overwrite the current accessibility role of the \\_component\n\n#### SwiftUI\n\n* For selected, use `accessibilityAddTraits(.isSelected)`.\n* For disabled, use view modifier `disabled()`.\n\n### Focus\n\n* Use the device's default focus functionality.\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n#### UIKit\n\n* If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n  * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n* Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n* To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n* To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n* `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n<!-- \nEnter information for iOS Focus using SwiftUI, update below with appropriate details\n--> \n\n### SwiftUI\n\n* For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n  * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n  * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n* If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.\n\n### Announcement examples\n\n* \"Important\" (Exclamation point image) (grouped with text)\n* All text is announced\n* \"Learn more, button\" (Learn more CTA)",
          "developerNotes": ""
        },
        {
          "label": "Webview",
          "name": "webview",
          "type": "file",
          "generalNotes": "How to test a webview",
          "gherkin": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a webview\n\nGIVEN THAT I am on a screen with a webview\n\n1. Scenario: Test keyboard actions\n\n   * WHEN I press the \"TAB\" key, \"ARROW\" keys, or \"CTRL+TAB\"\n     * THEN the focus should move to all interactive elements in the navigation bar and webview\n   * WHEN I press the \"SPACEBAR\" key\n     * THEN the interactive element should be activated on iOS and Android\n   * WHEN I press the \"ENTER\" key\n     * THEN the interactive element should be activated on Android\n\n2. Scenario: Test mobile screen reader gestures\n\n   * WHEN I swipe to navigate\n     * THEN the focus should move to each element\n       * AND express its name and role\n       * AND express its state if applicable\n   * WHEN I double-tap an interactive element\n     * THEN the element should be activated\n\n3. Scenario: Test screen reader output on all devices\n\n   * WHEN a screen reader is active\n     * THEN the initial focus should move to all elements in the navigation bars\n       * AND native and webview elements should be included in the swipe order\n\n4. Scenario: Test device OS settings for text resize\n\n   * WHEN I have increased text size in device settings\n     * THEN text resize is N/A for webview sections and native navigation bar text\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/webview>",
          "condensed": "### #a11y - Native Accessibility Acceptance Criteria\n\nHow to test a webview\n\n1. Test keyboard only, then screen reader + keyboard actions\n\n   * Tab, arrow keys or ctl+tab: Moves to all interactive elements in navigation bar and webview\n   * Spacebar: Activates on iOS and Android\n   * Enter: Activates on Android\n\n2. Test mobile screenreader gestures\n\n   * Swipe: Focus moves to the element, expresses its name, role (state, if applicable)\n   * Doubletap: Activates the interactive element\n\n3. Listen to screenreader output on all devices\n\n   * Focus: Initial focus should go to all elements in the navigation bars\n   * Navigation: Native and webview elements are all in the swipe order\n\n4. Test device settings\n\n   * Text resize: N/A only for webview sections and native navigation bar text\n\nFull information: <https://www.magentaa11y.com/MagentaA11yV2#/native-criteria/patterns/webview>",
          "criteria": null,
          "videos": "### iOS VoiceOver\n\n<video controls>\n  <source src=\"media/video/native/webview/webview_IosVoiceOver.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n### Android Talkback\n\n<video controls>\n  <source src=\"media/video/native/webview/webview_AndroidTalkback.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>",
          "androidDeveloperNotes": "### General Notes\n\n* A webview is a portion of a webpage, usually html code, incorporated seamlessly into the app’s UI\n* Sometimes a hidden web element is announced\n* An obvious sign that you are in a webview is web-only accessibility announcements such as a “landmark” or a heading level\n* A common use for webviews is if the content changes often\n* Sometimes the container that includes the webview may announce seperately, which is usually ok\n* A “Link” announcement in webviews usually navigates the user to a new screen. In a native app “link” usually means the action will open a browser on your phone\n* External Blue Tooth keyboard testing can be erratic and inconsistent on webviews\n* Enlarging text from Accessibility settings does not work on the webview sections of the screen\n\n### Role\n\n* **Android Views**\n\n  * `public class WebView`\n\n* **JetPack Compose**\n\n  * `AndroidView():` To embed Android views in your Compose layouts\n  * `Factory:` Function that creates an instance of the Android view\n\n### Focus\n\n* Only manage focus when needed. Primarily, let the device manage default focus\n\n* Consider how focus should be managed between child elements and their parent views\n\n* External keyboard tab order often follows the screen reader focus, but sometimes needs focus management\n\n* Initial focus on a screen should land in a logical place (back button, screen title, first text field, first heading)\n\n* When a menu, picker or modal is closed, the focus should return to the triggering element.\n\n* **Android Views**\n\n  * `importantForAccessibility` makes the element visible to the Accessibility API\n  * `android:focusable`\n  * `android=clickable`\n  * Implement an `onClick( )` event handler for keyboard, as well as `onTouch( )`\n  * `nextFocusDown`\n  * `nextFocusUp`\n  * `nextFocusRight`\n  * `nextFocusLeft`\n  * `accessibilityTraversalBefore` (or after)\n  * To move screen reader focus to newly revealed content: `Type_View_Focused`\n  * To NOT move focus, but dynamically announce new content: `accessibilityLiveRegion`(set to polite or assertive)\n  * To hide controls: `importantForAccessibility=false`\n  * For a `ViewGroup`, set `screenReaderFocusable=true` and each inner object’s attribute to keyboard focus (`focusable=false`)\n\n* **Jetpack Compose**\n\n  * `Modifier.focusTarget()` makes the component focusable\n  * `Modifier.focusOrder()` needs to be used in combination with `FocusRequester` to define focus order\n  * `Modifier.onFocusEvent()`, `Modifier.onFocusChanged()` can be used to observe the changes to focus state\n  * `FocusRequester` allows to request focus to individual elements with in a group of merged descendant views\n  * Example: To customize the focus events\n    * step 1: define the focus requester prior. `val (first, second) = FocusRequester.createRefs()`\n    * step 2: update the modifier to set the order. `modifier = Modifier.focusOrder(first) { this.down = second }`\n    * focus order accepts following values: up, down, left, right, previous, next, start, end\n    * step 3: use `second.requestFocus()` to gain focus",
          "iosDeveloperNotes": "### General Notes\n\n* A webview is a portion of a webpage, usually html code, incorporated seamlessly into the app’s UI\n* Sometimes a hidden web element is announced\n* An obvious sign that you are in a webview is web-only accessibility announcements such as a “landmark” or a heading level\n* A common use for webviews is if the content changes often\n* Sometimes the container that includes the webview may announce seperately, which is usually ok\n* A “Link” announcement in webviews usually navigates the user to a new screen. In a native app “link” usually means the action will open a browser on your phone\n* External Blue Tooth keyboard testing can be erratic and inconsistent on webviews, which is a known issue\n* Enlarging text from Accessibility settings does not work on the webview sections of the screen\n\n### Role\n\n* **UIKit and SwiftUI**\n\n  * `WKWebView`\n\n### Focus\n\n* Use the device's default focus functionality.\n\n* Consider how focus should be managed between child elements and their parent views.\n\n* External keyboard tab order often follows the screen reader focus, but sometimes this functionality requires additional development to manage focus.\n\n* Initial focus on a screen should land in a logical place, such as the nav bar back button, screen title, or first text field\n\n* **UIKit**\n\n  * If VoiceOver is not reaching a particular element, set the element's `isAccessibilityElement` to `true`\n    * **Note:** You may need to adjust the programmatic name, role, state, and/or value after doing this, as this action may overwrite previously configured accessibility.\n  * Use `accessibilityViewIsModal` to contain the screen reader focus inside the modal.\n  * To move screen reader focus to newly revealed content, use `UIAccessibility.post(notification:argument:)` that takes in `.screenChanged` and the newly revealed content as the parameter arguments.\n  * To NOT move focus, but dynamically announce new content: use `UIAccessibility.post(notification:argument:)` that takes in `.announcement` and the announcement text as the parameter arguments.\n  * `UIAccessibilityContainer` protocol: Have a table of elements that defines the reading order of the elements.\n\n* **SwiftUI**\n\n  * For general focus management that impacts both screen readers and non-screen readers, use the property wrapper `@FocusState` to assign an identity of a focus state.\n    * Use the property wrapper `@FocusState` in conjunction with the view modifier `focused(_:)` to assign focus on a view with `@FocusState` as the source of truth.\n    * Use the property wrapper `@FocusState`in conjunction with the view modifier `focused(_:equals:)` to assign focus on a view, when the view is equal to a specific value.\n  * If necessary, use property wrapper `@AccessibilityFocusState` to assign identifiers to specific views to manually shift focus from one view to another as the user interacts with the screen with VoiceOver on.",
          "developerNotes": ""
        }
      ]
    }
  ],
  "how-to-test": [
    {
      "label": "Components",
      "name": "components",
      "children": [
        {
          "label": "Color Contrast",
          "name": "color-contrast",
          "type": "file",
          "generalNotes": "Testing color contrast is a simple yet crucial step in ensuring content is perceivable for users with low vision and color blindness.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **General requirements**\n\n   The Web Content Accessibility Guidelines (WCAG) provide very specific color contrast requirements:\n\n   * Normal text (up to 18pt/24px or 14pt/18.5px if bold) must have a contrast ratio of at least 4.5:1 between the text color and background color.\n   * Large text (at least 18pt/24px or 14pt/18.5px if bold) must have a contrast ratio of at least 3:1 between the text color and background color.\n   * Meaningful graphics, user interface components and their various states, as well as focus indicators must have a contrast ratio of at least 3:1 with the background color.\n   * **Exceptions:** Logos, incidental or decorative text and graphics, and disabled controls do not need to meet color contrast requirements.\n\n2. **How to test**\n\n   ### Automated scanning\n\n   Automated scanning tools, such as [WAVE](https://wave.webaim.org/), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), or [Deque's Axe DevTools](https://www.deque.com/blog/axe-devtools-extension-update-new-color-contrast-analyzer/) are a great starting point for color contrast testing. All of these tools can run page scans that quickly generate reports identifying color contrast issues. Scans are:\n\n   * **Good** at identifying simple issues like solid colored text on solid colored backgrounds that do not meet contrast ratios.\n   * **Bad** at identifying anything more complex like text on background images, gradients, and different states for user interface components (like hover or focus) that do not meet contrast ratios.\n\n   ### Manual testing\n\n   Automated scanning must be complemented with a manual review of the page.\n\n   #### Getting started\n\n   * Open DevTools in your browser window (<span class=\"keyboard-key\">F12</span>)\n   * Right-click and select \"Inspect\" on the different color combinations that you see as you move from the top of the page on down\n   * Find the hexadecimal color values in the \"Styles\" tab of your DevTools window (see example image below)\n   * Enter the hex values into a contrast checking tool (like [WebAIM Contrast Checker](https://webaim.org/resources/contrastchecker/) or [Deque's Color Contrast Analyzer](https://dequeuniversity.com/color-contrast)) to see if they meet contrast requirements.\n\n    <example>\n      <img\n      src=\"/media/images/how-to-test/color-contrast-hex-codes-for-contrast.png\"\n      alt=\"Inspecting an element in chrome to find hex codes\">\n    </example>\n\n   #### Hover to inspect\n\n   * Chrome has an \"Inspect Element by Mouse\" DevTools feature that is useful for checking contrast\n   * Click the button located in the upper left-hand corner of your DevTools window to enable the feature\n   * Hover over elements on the page with your cursor\n   * A popup will appear that often indicates whether the element passes contrast by displaying a green check mark within a circle (see example image below)\n\n    <example>\n      <img\n      src=\"/media/images/how-to-test/color-contrast-chrome-contrast-inspector.png\"\n    alt=\"using Chrome's inspect element by mouse feature to see if element meets contrast requirements\">\n    </example>\n\n   #### Background images and gradients\n\n   * Identify instances of text and user interface elements that sit on top of background images or color gradients\n   * Use a color picker tool to get representative hex codes from the background\n   * In Chrome's DevTools, under the \"Styles\" tab you can click on any of the color boxes to bring up the Color Picker popup\n   * Within the popup, activate the eyedropper icon\n   * Hover over the desired area on the background image with your cursor and click\n   * The hex value will be displayed in the Color Picker (see example image below)\n\n    <example>\n      <img\n    src=\"/media/images/how-to-test/color-contrast-chrome-color-picker.png\"\n    alt=\"using Chrome's color picker and eyedropper tool to get hex codes for background images.\">\n    </example>\n\n   #### State changes\n\n   * Identify interactive elements that change color based on their states, such as focus or hover\n   * Ensure that the state changes meet contrast requirements\n   * You can force some state changes to persist, which makes them easier to check\n   * Inspect the desired element\n   * In Chrome's DevTools, under the \"Styles\" tab, activate the \":hov\" toggle button\n   * Select the checkbox with desired state\n   * This will force a persistent state and allow you to check for contrast on the element (see example image below)\n\n    <example>\n      <img\n        src=\"/media/images/how-to-test/color-contrast-set-hover-state.png\"\n        alt=\"using Chrome's DevTools to force hover state on a link.\">\n    </example>\n\n   ### Browsers\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for color contrast testing.\n\n3. **What to test for**\n\n    <div class=\"how-to-test-checklist-item\">\n      <h3>✓ Ensure text has sufficient contrast to the background color</h3>\n      <table class=\"column-2\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Pass</th>\n            <th scope=\"col\">Fail</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><p>This text passes contrast</p></td>\n            <td><p style=\"color:#0FE000\">This text does NOT pass contrast</p></td>\n          </tr>\n          <tr>\n            <td><p style=\"color:#009999; font-size: 18pt\">This text is large enough that it only has to meet a 3:1 color ratio</p></td>\n            <td><p style=\"color:#009999\">This text is the same color but smaller, and fails to meet a 4.5:1 color ratio</p></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n      <h3>✓ Ensure text over images and color gradients has sufficient contrast</h3>\n      <strong>Note:</strong> All of the text must have sufficient color contrast.\n      <table class=\"column-2\" style=\"background: /assets/images/background/assistive-technology-bg.png\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Pass</th>\n            <th scope=\"col\">Fail</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr style=\"background-image: linear-gradient(\n            90deg,\n            hsl(329deg 100% 44%) 0%,\n            hsl(329deg 100% 44%) 7%,\n            hsl(329deg 100% 44%) 13%,\n            hsl(329deg 100% 44%) 20%,\n            hsl(329deg 100% 44%) 27%,\n            hsl(329deg 100% 44%) 33%,\n            hsl(329deg 100% 44%) 40%,\n            hsl(329deg 100% 44%) 47%,\n            hsl(333deg 78% 52%) 53%,\n            hsl(335deg 79% 60%) 60%,\n            hsl(335deg 81% 66%) 67%,\n            hsl(334deg 82% 71%) 73%,\n            hsl(333deg 84% 76%) 80%,\n            hsl(332deg 86% 80%) 87%,\n            hsl(331deg 88% 85%) 93%,\n            hsl(329deg 93% 89%) 100%\n          ); color:#FFFFFF;\">\n            <td><p style=\"color: #FFFFFF;\">This text passes contrast</p></td>\n            <td><p style=\"color: #FFFFFF;\">This text does NOT pass contrast</p></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n      <h3>✓ Ensure that the different states of user interface components have sufficient contrast</h3>\n      <p><strong>Note:</strong> Default state, keyboard focus state, and hover state</p>\n      <table class=\"column-2\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Pass</th>\n            <th scope=\"col\">Fail</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <button class=\"Magentaa11y-button Magentaa11y-button--primary\">This button passes on hover</button>\n            </td>\n            <td>\n              <button class=\"Magentaa11y-button Magentaa11y-button--primary bad-contrast-button\">This button does NOT pass on hover</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n      <div class=\"how-to-test-checklist-item\">\n      <h3>✓ Ensure meaningful graphical objects have sufficient contrast to their background</h3>\n      <p><strong>Note:</strong> 3:1 color contrast ratio</p>\n      <table class=\"column-2\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Pass</th>\n            <th scope=\"col\">Fail</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <span role=\"img\" aria-label=\"black refresh icon\" style=\"font-size:54px;\">↻</span>\n            </td>\n            <td>\n              <span role=\"img\" aria-label=\"green refresh icon\" style=\"color:#0FE000; font-size:54px;\">↻</span>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n      <h3>✓ Ensure color alone is not used to convey information</h3>\n      <p><strong>Note:</strong> Use of additional visual cues that do not rely on color alone</p>\n      <table class=\"column-2\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Pass</th>\n            <th scope=\"col\">Fail</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <img\n                src=\"/media/images/how-to-test/color-contrast-accessible-pie-chart-example.png\"\n                alt=\"pie chart example with each slice labeled so it is accessible to color blind users\"/>\n            </td>\n            <td>\n              <img\n                src=\"/media/images/how-to-test/color-contrast-inaccessible-pie-chart-example.png\"\n                alt=\"pie chart example that is inaccessible to color blind users because it uses a side legend to label the slices\">\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n   ## Related WCAG\n\n   * 1.4.3 Contrast\n   * 1.4.11 Non-text Contrast\n   * 1.4.1 Use of Color\n\n   ## Resources\n\n   * [WebAIM Color Contrast](https://webaim.org/articles/contrast/evaluating)"
        },
        {
          "label": "Images",
          "name": "images",
          "type": "file",
          "generalNotes": "Learn how to test and provide appropriate alternative text for different image types—including informative, decorative, and complex images.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **Types of images**\n\n   There are many types of images. The type of image can be determined by the context of the page being tested. These different types of images have different testing steps.\n\n   * **Informative Images:** These are visuals like pictures, photos, and illustrations that convey important information or concepts. To make them accessible, we need to include a brief description in text form that captures the key content of the image.\n\n   * **Decorative Images:** Sometimes, images are used purely for aesthetic purposes and don't convey meaningful information. In such cases, it's best to provide an empty text alternative `alt=\"\"` to indicate that the image serves a decorative role and doesn't require a description.\n\n   * **Functional Images:** Images that serve as links or buttons should have text alternatives that describe their function rather than just their appearance. For example, if you have an image of a printer icon that initiates a printing action, the alt text should convey this functionality, like \"Print.\"\n\n   * **Images of Text:** Images of text should be avoided whenever possible. In fact, some images of text can violate [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html). However, if you must use images with text, ensure that the alt text contains the exact same words as the text within the image to maintain consistency.\n\n   * **Complex Images such as Graphs and Diagrams:** When using images to present complex data or detailed information, it's crucial to provide a comprehensive text description that conveys all the data and details found in the image. This allows individuals who cannot see the image to still access and understand its content.\n\n2. **How to test**\n\n   ### Automated Testing\n\n   Automated scanning tools, such as [WAVE](https://wave.webaim.org/), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), or [Deque's Axe DevTools](https://www.deque.com/blog/axe-devtools-extension-update-new-color-contrast-analyzer/) are a great starting point for image testing. All of these tools can run page scans that quickly generate reports identifying some image issues. Scans are:\n\n   * <strong>Good</strong> at identifying simple issues like missing <code>alt</code> attributes on images or empty alt attributes on functional images.\n   * <strong>Bad</strong> at identifying issues related to alternative text quality or whether or not an image should be marked as decorative and hidden from screen readers.\n\n   ### Manual testing\n\n   Automated scanning must be complemented with a manual review of the page. Manual image testing can test for alt text quality, ensuring that decorative images are hidden from assistive technology, all text found in images of text are present in alt text, and that functional images have the appropriate alt text.\n\n   #### <strong>Getting started</strong>\n\n   * Open Chrome DevTools in your browser window <span class=\"keyboard-key\">F12</span>\n   * Right-click and select \"Inspect\" on the image in the page you want to test.\n\n3. **Informative Images**\n\n   * Check that the image owns an <code>alt</code> attribute.\n   * Ensure that the <code>alt</code> attribute is present is not empty.\n   * Ensure that the alt attribute is present is not empty, such as <code>alt</code> or <code>alt=\"\"</code>\n   * The <code>alt</code> attribute value / description of the image should be accurate and succinct. The image alternative should not consist of information that duplicates nearby text content.\n\n   <img\n   src=\"media/images/how-to-test/how-to-images-meaningful-1.png\"\n   alt=\"Inspecting an image in DevTools to check alt text, meaningful image\"/>\n\n   ### IMG\n\n   ```html\n   <img alt=\"A rear view of the iPhone 15 Pro in silver, along with a front view of the iPhone 15 Pro Max in silver.\" src=\"../iphone.png\" ... >\n   ```\n\n   ### SVG\n\n   Some images are implemented using inline <code>SVG</code>. Text alernatives for these images can be defined by use of <code>role=\"img\"</code> and <code>aria-label=\"I am the alt text\"</code>. The <code>alt</code> attribute should not be on an element whose <code>role</code> is <code>role=\"img\"</code> this is instead handled by <code>aria-label</code>.\n\n   ```html\n   <svg role=\"img\" aria-label=\"I am the alt text\">...</svg>\n   ```\n\n4. **Decorative Images**\n\n   * Ensure that the <code>alt</code> attribute is present and owns an empty or null value. <code>alt=\"\"</code>.\n   * <strong>Note:</strong> <code>aria-hidden=\"true\"</code> is not needed if an image has an empty or null alt attribute value <code>alt=\"\"</code>.\n\n    <img src=\"media/images/how-to-test/how-to-images-decorative-1.png\" alt=\"Inspecting an image in DevTools to check alt text, decorative image\">\n\n   ```html\n   <img alt=\"\" src=\"../some-image.png\" ...>\n   ```\n\n5. **Functional Images**\n\n   * Ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Functional images are typically links or buttons so the alt text should define the purpose of the link instead of describing the image.\n\n    <img src=\"media/images/how-to-test/how-to-images-functional.png\" alt=\"Inspecting an image in DevTools to check alt text, functional image\">\n\n   * **Note:** Functional images can have empty or null alt attribute values <code>alt=\"\"</code> if the text alternative is conveyed in the parent control's label. For example, <code>aria-label=\"Download on the Apple App Store\"</code>.\n\n   ```html\n   <button aria-label=\"Download on the Apple App Store\">\n       <img src=\"apple.png\" alt=\"\">\n   </button>\n   ```\n\n6. **Images of Text**\n\n   * Sometimes text can't be easily created with HTML and CSS and an image must contain text. In this case, ensure the <code>alt</code> attribute is present and owns a value that includes <strong>all</strong> of the text found in the image.\n   * Typically, the text is the most important part of the image. There is no need for the image itself to be described unless it adds value to the content of the page.\n   * Consider logging a defect for [WCAG 1.4.5 Images of Text](https://www.w3.org/WAI/WCAG22/Understanding/images-of-text.html) if it seems like there might be a viable workaround to add real text to the page vs. an image of text.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-text.png\" alt=\"Inspecting an image in DevTools to check alt text, image of text example\">\n\n   ```html\n   <img src=\"apple-iphone-15-pro.png\" alt=\"Titanium Apple iPhone 15 Pro\">\n   ```\n\n7. **Complex Images**\n\n   * Data visualizations, charts, and graphs can be very difficult to author alternative text for. Some features like charts and graphs may not be accessible themselves but there can be text alternatives nearby that can act as an accessible alternative.\n   * For complex images that are <code>img</code> elements, ensure that the image has an <code>alt</code> attribute and that its value communicates the general purpose of the image. This alt text does not need to contain all of the visual information as that may be too long for an appropriate alt text value. If the alt text does not describe all content in the image ensure there is content nearby, or linked to, that does contain all of the visual information in text form.\n   * For charts and graphs, these features are typically not 100% accessible. Ensure there is content nearby, or linked to, that does contain all of the visual information in text form. For example, an accessible Excel download or HTML Table presenting the key visual information from the content found in the chart.\n   * <strong>Note:</strong> It is important that all text alternatives to complex images must be in an accessible format to qualify as an accessible alternative.\n\n    <img src=\"media/images/how-to-test/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   ```html\n   <img src=\"/assets/images/examples/how-to-test-images-complex-data.png\" alt=\"Complex chart with nearby HTML table for text alternative\">\n\n   <table>\n       <caption>NASDAQ: TMUS</caption>\n       <tr>\n       <th>Date</th>\n       <th>Price</th>\n       <!-- ... -->\n       </tr>\n       <tr>\n       <td>January 10</td>\n       <td>122.20</td>\n       <!-- ... -->\n       </tr>\n   </table>\n   ```\n\n8. **What to test for**\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure meaningful images have alt text</h3>\n    <p><strong>Note:</strong> The passing example has alt text that matches the text found in the image. The failing example uses the filename for the <code>alt</code> attribute value. Screen readers will announce the filename <code>234@@4-JWKK##KK4442221-11-phone-apple-prod.png</code> which will create a confusing experience.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"Titanium Apple iPhone 15 Pro\"/>\n                </td>   \n                <td>\n                    <img src=\"media/images/how-to-test/how-to-test-example-iphone.png\" alt=\"234@@4-JWKK##KK4442221-11-phone-apple-prod.png\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure decorative images are hidden from assistive technology</h3>\n    <p><strong>Note:</strong> Passing example image has an empty <code>alt</code> attribute value. The failing example has a very long redundant description of the image. Not only is it too verbose, it has the same text as the nearby text content.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>   \n                <td>\n                    <div style=\"text-align: center;\">\n                        <a href=\"#\">\n                            <img src=\"media/images/how-to-test/how-to-test-images-decorative-example.jpg\" alt=\"Home internet. Picture of a magenta colored gateway device inside of an open box, icon\" style=\"max-width: 200px; margin: 0 auto;\" />\n                            <span style=\"display: block;\">Home Internet</span>\n                        </a>\n                    </div>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n    <div class=\"how-to-test-checklist-item\">\n    <h3>✓ Ensure complex images have a text alternative</h3>\n    <p><strong>Note:</strong> The passing chart has a general text alternative describing what the image is but also references nearby text data for reference. <code>alt=\"Fruit chart, data below\"</code>. The failing example owns an empty alt attribute value which hides the image from screen reader users and does not provide an alternative.</p>\n    <table >\n        <thead>\n            <th scope=\"col\">\n                Pass\n            </th>\n            <th scope=\"col\">\n                Fail\n            </th>\n        </thead>\n        <tbody>\n            <tr>\n                <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"Fruit chart, data below\"/>\n                    <ul>\n                        <li>Watermelons 20%</li>\n                        <li>Grapes 10%</li>\n                        <li>Oranges 24%</li>\n                        <li>Apples 30%</li>\n                        <li>Bananas 16%</li>\n                    </ul>\n                    </td>   \n                    <td>\n                    <img src=\"media/images/how-to-test/accessible-pie-chart-example.png\" \n                    alt=\"\"/>\n                </td>\n            </tr>  \n        </tbody>\n    </table>\n    </div>\n\n   ### Related WCAG\n\n   * 1.1.1 Non-text Content\n   * 1.4.5 Images of Text\n   * 2.4.4 Link Purpose\n   * 2.5.3 Label in Name\n   * 4.1.2 Name, Role, Value\n\n   ### Resources\n\n   * [W3C Images Tutorial](https://www.w3.org/WAI/tutorials/images/)\n   * [WebAIM Alternative Text](https://webaim.org/techniques/alttext/)"
        },
        {
          "label": "Keyboard & Focus",
          "name": "keyboard-&-focus",
          "type": "file",
          "generalNotes": "Manual testing is not difficult or time-consuming once a team understands keyboard interactions.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nContains developer-specific information, including expected behaviors, implementation details, and\nbest practices.\n\n1. **Test with the keyboard only**\n\n   It is crucial to **test with only the keyboard first**, without the screen reader activated.\n\n   ### Why keyboard testing is so important\n\n   * Keyboard accessibility is **prerequisite** to screen reader accessibility.\n     * If it doesn’t work with only the keyboard, it won’t work with a screen reader.\n   * Screen reader applications will sometimes cover missing functionality that the sighted keyboard user won’t be able to use.\n\n   ### Devices\n\n   * Test with a mobile device and a bluetooth keyboard\n\n   * Test with a desktop device and a keyboard\n\n   ### Browsers\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for keyboard testing.\n\n   * Note: In Safari, you’ll have to activate tab in Preferences » Advanced » Press Tab\n\n2. **How to test**\n\n   Keyboard testing consists of a few keyboard commands to interact with web experiences.\n\n   ### Keyboard basics\n\n   | Key         | Action                                                                                               |\n   | ----------- | ---------------------------------------------------------------------------------------------------- |\n   | Arrows      | Should scroll the screen or interact with form fields                                                |\n   | Tab         | Moves through the interface focusing on elements that are focusable. For example, buttons and links. |\n   | Shift + Tab | Moves in reverse through the interface focusing on elements that are focusable.                      |\n   | Enter       | Active links and buttons.                                                                            |\n   | Spacebar    | Activates buttons and interacts with form elements.                                                  |\n   | Escape      | Should close or dismiss widgets like dialogs .                                                       |\n\n3. **What to test for**\n\n   ✓ **Ensure all mouse functionality is present for keyboard**\n\n   Identify functionality within the experience that can be operated with a mouse or pointing device. Ensure this content can be accessed with they keyboard alone.\n\n   ✓ **Ensure there is a highly visible visual indication of keyboard focus**\n\n   Keyboard users need to understand where they are in the interface at all times. The visual indication of keyboard focus (focus ring) should be highly visible and have a color contrast ratio of 3:1 against the background. Verify that overlap items (e.g. cookie banners, sticky footers, sticky headers, and non-modal dialogs) do not obscure the visual indicator.\n\n   ✓ **Ensure that there are no keyboard traps**\n\n   Ensure that while navigating the experience, you do not encounter situations where you are not able to move forward or backward with the keyboard alone.\n\n   ✓ **Verify that the focus order is logical**\n\n   In an English-based experience, keyboard focus should move top-to-bottom and left-to-right in a logical order. Ensure focus is not jumping around the experience in a way that makes it hard to understand the content.\n\n   ✓ **On focus does not create a change of context**\n\n   Ensure that when an interactive element receives keyboard focus that a change of context is not initiated without warning of such behavoir. An example of change of context is a page load or web form submission.\n\n   ✓ **Test for skip links**\n\n   Where there are large chunks of repeated content, ensure that there are skip links present for keboard users. For example, on a site with a large site navigation system, the first focusable element in the page should be a link that allows users to jump to the main content of the site.\n\n### Video Example\n\n<video controls>\n  <source src=\"media/video/how-to-test/how-to-keyboard.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n## Related WCAG\n\n* 1.4.11: Non-text Contrast\n* 2.1.1 Keyboard\n* 2.1.2 No Keyboard Trap\n* 2.4.3 Focus Order\n* 2.4.7 Focus Visible\n* 3.2.1 On Focus\n\n## Resources\n\n[WebAIM: Keyboard Accessibility](https://webaim.org/techniques/keyboard/)"
        },
        {
          "label": "Links & Buttons",
          "name": "links-&-buttons",
          "type": "file",
          "generalNotes": "Testing links and buttons is essential to ensuring a site is accessible and functional for all\nusers.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nContains developer-specific information, including expected behaviors, implementation details, and\nbest practices.\n\n1. **How to test**\n\n   **Test with your keyboard first**\n\n   Navigate through the page using only the tab and shift + tab keys on your keyboard to reach all\n   links and buttons.\n\n   **Test with screen readers second**\n\n   Use a screen reader, such as NVDA (for Windows) or VoiceOver (for macOS) and browse the page\n   using your arrow keys to reach all links and buttons.\n\n2. **What to test for**\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure each link and button receives focus and has a visible focus indicator</h3>\n       <div class=\"table-wrapper\">\n         <table>\n           <thead>\n               <th scope=\"col\">\n               Pass\n               </th>\n               <th scope=\"col\">\n               Fail\n               </th>\n           </thead>\n           <tbody>\n           <tr>\n               <td>\n               <button class=\"Magentaa11y-button Magentaa11y-button--primary\">I get focus!</button>\n               </td>\n               <td>\n               <div class=\"Magentaa11y-button Magentaa11y-button--primary\">I do NOT get focus</div>\n               </td>\n           </tr>\n               <tr>\n               <td>\n               <a href=\"#\">I get focus!</a>\n               </td>\n               <td>\n               <a>I do NOT get focus</a>\n               </td>\n           </tr>\n           </tbody>\n         </table>\n       </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure buttons and links can be activated with the <code>enter</code> key and that buttons can also be activated with the <code>space</code> key</h3>\n       <div class=\"table-wrapper\">\n         <table>\n             <thead>\n             <th scope=\"col\">\n                 Pass\n             </th>\n             <th scope=\"col\">\n                 Fail\n             </th>\n             </thead>\n             <tbody>\n             <tr>\n             <td>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" data-fn=\"showAlert\">Show alert</button>\n             </td>\n             <td>\n                 <div class=\"Magentaa11y-button Magentaa11y-button--primary\" type=\"button\" tabindex=\"0\" data-fn=\"showMouseAlert\" data-event=\"onMouseDown\">\n                 Show alert\n                 </div>\n             </td>\n             </tr>\n                 <tr>\n             <td>\n                 <a href=\"/home\">Magentaa11y home</a>\n             </td>\n             <td>\n                 <a tabindex=\"0\" data-fn=\"goToHome\" data-event=\"onMouseUp\" >Magentaa11y home</a>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n       </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure disabled controls are focusable but not actionable, and have an <code>aria-disabled=\"true\"</code> attribute</h3>\n         <p><strong>Note:</strong> A control that is disabled should not be interactive to any users. Nothing should happen when activated.</p>\n         <div class=\"table-wrapper\">\n           <table >\n               <thead>\n               <th scope=\"col\">\n                   Preferred\n               </th>\n               <th scope=\"col\">\n                   Visually disabled but actionable\n               </th>\n               </thead>\n               <tbody>\n               <tr>\n               <td>\n                   <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-disabled=\"true\">Save</button>\n               </td>\n               <td>\n                   <button class=\"Magentaa11y-button Magentaa11y-button--primary visually-disabled\" tabindex=\"-1\" data-fn=\"showAlertWhenDisabled\">Save</button>\n               </td>\n               </tr>\n               </tbody>\n           </table>\n         </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all links and buttons have clear labels and that all graphical controls have accurate <code>aria-label</code> attributes</h3>\n         <div class=\"table-wrapper\">\n           <table>\n             <thead>\n             <th scope=\"col\">\n                 Pass\n             </th>\n             <th scope=\"col\">\n                 Fail\n             </th>\n             </thead>\n             <tbody>\n                 <tr>\n             <td>\n                 <button data-icon=\"playCircleOutlined\" aria-label=\"Play video\" />\n             </td>\n             <td>\n                 <button data-icon=\"playCircleOutlined\">\n                 </button>\n             </td>\n             </tr>\n             <tr>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more about links\n         </a>\n             </td>\n             <td>\n                 <a href=\"https://www.magentaa11y.com/checklist-web/link/\">\n             Learn more\n         </a>\n             </td>\n             </tr>\n             </tbody>\n         </table>\n       </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n         <h3>✓ Ensure all CTA buttons or links have appropriate <code>aria-label</code> values.</h3>\n         <p><strong>Note:</strong> If a control has <code>aria-label</code>, the <code>aria-label</code> must contain the text that is presented visually. The text should not be broken up and be the first part of the label.</p>\n         <div class=\"table-wrapper\">\n           <table>\n             <thead>\n                 <th scope=\"col\">\n                 Pass\n                 </th>\n                 <th scope=\"col\">\n                 Fail\n                 </th>\n             </thead>\n             <tbody>\n                 <tr>\n                 <td>\n                 <h2>iPhone 14</h2>\n                 <p>I am the product information.</p>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Buy now, iPhone 14\">Buy Now</button>\n                 </td>\n                 <td>\n                 <h2>iPhone 14</h2>\n                 <p>I am the product information.</p>\n                 <button class=\"Magentaa11y-button Magentaa11y-button--primary\" aria-label=\"Learn more about our specials\">Buy Now</button>\n                 </td>\n             </tr>\n             <tr>\n                 <td>\n                 <code>aria-label=\"Buy now, iPhone 14\"</code>\n                 </td>\n                 <td>\n                 <code>aria-label=\"Learn more about our specials\"</code>\n                 </td>\n             </tr>\n             </tbody>\n           </table>\n         </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure screen readers accurately announce any button or link state that is conveyed visually</h3>\n       <p><strong>Note:</strong> States such as expanded,collapsed, or current can be communicated to screen reader users.</p>\n       <div class=\"table-wrapper\">\n         <table>\n           <thead>\n             <th scope=\"col\">Pass</th>\n             <th scope=\"col\">Fail</th>\n           </thead>\n           <tbody>\n             <tr>\n               <td>\n                 <div class=\"MagentaA11y-accordion\">\n                   <h2 class=\"MagentaA11y-accordion__heading\">\n                     <button\n                       class=\"MagentaA11y-accordion__headline\"\n                       aria-expanded=\"false\"\n                       data-fn=\"toggleAccordionState\"\n                       aria-controls=\"list\">\n                       <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                     </button>\n                   </h2>\n                   <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n                     This button expressed its state as expanded or collapsed\n                   </div>\n                 </div>\n               </td>\n               <td>\n                 <!--  -->\n                 <div class=\"MagentaA11y-accordion\">\n                   <h2 class=\"MagentaA11y-accordion__heading\">\n                     <button class=\"MagentaA11y-accordion__headline\" aria-controls=\"listB\">\n                       <span class=\"MagentaA11y-accordion__headline--text\">More details</span>\n                     </button>\n                   </h2>\n                   <div class=\"MagentaA11y-accordion__body\" id=\"listB\">\n                     This button is not conveying it's state.\n                   </div>\n                 </div>\n               </td>\n             </tr>\n           </tbody>\n         </table>\n       </div>\n     </div>\n\n     <div class=\"how-to-test-checklist-item\">\n       <h3>✓ Ensure skip to &amp; same-page links move focus for screen reader and keyboard users</h3>\n       <div class=\"table-wrapper\">\n         <table class=\"column-2\">\n           <thead>\n             <tr><th scope=\"col\">\n               Pass\n             </th>\n             <th scope=\"col\">\n               Fail\n             </th>\n           </tr></thead>\n           <tbody>\n           <tr>\n             <td>\n             <a id=\"return-to-top-link\" data-fn=\"scrollAndFocusMain\" href=\"#\">Return to top</a>\n             </td>\n             <td>\n             <a href=\"#\" data-fn=\"scrollToTopOnly\">\n             Return to top</a>\n             </td>\n           </tr> \n           </tbody>\n         </table>\n       </div>\n     </div>\n\n3. **What's the difference between a link and a button**\n\n   ### If it goes somewhere, it's `<a>` link.\n\n   * When the user clicks a link, they are taken to a different location in the site.\n     * Either another page or even another area of the same page\n   * A link can look like a big shiny button but it must be coded as `<a>` link\n   * An interactive link should have a valid href value so it can receive keyboard focus.<br>For\n     example `<a href=\"/some-page\">...</a>`.\n\n   ### If it does something, it's a `<button>`\n\n   * Buttons cause an action to occur on the same page\n     * Submit a form (even when submission takes you to a new page)\n     * Open a menu\n     * Launch a modal\n     * Expand details\n   * A button can look like a link, but it must be coded as a `<button>`\n\n   ## Related WCAG\n\n   * 2.4.4 Link Purpose (In Context)\n   * 2.5.3 Label in Name\n   * 3.2.4 Consistent Identification\n   * 4.1.2 Name, Role, Value\n\n   ## Resources\n\n   [WebAIM: Links and Hypertext](https://webaim.org/techniques/hypertext/)\n\n   [WebAIM: Buttons](https://webaim.org/techniques/forms/controls#button)"
        },
        {
          "label": "Not Sure If It Is An Issue",
          "name": "not-sure-if-it-is-an-issue",
          "type": "file",
          "generalNotes": "When conducting accessibility testing, testers may come across barriers that could be accessibility-related issues, or they could be unrelated. If you're unsure whether the problem you've identified is a genuine accessibility issue, the following steps can help you verify it.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\nAccessibility testing is important because it helps to ensure that everyone can use a website or application, regardless of their disability. This includes people who are blind, deaf, have low vision, or have mobility impairments.\n\nTo thoroughly test web accessibility, a combination of manual and automated testing methods are performed against the [Web Content Accessibility Guidelines (WCAG) 2.2 Level A and AA](https://www.w3.org/TR/WCAG22/). Manual testing involves people navigating the site, using assistive technologies like screen readers or keyboard-only navigation, and verifying if all content is perceivable, operable, understandable. Automated testing utilizes specialized tools to scan for common accessibility issues, such as missing alternative text for images or improper heading structure.\n\nBy combining both approaches, we can identify and address accessibility barriers comprehensively, improving the overall user experience and inclusivity of our digital products.\n\n1. ## Test against MagentaA11y.com\n\n   A good first step is to test against MagentaA11y.com patterns. Each pattern includes a How to Test section, code samples, notes about expected functionality, and clear acceptance criteria.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Toggle Switch</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      On the web page you are testing you encounter a toggle switch that does not work with the left and right arrow keys like you believe it should.\n\n      <h3>What to do</h3>\n      To verify if arrow key support is expected for toggles on the web, you can first check MagentaA11y. Locate the <a href=\"https://www.magentaa11y.com/MagentaA11yV2#/web-criteria/component/toggle-switch\">Toggle Switch</a> component page and review the How to test section. Arrow key support is not mentioned so this is not a requirement for toggle Switch components and so this is not an accessibility issue. \n      </div>\n      </div>\n\n2. ## Design System\n\n   If you are testing an experience that is created from a formal design system, you can reference that design system’s documentation. Design systems will provide functional components and detailed information on how components should be implemented and function.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Interactive Table</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      You are testing a page that consists of an interactive table. When you send keyboard focus to the table, focus skips the table headers and jumps to the second row. You are not sure if this is a focus order issue.\n\n      <h3>What to do</h3>\n      You know this project uses the brand-new design system, so you check the documentation for the interactive table. You learn that the table is implemented as an ARIA Grid and learn that this is the expected behavior, so this is not an accessibility issue. \n      </div>\n      </div>\n\n3. ## Automated testing\n\n   Often, accessibility barriers are related to code issues. Automated testing can quickly detect code-related issues that may create barriers for assistive technology users.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Nested Buttons</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      You are testing a button that when activated, presents a list of options. For some reason, the screen reader will not interact with the button correctly. \n\n      <h3>What to do</h3>\n      You have ran some automated accessibility tests and in the results there is an issue identified that indicates the author has nested a button element inside of another button element and that is not only invalid HTML, it is creating the barrier with the screen reader so this is an issue.\n\n   ```html\n   <div role=\"button\" tabindex=\"0\">\n     <button>Click Me</button>\n   </div>\n   ```\n\n      </div>\n      </div>\n\n4. ## Code Inspection\n\n   Automated testing does not catch everything. You can have code that is “correct” or valid and it can still create accessibility issues. Manual inpsection of code can often identify what the issue is.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Nested Dialogs</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      On the web page you are testing you encounter a dialog that is not being announced by the NVDA screen reader for some reason.\n\n      <h3>What to do</h3>\n      After opening Chrome DevTools and inspecting the code, you notice higher up in the DOM that there is a dialog element nested inside of another dialog element. While this may be valid HTML, it has created a barrier for NVDA users because it is not a standard implementation of a dialog, so this is an accessibility issue.\n      </div>\n      </div>\n\n5. ## HTML Validation\n\n   Code validity and proper use of HTML is an important factor with accessibility. You can use the Nu Html Checker to validate code. You can also reference the HTML Living Standard for guidelines on proper HTML use.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Label not announced</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      An ARIA Combobox has a nearby text label, but this label is not announced by the screen reader when the widget receives focus. \n\n      <h3>What to do</h3>\n      Using the Nu Html Checker, validate an isolated fragment of code to see if there are any code validity issues. Improper use of HTML or even spelling errors can cause accessibility barriers. For example, <code>aria-labeledby</code> is misspelled and should be <code>aria-labelledby</code>. Code validation would detect this code issue. \n      </div>\n      </div>\n\n6. ## Verify you are correctly using the screen reader or keyboard\n\n      <!-- TODO: When the folder structure for \"how to test\" is updated, these two links will need to be updated -->\n\n   Before you log an issue, make sure that you have tested it correctly. Refer to the MagentaAlly sections on How to test [Keyboard & focus](https://www.magentaa11y.com/MagentaA11yV2#/how-to-test/page-level/keyboard-&-focus/) and [Screen readers](https://www.magentaa11y.com/MagentaA11yV2#/how-to-test/page-level/screen-readers/) for guidance on system settings and methodology.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Unable to navigate with Tab</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      You are attempting to test a web page on your Mac with your keyboard, but are unable to focus on elements you think should be focusable with the Tab Key.\n\n      <h3>What to do</h3>\n      On your MacOS, you go into the \"Keyboard\" section of your \"System Settings\" and see that \"Keyboard navigation\" has not been turned on. Once you turn it on, you are able to tab through the page as expected so this is not an issue. \n      </div>\n      </div>\n\n7. ## Verify with other screen reader and browser combinations\n\n   Sometimes there are bugs that exist with different screen reader and browser combinations, so it is important to test with several browsers and, ideally, different screen readers.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Accordion not annoucing as expanded</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      You are testing a page in Chrome with NVDA. On page load there is an expanded accordion button, but it is not annoucing as expanded with NVDA.\n\n      <h3>What to do</h3>\n      You inspect the code and see the appropriate <code>aria-expanded=\"true\"</code> attribute, so you test the same page in Firefox with NVDA and JAWS, as well as in Safari with VoiceOver. The button is announcing as expected in all environments so you determine there is a bug with NVDA/Chrome and do not need to mark it as an accessibility issue. \n      </div>\n      </div>\n\n8. ## Document the accessibility issue\n\n   Make it easy for others to review and fix your issue.\n\n      <div class=\"MagentaA11y-accordion\">\n      <h2 class=\"MagentaA11y-accordion__heading\">\n      <button\n        class=\"MagentaA11y-accordion__headline\"\n        aria-expanded=\"false\"\n        data-fn=\"toggleAccordionState\"\n        aria-controls=\"list\">\n        <span class=\"MagentaA11y-accordion__headline--text\">Example: Image not announcing</span>\n      </button>\n      </h2>\n      <div class=\"MagentaA11y-accordion__body\" id=\"list\">\n      <h3>Scenario</h3>\n      You discovered an image of a product that is not announcing for screen readers on the home page because it is missing an <code>alt</code> attribute.\n\n      <h3>What to do</h3>\n      You want to clearly capture the exact steps to recreate the issue in your organizations bug tracking system:\n\n      <ul>\n        <li>The URL where the image is located</li>\n        <li>A description of the image and its location on the page</li>\n        <li>The accessibility concern (ex: \"missing <code>alt</code> attribute\")</li>\n        <li>Who it impacts - which users are impacted by the barrier and why</li>\n        <li>A snippet of the corresponding code</li>\n        <li>Screenshots of the images (ensure the screenshot has context - don't crop too tight)</li>\n        <li>A good/fixed snippet of the corresponding code</li>\n      </ul>\n\n   While it is always helpful to provide screenshots, your issue should be written clear enough that they are not needed by someone reading the details of the bug.\n\n      </div>\n      </div>"
        }
      ]
    },
    {
      "label": "Page Level",
      "name": "page-level",
      "children": [
        {
          "label": "Keyboard & Focus",
          "name": "keyboard-&-focus",
          "type": "file",
          "generalNotes": "Manual testing is not difficult or time consuming once a team understands keyboard interactions.",
          "gherkin": null,
          "condensed": null,
          "criteria": null,
          "videos": null,
          "androidDeveloperNotes": null,
          "iosDeveloperNotes": null,
          "developerNotes": "## Developer Notes\n\n1. **Test with the keyboard only**\n\n   It is crucial to **test with only the keyboard first**, without the screen reader activated.\n\n   **Why keyboard testing is so important**\n\n   * Keyboard accessibility is **prerequisite** to screen reader accessibility.\n\n     * If it doesn't work with only the keyboard, it won't work with a screen reader.\n\n   * screen reader applications will sometimes cover missing functionality that the sighted keyboard user won't be able to use.\n\n   **Devices**\n\n   * Test with a mobile device and a bluetooth keyboard\n   * Test with a desktop device and a keyboard\n\n   **Browsers**\n\n   * Any major browser (Chrome, Safari, Firefox) is acceptable for keyboard testing.\n\n   * Note: In Safari, you'll have to activate tab in Preferences » Advanced » Press Tab\n\n2. **How to test**\n\n   Keyboard testing consists of a few keyboard commands to interact with web experiences.\n\n   <table >\n     <caption class=\"text-left\">\n       Keyboard basics\n     </caption>\n     <thead>\n       <tr>\n         <th scope=\"col\">\n           Key\n         </th>\n         <th scope=\"col\">\n           Action\n         </th>\n       </tr>\n     </thead>\n     <tbody>\n       <tr>\n         <th scope=\"row\">\n           <span >Arrows</span>\n         </th>\n         <td>\n           Should scroll the screen or interact with form fields\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Tab</span>\n         </th>\n         <td>\n           Moves through the interface focusing on elements that are focusable. For example, buttons and links.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Shift + Tab</span>\n         </th>\n         <td>\n           Moves in reverse through the interface focusing on elements that are focusable.\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Enter</span>\n         </th>\n         <td>\n           Activates links and buttons\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Spacebar</span>\n         </th>\n         <td>\n           Activates buttons and interacts with form elements\n         </td>\n       </tr>\n       <tr>\n         <th scope=\"row\">\n           <span >Escape</span>\n         </th>\n         <td>\n           Should close or dismiss widgets like dialogs\n         </td>\n       </tr>  \n     </tbody>\n   </table>\n\n3. **What to test for**\n\n   * <div >\n       <h3>✓ Ensure all mouse functionality is present for keyboard</h3>\n       <p>Identify functionality within the experience that can be operated with a mouse or pointing device. Ensure this content can be accessed with they keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Ensure there is a highly visible visual indication of keyboard focus</h3>\n       <p>Keyboard users need to understand where they are in the interface at all times. The visual indication of keyboard focus (focus ring) should be highly visible and have a color contrast ratio of 3:1 against the background. Verify that overlap items (e.g. cookie banners, sticky footers, sticky headers, and non-modal dialogs) do not obscure the visual indicator. </p>\n     </div>\n   * <div >\n       <h3>✓ Ensure that there are no keyboard traps</h3>\n       <p>Ensure that while navigating the experience, you do not encounter situations where you are not able to move forward or backward with the keyboard alone.</p>\n     </div>\n   * <div >\n       <h3>✓ Verify that the focus order is logical</h3>\n       <p>In an English-based experience, keyboard focus should move top-to-bottom and left-to-right in a logical order. Ensure focus is not jumping around the experience in a way that makes it hard to understand the content.</p>\n     </div>\n   * <div >\n       <h3>✓ On focus does not create a change of context</h3>\n       <p>Ensure that when an interactive element receives keyboard focus that a change of context is not initiated without warning of such behavoir. An example of change of context is a page load or web form submission.</p>\n     </div>\n   * <div >\n       <h3>✓ Test for skip links</h3>\n       <p>Where there are large chunks of repeated content, ensure that there are skip links present for keboard users. For example, on a site with a large site navigation system, the first focusable element in the page should be a link that allows users to jump to the main content of the site.</p>\n     </div>\n\n### Video Example\n\n<video controls>\n  <source src=\"media/video/how-to-test/how-to-keyboard.webm\" type=\"video/webm\">\n  Your browser does not support the video tag.\n</video>\n\n<hr>\n\n### Related WCAG\n\n* 1.4.11: Non-text Contrast\n* 2.1.1 Keyboard\n* 2.1.2 No Keyboard Trap\n* 2.4.3 Focus Order\n* 2.4.7 Focus Visible\n* 3.2.1 On Focus\n\n### Resources\n\n[WebAIM Keyboard Accessibility](https://webaim.org/techniques/keyboard/)"
        }
      ]
    }
  ]
}